
IoT_sleep.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000486  00800200  00004e6e  00004f02  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00004e6e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00001225  00800686  00800686  00005388  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00005388  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000053e4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000910  00000000  00000000  00005424  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000c1b3  00000000  00000000  00005d34  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002e46  00000000  00000000  00011ee7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00005a53  00000000  00000000  00014d2d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001f28  00000000  00000000  0001a780  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000039b1  00000000  00000000  0001c6a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000adeb  00000000  00000000  00020059  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000009a0  00000000  00000000  0002ae44  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	f6 c1       	rjmp	.+1004   	; 0x3ee <__ctors_end>
       2:	00 00       	nop
       4:	15 c2       	rjmp	.+1066   	; 0x430 <__bad_interrupt>
       6:	00 00       	nop
       8:	13 c2       	rjmp	.+1062   	; 0x430 <__bad_interrupt>
       a:	00 00       	nop
       c:	11 c2       	rjmp	.+1058   	; 0x430 <__bad_interrupt>
       e:	00 00       	nop
      10:	0f c2       	rjmp	.+1054   	; 0x430 <__bad_interrupt>
      12:	00 00       	nop
      14:	0d c2       	rjmp	.+1050   	; 0x430 <__bad_interrupt>
      16:	00 00       	nop
      18:	0b c2       	rjmp	.+1046   	; 0x430 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	09 c2       	rjmp	.+1042   	; 0x430 <__bad_interrupt>
      1e:	00 00       	nop
      20:	07 c2       	rjmp	.+1038   	; 0x430 <__bad_interrupt>
      22:	00 00       	nop
      24:	05 c2       	rjmp	.+1034   	; 0x430 <__bad_interrupt>
      26:	00 00       	nop
      28:	03 c2       	rjmp	.+1030   	; 0x430 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	01 c2       	rjmp	.+1026   	; 0x430 <__bad_interrupt>
      2e:	00 00       	nop
      30:	9b c6       	rjmp	.+3382   	; 0xd68 <__vector_12>
      32:	00 00       	nop
      34:	fd c1       	rjmp	.+1018   	; 0x430 <__bad_interrupt>
      36:	00 00       	nop
      38:	fb c1       	rjmp	.+1014   	; 0x430 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	f9 c1       	rjmp	.+1010   	; 0x430 <__bad_interrupt>
      3e:	00 00       	nop
      40:	f7 c1       	rjmp	.+1006   	; 0x430 <__bad_interrupt>
      42:	00 00       	nop
      44:	f5 c1       	rjmp	.+1002   	; 0x430 <__bad_interrupt>
      46:	00 00       	nop
      48:	f3 c1       	rjmp	.+998    	; 0x430 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	f1 c1       	rjmp	.+994    	; 0x430 <__bad_interrupt>
      4e:	00 00       	nop
      50:	ef c1       	rjmp	.+990    	; 0x430 <__bad_interrupt>
      52:	00 00       	nop
      54:	ed c1       	rjmp	.+986    	; 0x430 <__bad_interrupt>
      56:	00 00       	nop
      58:	eb c1       	rjmp	.+982    	; 0x430 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	e9 c1       	rjmp	.+978    	; 0x430 <__bad_interrupt>
      5e:	00 00       	nop
      60:	e7 c1       	rjmp	.+974    	; 0x430 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 18 1c 	jmp	0x3830	; 0x3830 <__vector_25>
      68:	0c 94 6a 1c 	jmp	0x38d4	; 0x38d4 <__vector_26>
      6c:	e1 c1       	rjmp	.+962    	; 0x430 <__bad_interrupt>
      6e:	00 00       	nop
      70:	df c1       	rjmp	.+958    	; 0x430 <__bad_interrupt>
      72:	00 00       	nop
      74:	dd c1       	rjmp	.+954    	; 0x430 <__bad_interrupt>
      76:	00 00       	nop
      78:	db c1       	rjmp	.+950    	; 0x430 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	d9 c1       	rjmp	.+946    	; 0x430 <__bad_interrupt>
      7e:	00 00       	nop
      80:	d7 c1       	rjmp	.+942    	; 0x430 <__bad_interrupt>
      82:	00 00       	nop
      84:	d5 c1       	rjmp	.+938    	; 0x430 <__bad_interrupt>
      86:	00 00       	nop
      88:	d3 c1       	rjmp	.+934    	; 0x430 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	d1 c1       	rjmp	.+930    	; 0x430 <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 ae 1c 	jmp	0x395c	; 0x395c <__vector_36>
      94:	0c 94 00 1d 	jmp	0x3a00	; 0x3a00 <__vector_37>
      98:	cb c1       	rjmp	.+918    	; 0x430 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	c9 c1       	rjmp	.+914    	; 0x430 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	c7 c1       	rjmp	.+910    	; 0x430 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	c5 c1       	rjmp	.+906    	; 0x430 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	c3 c1       	rjmp	.+902    	; 0x430 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	c1 c1       	rjmp	.+898    	; 0x430 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	bf c1       	rjmp	.+894    	; 0x430 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	bd c1       	rjmp	.+890    	; 0x430 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	bb c1       	rjmp	.+886    	; 0x430 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	b9 c1       	rjmp	.+882    	; 0x430 <__bad_interrupt>
      be:	00 00       	nop
      c0:	b7 c1       	rjmp	.+878    	; 0x430 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	b5 c1       	rjmp	.+874    	; 0x430 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	b3 c1       	rjmp	.+870    	; 0x430 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 44 1d 	jmp	0x3a88	; 0x3a88 <__vector_51>
      d0:	0c 94 96 1d 	jmp	0x3b2c	; 0x3b2c <__vector_52>
      d4:	ad c1       	rjmp	.+858    	; 0x430 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 da 1d 	jmp	0x3bb4	; 0x3bb4 <__vector_54>
      dc:	0c 94 2c 1e 	jmp	0x3c58	; 0x3c58 <__vector_55>
      e0:	a7 c1       	rjmp	.+846    	; 0x430 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	6e 01       	movw	r12, r28
      e6:	6e 01       	movw	r12, r28
      e8:	6e 01       	movw	r12, r28
      ea:	a8 01       	movw	r20, r16
      ec:	b0 01       	movw	r22, r0
      ee:	c6 01       	movw	r24, r12
      f0:	6e 01       	movw	r12, r28
      f2:	6e 01       	movw	r12, r28
      f4:	a8 01       	movw	r20, r16
      f6:	b0 01       	movw	r22, r0

000000f8 <prvIdleTask>:
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    }
      f8:	0a ec       	ldi	r16, 0xCA	; 202
      fa:	16 e1       	ldi	r17, 0x16	; 22
      fc:	0f 2e       	mov	r0, r31
      fe:	fa ef       	ldi	r31, 0xFA	; 250
     100:	ef 2e       	mov	r14, r31
     102:	f6 e1       	ldi	r31, 0x16	; 22
     104:	ff 2e       	mov	r15, r31
     106:	f0 2d       	mov	r31, r0
     108:	80 91 c9 16 	lds	r24, 0x16C9	; 0x8016c9 <uxDeletedTasksWaitingCleanUp>
     10c:	88 23       	and	r24, r24
     10e:	11 f1       	breq	.+68     	; 0x154 <prvIdleTask+0x5c>
     110:	0f b6       	in	r0, 0x3f	; 63
     112:	f8 94       	cli
     114:	0f 92       	push	r0
     116:	d8 01       	movw	r26, r16
     118:	17 96       	adiw	r26, 0x07	; 7
     11a:	ed 91       	ld	r30, X+
     11c:	fc 91       	ld	r31, X
     11e:	18 97       	sbiw	r26, 0x08	; 8
     120:	c0 85       	ldd	r28, Z+8	; 0x08
     122:	d1 85       	ldd	r29, Z+9	; 0x09
     124:	ce 01       	movw	r24, r28
     126:	02 96       	adiw	r24, 0x02	; 2
     128:	84 d4       	rcall	.+2312   	; 0xa32 <uxListRemove>
     12a:	80 91 bd 16 	lds	r24, 0x16BD	; 0x8016bd <uxCurrentNumberOfTasks>
     12e:	81 50       	subi	r24, 0x01	; 1
     130:	80 93 bd 16 	sts	0x16BD, r24	; 0x8016bd <uxCurrentNumberOfTasks>
     134:	80 91 c9 16 	lds	r24, 0x16C9	; 0x8016c9 <uxDeletedTasksWaitingCleanUp>
     138:	81 50       	subi	r24, 0x01	; 1
     13a:	80 93 c9 16 	sts	0x16C9, r24	; 0x8016c9 <uxDeletedTasksWaitingCleanUp>
     13e:	0f 90       	pop	r0
     140:	0f be       	out	0x3f, r0	; 63
     142:	8b 8d       	ldd	r24, Y+27	; 0x1b
     144:	9c 8d       	ldd	r25, Y+28	; 0x1c
     146:	d1 d3       	rcall	.+1954   	; 0x8ea <vPortFree>
     148:	ce 01       	movw	r24, r28
     14a:	cf d3       	rcall	.+1950   	; 0x8ea <vPortFree>
     14c:	80 91 c9 16 	lds	r24, 0x16C9	; 0x8016c9 <uxDeletedTasksWaitingCleanUp>
     150:	81 11       	cpse	r24, r1
     152:	de cf       	rjmp	.-68     	; 0x110 <prvIdleTask+0x18>
     154:	f7 01       	movw	r30, r14
     156:	80 81       	ld	r24, Z
     158:	82 30       	cpi	r24, 0x02	; 2
     15a:	08 f0       	brcs	.+2      	; 0x15e <prvIdleTask+0x66>
     15c:	3f d5       	rcall	.+2686   	; 0xbdc <vPortYield>
     15e:	0e 94 55 15 	call	0x2aaa	; 0x2aaa <vApplicationIdleHook>
     162:	d2 cf       	rjmp	.-92     	; 0x108 <prvIdleTask+0x10>

00000164 <prvTimerTask>:
     164:	cf 93       	push	r28
            pxNewTimer->ucStatus = 0x00;
            prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
        }

        return pxNewTimer;
    }
     166:	df 93       	push	r29
     168:	cd b7       	in	r28, 0x3d	; 61
     16a:	de b7       	in	r29, 0x3e	; 62
     16c:	60 97       	sbiw	r28, 0x10	; 16
     16e:	0f b6       	in	r0, 0x3f	; 63
     170:	f8 94       	cli
     172:	de bf       	out	0x3e, r29	; 62
     174:	0f be       	out	0x3f, r0	; 63
     176:	cd bf       	out	0x3d, r28	; 61
     178:	ce 01       	movw	r24, r28
     17a:	01 96       	adiw	r24, 0x01	; 1
     17c:	9a 87       	std	Y+10, r25	; 0x0a
     17e:	89 87       	std	Y+9, r24	; 0x09
     180:	81 2c       	mov	r8, r1
     182:	91 2c       	mov	r9, r1
     184:	a1 2c       	mov	r10, r1
     186:	b1 2c       	mov	r11, r1
     188:	69 84       	ldd	r6, Y+9	; 0x09
     18a:	7a 84       	ldd	r7, Y+10	; 0x0a
     18c:	e0 91 32 17 	lds	r30, 0x1732	; 0x801732 <pxCurrentTimerList>
     190:	f0 91 33 17 	lds	r31, 0x1733	; 0x801733 <pxCurrentTimerList+0x1>
     194:	80 81       	ld	r24, Z
     196:	88 23       	and	r24, r24
     198:	09 f4       	brne	.+2      	; 0x19c <prvTimerTask+0x38>
     19a:	0f c1       	rjmp	.+542    	; 0x3ba <prvTimerTask+0x256>
     19c:	07 80       	ldd	r0, Z+7	; 0x07
     19e:	f0 85       	ldd	r31, Z+8	; 0x08
     1a0:	e0 2d       	mov	r30, r0
     1a2:	20 80       	ld	r2, Z
     1a4:	31 80       	ldd	r3, Z+1	; 0x01
     1a6:	42 80       	ldd	r4, Z+2	; 0x02
     1a8:	53 80       	ldd	r5, Z+3	; 0x03
     1aa:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <vTaskSuspendAll>
     1ae:	ce 01       	movw	r24, r28
     1b0:	01 96       	adiw	r24, 0x01	; 1
     1b2:	0e 94 bf 14 	call	0x297e	; 0x297e <prvSampleTimeNow>
     1b6:	6b 87       	std	Y+11, r22	; 0x0b
     1b8:	7c 87       	std	Y+12, r23	; 0x0c
     1ba:	8d 87       	std	Y+13, r24	; 0x0d
     1bc:	9e 87       	std	Y+14, r25	; 0x0e
     1be:	89 81       	ldd	r24, Y+1	; 0x01
     1c0:	81 11       	cpse	r24, r1
     1c2:	65 c0       	rjmp	.+202    	; 0x28e <prvTimerTask+0x12a>
     1c4:	8b 85       	ldd	r24, Y+11	; 0x0b
     1c6:	9c 85       	ldd	r25, Y+12	; 0x0c
     1c8:	ad 85       	ldd	r26, Y+13	; 0x0d
     1ca:	be 85       	ldd	r27, Y+14	; 0x0e
     1cc:	82 15       	cp	r24, r2
     1ce:	93 05       	cpc	r25, r3
     1d0:	a4 05       	cpc	r26, r4
     1d2:	b5 05       	cpc	r27, r5
     1d4:	08 f4       	brcc	.+2      	; 0x1d8 <prvTimerTask+0x74>
     1d6:	44 c0       	rjmp	.+136    	; 0x260 <prvTimerTask+0xfc>
     1d8:	0e 94 63 0f 	call	0x1ec6	; 0x1ec6 <xTaskResumeAll>
     1dc:	e0 91 32 17 	lds	r30, 0x1732	; 0x801732 <pxCurrentTimerList>
     1e0:	f0 91 33 17 	lds	r31, 0x1733	; 0x801733 <pxCurrentTimerList+0x1>
     1e4:	07 80       	ldd	r0, Z+7	; 0x07
     1e6:	f0 85       	ldd	r31, Z+8	; 0x08
     1e8:	e0 2d       	mov	r30, r0
     1ea:	a0 85       	ldd	r26, Z+8	; 0x08
     1ec:	b1 85       	ldd	r27, Z+9	; 0x09
     1ee:	b8 8b       	std	Y+16, r27	; 0x10
     1f0:	af 87       	std	Y+15, r26	; 0x0f
     1f2:	cd 01       	movw	r24, r26
     1f4:	02 96       	adiw	r24, 0x02	; 2
     1f6:	1d d4       	rcall	.+2106   	; 0xa32 <uxListRemove>
     1f8:	ef 85       	ldd	r30, Y+15	; 0x0f
     1fa:	f8 89       	ldd	r31, Y+16	; 0x10
     1fc:	87 89       	ldd	r24, Z+23	; 0x17
     1fe:	82 ff       	sbrs	r24, 2
     200:	21 c0       	rjmp	.+66     	; 0x244 <prvTimerTask+0xe0>
     202:	46 85       	ldd	r20, Z+14	; 0x0e
     204:	57 85       	ldd	r21, Z+15	; 0x0f
     206:	60 89       	ldd	r22, Z+16	; 0x10
     208:	71 89       	ldd	r23, Z+17	; 0x11
     20a:	42 0d       	add	r20, r2
     20c:	53 1d       	adc	r21, r3
     20e:	64 1d       	adc	r22, r4
     210:	75 1d       	adc	r23, r5
     212:	72 01       	movw	r14, r4
     214:	61 01       	movw	r12, r2
     216:	0b 85       	ldd	r16, Y+11	; 0x0b
     218:	1c 85       	ldd	r17, Y+12	; 0x0c
     21a:	2d 85       	ldd	r18, Y+13	; 0x0d
     21c:	3e 85       	ldd	r19, Y+14	; 0x0e
     21e:	cf 01       	movw	r24, r30
     220:	0e 94 cf 13 	call	0x279e	; 0x279e <prvInsertTimerInActiveList>
     224:	88 23       	and	r24, r24
     226:	99 f0       	breq	.+38     	; 0x24e <prvTimerTask+0xea>
     228:	c8 2c       	mov	r12, r8
     22a:	d9 2c       	mov	r13, r9
     22c:	ea 2c       	mov	r14, r10
     22e:	fb 2c       	mov	r15, r11
     230:	00 e0       	ldi	r16, 0x00	; 0
     232:	10 e0       	ldi	r17, 0x00	; 0
     234:	a2 01       	movw	r20, r4
     236:	91 01       	movw	r18, r2
     238:	60 e0       	ldi	r22, 0x00	; 0
     23a:	8f 85       	ldd	r24, Y+15	; 0x0f
     23c:	98 89       	ldd	r25, Y+16	; 0x10
     23e:	0e 94 61 14 	call	0x28c2	; 0x28c2 <xTimerGenericCommand>
     242:	05 c0       	rjmp	.+10     	; 0x24e <prvTimerTask+0xea>
     244:	8e 7f       	andi	r24, 0xFE	; 254
     246:	af 85       	ldd	r26, Y+15	; 0x0f
     248:	b8 89       	ldd	r27, Y+16	; 0x10
     24a:	57 96       	adiw	r26, 0x17	; 23
     24c:	8c 93       	st	X, r24
     24e:	af 85       	ldd	r26, Y+15	; 0x0f
     250:	b8 89       	ldd	r27, Y+16	; 0x10
     252:	54 96       	adiw	r26, 0x14	; 20
     254:	ed 91       	ld	r30, X+
     256:	fc 91       	ld	r31, X
     258:	55 97       	sbiw	r26, 0x15	; 21
     25a:	cd 01       	movw	r24, r26
     25c:	19 95       	eicall
     25e:	9f c0       	rjmp	.+318    	; 0x39e <prvTimerTask+0x23a>
     260:	20 e0       	ldi	r18, 0x00	; 0
     262:	b2 01       	movw	r22, r4
     264:	a1 01       	movw	r20, r2
     266:	8b 85       	ldd	r24, Y+11	; 0x0b
     268:	9c 85       	ldd	r25, Y+12	; 0x0c
     26a:	ad 85       	ldd	r26, Y+13	; 0x0d
     26c:	be 85       	ldd	r27, Y+14	; 0x0e
     26e:	48 1b       	sub	r20, r24
     270:	59 0b       	sbc	r21, r25
     272:	6a 0b       	sbc	r22, r26
     274:	7b 0b       	sbc	r23, r27
     276:	80 91 2e 17 	lds	r24, 0x172E	; 0x80172e <xTimerQueue>
     27a:	90 91 2f 17 	lds	r25, 0x172F	; 0x80172f <xTimerQueue+0x1>
     27e:	0e 94 83 09 	call	0x1306	; 0x1306 <vQueueWaitForMessageRestricted>
     282:	0e 94 63 0f 	call	0x1ec6	; 0x1ec6 <xTaskResumeAll>
     286:	81 11       	cpse	r24, r1
     288:	8a c0       	rjmp	.+276    	; 0x39e <prvTimerTask+0x23a>
     28a:	a8 d4       	rcall	.+2384   	; 0xbdc <vPortYield>
     28c:	88 c0       	rjmp	.+272    	; 0x39e <prvTimerTask+0x23a>
     28e:	0e 94 63 0f 	call	0x1ec6	; 0x1ec6 <xTaskResumeAll>
     292:	85 c0       	rjmp	.+266    	; 0x39e <prvTimerTask+0x23a>
     294:	89 81       	ldd	r24, Y+1	; 0x01
     296:	88 23       	and	r24, r24
     298:	0c f4       	brge	.+2      	; 0x29c <prvTimerTask+0x138>
     29a:	81 c0       	rjmp	.+258    	; 0x39e <prvTimerTask+0x23a>
     29c:	4e 80       	ldd	r4, Y+6	; 0x06
     29e:	5f 80       	ldd	r5, Y+7	; 0x07
     2a0:	d2 01       	movw	r26, r4
     2a2:	1c 96       	adiw	r26, 0x0c	; 12
     2a4:	8d 91       	ld	r24, X+
     2a6:	9c 91       	ld	r25, X
     2a8:	1d 97       	sbiw	r26, 0x0d	; 13
     2aa:	89 2b       	or	r24, r25
     2ac:	19 f0       	breq	.+6      	; 0x2b4 <prvTimerTask+0x150>
     2ae:	c2 01       	movw	r24, r4
     2b0:	02 96       	adiw	r24, 0x02	; 2
     2b2:	bf d3       	rcall	.+1918   	; 0xa32 <uxListRemove>
     2b4:	ce 01       	movw	r24, r28
     2b6:	08 96       	adiw	r24, 0x08	; 8
     2b8:	0e 94 bf 14 	call	0x297e	; 0x297e <prvSampleTimeNow>
     2bc:	8b 01       	movw	r16, r22
     2be:	9c 01       	movw	r18, r24
     2c0:	e9 81       	ldd	r30, Y+1	; 0x01
     2c2:	0e 2e       	mov	r0, r30
     2c4:	00 0c       	add	r0, r0
     2c6:	ff 0b       	sbc	r31, r31
     2c8:	ea 30       	cpi	r30, 0x0A	; 10
     2ca:	f1 05       	cpc	r31, r1
     2cc:	08 f0       	brcs	.+2      	; 0x2d0 <prvTimerTask+0x16c>
     2ce:	67 c0       	rjmp	.+206    	; 0x39e <prvTimerTask+0x23a>
     2d0:	88 27       	eor	r24, r24
     2d2:	ee 58       	subi	r30, 0x8E	; 142
     2d4:	ff 4f       	sbci	r31, 0xFF	; 255
     2d6:	8f 4f       	sbci	r24, 0xFF	; 255
     2d8:	0c 94 71 22 	jmp	0x44e2	; 0x44e2 <__tablejump2__>
     2dc:	f2 01       	movw	r30, r4
     2de:	87 89       	ldd	r24, Z+23	; 0x17
     2e0:	81 60       	ori	r24, 0x01	; 1
     2e2:	87 8b       	std	Z+23, r24	; 0x17
     2e4:	ca 80       	ldd	r12, Y+2	; 0x02
     2e6:	db 80       	ldd	r13, Y+3	; 0x03
     2e8:	ec 80       	ldd	r14, Y+4	; 0x04
     2ea:	fd 80       	ldd	r15, Y+5	; 0x05
     2ec:	46 85       	ldd	r20, Z+14	; 0x0e
     2ee:	57 85       	ldd	r21, Z+15	; 0x0f
     2f0:	60 89       	ldd	r22, Z+16	; 0x10
     2f2:	71 89       	ldd	r23, Z+17	; 0x11
     2f4:	4c 0d       	add	r20, r12
     2f6:	5d 1d       	adc	r21, r13
     2f8:	6e 1d       	adc	r22, r14
     2fa:	7f 1d       	adc	r23, r15
     2fc:	c2 01       	movw	r24, r4
     2fe:	0e 94 cf 13 	call	0x279e	; 0x279e <prvInsertTimerInActiveList>
     302:	88 23       	and	r24, r24
     304:	09 f4       	brne	.+2      	; 0x308 <prvTimerTask+0x1a4>
     306:	4b c0       	rjmp	.+150    	; 0x39e <prvTimerTask+0x23a>
     308:	d2 01       	movw	r26, r4
     30a:	54 96       	adiw	r26, 0x14	; 20
     30c:	ed 91       	ld	r30, X+
     30e:	fc 91       	ld	r31, X
     310:	55 97       	sbiw	r26, 0x15	; 21
     312:	c2 01       	movw	r24, r4
     314:	19 95       	eicall
     316:	f2 01       	movw	r30, r4
     318:	87 89       	ldd	r24, Z+23	; 0x17
     31a:	82 ff       	sbrs	r24, 2
     31c:	40 c0       	rjmp	.+128    	; 0x39e <prvTimerTask+0x23a>
     31e:	4a 81       	ldd	r20, Y+2	; 0x02
     320:	5b 81       	ldd	r21, Y+3	; 0x03
     322:	6c 81       	ldd	r22, Y+4	; 0x04
     324:	7d 81       	ldd	r23, Y+5	; 0x05
     326:	86 85       	ldd	r24, Z+14	; 0x0e
     328:	97 85       	ldd	r25, Z+15	; 0x0f
     32a:	a0 89       	ldd	r26, Z+16	; 0x10
     32c:	b1 89       	ldd	r27, Z+17	; 0x11
     32e:	9a 01       	movw	r18, r20
     330:	ab 01       	movw	r20, r22
     332:	28 0f       	add	r18, r24
     334:	39 1f       	adc	r19, r25
     336:	4a 1f       	adc	r20, r26
     338:	5b 1f       	adc	r21, r27
     33a:	c8 2c       	mov	r12, r8
     33c:	d9 2c       	mov	r13, r9
     33e:	ea 2c       	mov	r14, r10
     340:	fb 2c       	mov	r15, r11
     342:	00 e0       	ldi	r16, 0x00	; 0
     344:	10 e0       	ldi	r17, 0x00	; 0
     346:	60 e0       	ldi	r22, 0x00	; 0
     348:	c2 01       	movw	r24, r4
     34a:	0e 94 61 14 	call	0x28c2	; 0x28c2 <xTimerGenericCommand>
     34e:	27 c0       	rjmp	.+78     	; 0x39e <prvTimerTask+0x23a>
     350:	d2 01       	movw	r26, r4
     352:	57 96       	adiw	r26, 0x17	; 23
     354:	8c 91       	ld	r24, X
     356:	57 97       	sbiw	r26, 0x17	; 23
     358:	8e 7f       	andi	r24, 0xFE	; 254
     35a:	57 96       	adiw	r26, 0x17	; 23
     35c:	8c 93       	st	X, r24
     35e:	1f c0       	rjmp	.+62     	; 0x39e <prvTimerTask+0x23a>
     360:	f2 01       	movw	r30, r4
     362:	87 89       	ldd	r24, Z+23	; 0x17
     364:	81 60       	ori	r24, 0x01	; 1
     366:	87 8b       	std	Z+23, r24	; 0x17
     368:	4a 81       	ldd	r20, Y+2	; 0x02
     36a:	5b 81       	ldd	r21, Y+3	; 0x03
     36c:	6c 81       	ldd	r22, Y+4	; 0x04
     36e:	7d 81       	ldd	r23, Y+5	; 0x05
     370:	46 87       	std	Z+14, r20	; 0x0e
     372:	57 87       	std	Z+15, r21	; 0x0f
     374:	60 8b       	std	Z+16, r22	; 0x10
     376:	71 8b       	std	Z+17, r23	; 0x11
     378:	40 0f       	add	r20, r16
     37a:	51 1f       	adc	r21, r17
     37c:	62 1f       	adc	r22, r18
     37e:	73 1f       	adc	r23, r19
     380:	68 01       	movw	r12, r16
     382:	79 01       	movw	r14, r18
     384:	c2 01       	movw	r24, r4
     386:	0e 94 cf 13 	call	0x279e	; 0x279e <prvInsertTimerInActiveList>
     38a:	09 c0       	rjmp	.+18     	; 0x39e <prvTimerTask+0x23a>
     38c:	f2 01       	movw	r30, r4
     38e:	87 89       	ldd	r24, Z+23	; 0x17
     390:	81 fd       	sbrc	r24, 1
     392:	03 c0       	rjmp	.+6      	; 0x39a <prvTimerTask+0x236>
     394:	c2 01       	movw	r24, r4
     396:	a9 d2       	rcall	.+1362   	; 0x8ea <vPortFree>
     398:	02 c0       	rjmp	.+4      	; 0x39e <prvTimerTask+0x23a>
     39a:	8e 7f       	andi	r24, 0xFE	; 254
     39c:	87 8b       	std	Z+23, r24	; 0x17
     39e:	28 2d       	mov	r18, r8
     3a0:	39 2d       	mov	r19, r9
     3a2:	4a 2d       	mov	r20, r10
     3a4:	5b 2d       	mov	r21, r11
     3a6:	66 2d       	mov	r22, r6
     3a8:	77 2d       	mov	r23, r7
     3aa:	80 91 2e 17 	lds	r24, 0x172E	; 0x80172e <xTimerQueue>
     3ae:	90 91 2f 17 	lds	r25, 0x172F	; 0x80172f <xTimerQueue+0x1>
     3b2:	12 d7       	rcall	.+3620   	; 0x11d8 <xQueueReceive>
     3b4:	81 11       	cpse	r24, r1
     3b6:	6e cf       	rjmp	.-292    	; 0x294 <prvTimerTask+0x130>
     3b8:	e9 ce       	rjmp	.-558    	; 0x18c <prvTimerTask+0x28>
     3ba:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <vTaskSuspendAll>
     3be:	ce 01       	movw	r24, r28
     3c0:	01 96       	adiw	r24, 0x01	; 1
     3c2:	0e 94 bf 14 	call	0x297e	; 0x297e <prvSampleTimeNow>
     3c6:	6b 87       	std	Y+11, r22	; 0x0b
     3c8:	7c 87       	std	Y+12, r23	; 0x0c
     3ca:	8d 87       	std	Y+13, r24	; 0x0d
     3cc:	9e 87       	std	Y+14, r25	; 0x0e
     3ce:	89 81       	ldd	r24, Y+1	; 0x01
     3d0:	81 11       	cpse	r24, r1
     3d2:	5d cf       	rjmp	.-326    	; 0x28e <prvTimerTask+0x12a>
     3d4:	e0 91 30 17 	lds	r30, 0x1730	; 0x801730 <pxOverflowTimerList>
     3d8:	f0 91 31 17 	lds	r31, 0x1731	; 0x801731 <pxOverflowTimerList+0x1>
     3dc:	80 81       	ld	r24, Z
     3de:	21 e0       	ldi	r18, 0x01	; 1
     3e0:	81 11       	cpse	r24, r1
     3e2:	20 e0       	ldi	r18, 0x00	; 0
     3e4:	28 2c       	mov	r2, r8
     3e6:	39 2c       	mov	r3, r9
     3e8:	4a 2c       	mov	r4, r10
     3ea:	5b 2c       	mov	r5, r11
     3ec:	3a cf       	rjmp	.-396    	; 0x262 <prvTimerTask+0xfe>

000003ee <__ctors_end>:
     3ee:	11 24       	eor	r1, r1
     3f0:	1f be       	out	0x3f, r1	; 63
     3f2:	cf ef       	ldi	r28, 0xFF	; 255
     3f4:	d1 e2       	ldi	r29, 0x21	; 33
     3f6:	de bf       	out	0x3e, r29	; 62
     3f8:	cd bf       	out	0x3d, r28	; 61
     3fa:	00 e0       	ldi	r16, 0x00	; 0
     3fc:	0c bf       	out	0x3c, r16	; 60

000003fe <__do_copy_data>:
     3fe:	16 e0       	ldi	r17, 0x06	; 6
     400:	a0 e0       	ldi	r26, 0x00	; 0
     402:	b2 e0       	ldi	r27, 0x02	; 2
     404:	ee e6       	ldi	r30, 0x6E	; 110
     406:	fe e4       	ldi	r31, 0x4E	; 78
     408:	00 e0       	ldi	r16, 0x00	; 0
     40a:	0b bf       	out	0x3b, r16	; 59
     40c:	02 c0       	rjmp	.+4      	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
     40e:	07 90       	elpm	r0, Z+
     410:	0d 92       	st	X+, r0
     412:	a6 38       	cpi	r26, 0x86	; 134
     414:	b1 07       	cpc	r27, r17
     416:	d9 f7       	brne	.-10     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>

00000418 <__do_clear_bss>:
     418:	28 e1       	ldi	r18, 0x18	; 24
     41a:	a6 e8       	ldi	r26, 0x86	; 134
     41c:	b6 e0       	ldi	r27, 0x06	; 6
     41e:	01 c0       	rjmp	.+2      	; 0x422 <.do_clear_bss_start>

00000420 <.do_clear_bss_loop>:
     420:	1d 92       	st	X+, r1

00000422 <.do_clear_bss_start>:
     422:	ab 3a       	cpi	r26, 0xAB	; 171
     424:	b2 07       	cpc	r27, r18
     426:	e1 f7       	brne	.-8      	; 0x420 <.do_clear_bss_loop>
     428:	0e 94 f8 15 	call	0x2bf0	; 0x2bf0 <main>
     42c:	0c 94 35 27 	jmp	0x4e6a	; 0x4e6a <_exit>

00000430 <__bad_interrupt>:
     430:	e7 cd       	rjmp	.-1074   	; 0x0 <__vectors>

00000432 <lora_handler_task>:
	}
}

/*-----------------------------------------------------------*/
void lora_handler_task( void *pvParameters )
{
     432:	cf 93       	push	r28
     434:	df 93       	push	r29
     436:	00 d0       	rcall	.+0      	; 0x438 <lora_handler_task+0x6>
     438:	1f 92       	push	r1
     43a:	cd b7       	in	r28, 0x3d	; 61
     43c:	de b7       	in	r29, 0x3e	; 62
	// Hardware reset of LoRaWAN transceiver
	lora_driver_resetRn2483(1);
     43e:	81 e0       	ldi	r24, 0x01	; 1
     440:	0e 94 92 17 	call	0x2f24	; 0x2f24 <lora_driver_resetRn2483>
	vTaskDelay(2);
     444:	62 e0       	ldi	r22, 0x02	; 2
     446:	70 e0       	ldi	r23, 0x00	; 0
     448:	80 e0       	ldi	r24, 0x00	; 0
     44a:	90 e0       	ldi	r25, 0x00	; 0
     44c:	0e 94 3d 10 	call	0x207a	; 0x207a <vTaskDelay>
	lora_driver_resetRn2483(0);
     450:	80 e0       	ldi	r24, 0x00	; 0
     452:	0e 94 92 17 	call	0x2f24	; 0x2f24 <lora_driver_resetRn2483>
	// Give it a chance to wakeup
	vTaskDelay(150);
     456:	66 e9       	ldi	r22, 0x96	; 150
     458:	70 e0       	ldi	r23, 0x00	; 0
     45a:	80 e0       	ldi	r24, 0x00	; 0
     45c:	90 e0       	ldi	r25, 0x00	; 0
     45e:	0e 94 3d 10 	call	0x207a	; 0x207a <vTaskDelay>

	lora_driver_flushBuffers(); // get rid of first version string from module after reset!
     462:	0e 94 48 17 	call	0x2e90	; 0x2e90 <lora_driver_flushBuffers>
}

static void _lora_setup(void)
{
	lora_driver_returnCode_t rc;
	status_leds_slowBlink(led_ST2); // OPTIONAL: Led the green led blink slowly while we are setting up LoRa
     466:	81 e0       	ldi	r24, 0x01	; 1
     468:	0e 94 e3 1f 	call	0x3fc6	; 0x3fc6 <status_leds_slowBlink>

	// Factory reset the transceiver
	printf("FactoryReset >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_rn2483FactoryReset()));
     46c:	0e 94 a6 17 	call	0x2f4c	; 0x2f4c <lora_driver_rn2483FactoryReset>
     470:	0e 94 23 1a 	call	0x3446	; 0x3446 <lora_driver_mapReturnCodeToText>
     474:	9f 93       	push	r25
     476:	8f 93       	push	r24
     478:	8c e3       	ldi	r24, 0x3C	; 60
     47a:	92 e0       	ldi	r25, 0x02	; 2
     47c:	9f 93       	push	r25
     47e:	8f 93       	push	r24
     480:	0e 94 17 24 	call	0x482e	; 0x482e <printf>
	
	// Configure to EU868 LoRaWAN standards
	printf("Configure to EU868 >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_configureToEu868()));
     484:	0e 94 24 19 	call	0x3248	; 0x3248 <lora_driver_configureToEu868>
     488:	0e 94 23 1a 	call	0x3446	; 0x3446 <lora_driver_mapReturnCodeToText>
     48c:	9f 93       	push	r25
     48e:	8f 93       	push	r24
     490:	8f e4       	ldi	r24, 0x4F	; 79
     492:	92 e0       	ldi	r25, 0x02	; 2
     494:	9f 93       	push	r25
     496:	8f 93       	push	r24
     498:	0e 94 17 24 	call	0x482e	; 0x482e <printf>

	// Get the transceivers HW EUI
	rc = lora_driver_getRn2483Hweui(_out_buf);
     49c:	8c e9       	ldi	r24, 0x9C	; 156
     49e:	96 e0       	ldi	r25, 0x06	; 6
     4a0:	0e 94 b8 17 	call	0x2f70	; 0x2f70 <lora_driver_getRn2483Hweui>
	printf("Get HWEUI >%s<: %s\n",lora_driver_mapReturnCodeToText(rc), _out_buf);
     4a4:	0e 94 23 1a 	call	0x3446	; 0x3446 <lora_driver_mapReturnCodeToText>
     4a8:	0c e9       	ldi	r16, 0x9C	; 156
     4aa:	16 e0       	ldi	r17, 0x06	; 6
     4ac:	1f 93       	push	r17
     4ae:	0f 93       	push	r16
     4b0:	9f 93       	push	r25
     4b2:	8f 93       	push	r24
     4b4:	88 e6       	ldi	r24, 0x68	; 104
     4b6:	92 e0       	ldi	r25, 0x02	; 2
     4b8:	9f 93       	push	r25
     4ba:	8f 93       	push	r24
     4bc:	0e 94 17 24 	call	0x482e	; 0x482e <printf>

	// Set the HWEUI as DevEUI in the LoRaWAN software stack in the transceiver
	printf("Set DevEUI: %s >%s<\n", _out_buf, lora_driver_mapReturnCodeToText(lora_driver_setDeviceIdentifier(_out_buf)));
     4c0:	c8 01       	movw	r24, r16
     4c2:	0e 94 d4 17 	call	0x2fa8	; 0x2fa8 <lora_driver_setDeviceIdentifier>
     4c6:	0e 94 23 1a 	call	0x3446	; 0x3446 <lora_driver_mapReturnCodeToText>
     4ca:	9f 93       	push	r25
     4cc:	8f 93       	push	r24
     4ce:	1f 93       	push	r17
     4d0:	0f 93       	push	r16
     4d2:	8c e7       	ldi	r24, 0x7C	; 124
     4d4:	92 e0       	ldi	r25, 0x02	; 2
     4d6:	9f 93       	push	r25
     4d8:	8f 93       	push	r24
     4da:	0e 94 17 24 	call	0x482e	; 0x482e <printf>

	// Set Over The Air Activation parameters to be ready to join the LoRaWAN
	printf("Set OTAA Identity appEUI:%s appKEY:%s devEUI:%s >%s<\n", LORA_appEUI, LORA_appKEY, _out_buf, lora_driver_mapReturnCodeToText(lora_driver_setOtaaIdentity(LORA_appEUI,LORA_appKEY,_out_buf)));
     4de:	a8 01       	movw	r20, r16
     4e0:	61 e9       	ldi	r22, 0x91	; 145
     4e2:	72 e0       	ldi	r23, 0x02	; 2
     4e4:	84 eb       	ldi	r24, 0xB4	; 180
     4e6:	92 e0       	ldi	r25, 0x02	; 2
     4e8:	0e 94 02 1a 	call	0x3404	; 0x3404 <lora_driver_setOtaaIdentity>
     4ec:	0e 94 23 1a 	call	0x3446	; 0x3446 <lora_driver_mapReturnCodeToText>
     4f0:	9f 93       	push	r25
     4f2:	8f 93       	push	r24
     4f4:	1f 93       	push	r17
     4f6:	0f 93       	push	r16
     4f8:	81 e9       	ldi	r24, 0x91	; 145
     4fa:	92 e0       	ldi	r25, 0x02	; 2
     4fc:	9f 93       	push	r25
     4fe:	8f 93       	push	r24
     500:	84 eb       	ldi	r24, 0xB4	; 180
     502:	92 e0       	ldi	r25, 0x02	; 2
     504:	9f 93       	push	r25
     506:	8f 93       	push	r24
     508:	84 ec       	ldi	r24, 0xC4	; 196
     50a:	92 e0       	ldi	r25, 0x02	; 2
     50c:	9f 93       	push	r25
     50e:	8f 93       	push	r24
     510:	0e 94 17 24 	call	0x482e	; 0x482e <printf>

	// Save all the MAC settings in the transceiver
	printf("Save mac >%s<\n",lora_driver_mapReturnCodeToText(lora_driver_saveMac()));
     514:	0e 94 07 18 	call	0x300e	; 0x300e <lora_driver_saveMac>
     518:	0e 94 23 1a 	call	0x3446	; 0x3446 <lora_driver_mapReturnCodeToText>
     51c:	9f 93       	push	r25
     51e:	8f 93       	push	r24
     520:	8a ef       	ldi	r24, 0xFA	; 250
     522:	92 e0       	ldi	r25, 0x02	; 2
     524:	9f 93       	push	r25
     526:	8f 93       	push	r24
     528:	0e 94 17 24 	call	0x482e	; 0x482e <printf>

	// Enable Adaptive Data Rate
	printf("Set Adaptive Data Rate: ON >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_setAdaptiveDataRate(LORA_ON)));
     52c:	0f b6       	in	r0, 0x3f	; 63
     52e:	f8 94       	cli
     530:	de bf       	out	0x3e, r29	; 62
     532:	0f be       	out	0x3f, r0	; 63
     534:	cd bf       	out	0x3d, r28	; 61
     536:	81 e0       	ldi	r24, 0x01	; 1
     538:	0e 94 01 19 	call	0x3202	; 0x3202 <lora_driver_setAdaptiveDataRate>
     53c:	0e 94 23 1a 	call	0x3446	; 0x3446 <lora_driver_mapReturnCodeToText>
     540:	9f 93       	push	r25
     542:	8f 93       	push	r24
     544:	89 e0       	ldi	r24, 0x09	; 9
     546:	93 e0       	ldi	r25, 0x03	; 3
     548:	9f 93       	push	r25
     54a:	8f 93       	push	r24
     54c:	0e 94 17 24 	call	0x482e	; 0x482e <printf>

	// Set receiver window1 delay to 500 ms - this is needed if down-link messages will be used
	printf("Set Receiver Delay: %d ms >%s<\n", 500, lora_driver_mapReturnCodeToText(lora_driver_setReceiveDelay(500)));
     550:	84 ef       	ldi	r24, 0xF4	; 244
     552:	91 e0       	ldi	r25, 0x01	; 1
     554:	0e 94 0c 19 	call	0x3218	; 0x3218 <lora_driver_setReceiveDelay>
     558:	0e 94 23 1a 	call	0x3446	; 0x3446 <lora_driver_mapReturnCodeToText>
     55c:	9f 93       	push	r25
     55e:	8f 93       	push	r24
     560:	81 e0       	ldi	r24, 0x01	; 1
     562:	8f 93       	push	r24
     564:	84 ef       	ldi	r24, 0xF4	; 244
     566:	8f 93       	push	r24
     568:	8a e2       	ldi	r24, 0x2A	; 42
     56a:	93 e0       	ldi	r25, 0x03	; 3
     56c:	9f 93       	push	r25
     56e:	8f 93       	push	r24
     570:	0e 94 17 24 	call	0x482e	; 0x482e <printf>
     574:	0f b6       	in	r0, 0x3f	; 63
     576:	f8 94       	cli
     578:	de bf       	out	0x3e, r29	; 62
     57a:	0f be       	out	0x3f, r0	; 63
     57c:	cd bf       	out	0x3d, r28	; 61
     57e:	0a e0       	ldi	r16, 0x0A	; 10
     580:	10 e0       	ldi	r17, 0x00	; 0
	// Join the LoRaWAN
	uint8_t maxJoinTriesLeft = 10;
	
	do {
		rc = lora_driver_join(LORA_OTAA);
		printf("Join Network TriesLeft:%d >%s<\n", maxJoinTriesLeft, lora_driver_mapReturnCodeToText(rc));
     582:	0f 2e       	mov	r0, r31
     584:	fa e4       	ldi	r31, 0x4A	; 74
     586:	ef 2e       	mov	r14, r31
     588:	f3 e0       	ldi	r31, 0x03	; 3
     58a:	ff 2e       	mov	r15, r31
     58c:	f0 2d       	mov	r31, r0

	// Join the LoRaWAN
	uint8_t maxJoinTriesLeft = 10;
	
	do {
		rc = lora_driver_join(LORA_OTAA);
     58e:	80 e0       	ldi	r24, 0x00	; 0
     590:	0e 94 0d 18 	call	0x301a	; 0x301a <lora_driver_join>
     594:	d8 2e       	mov	r13, r24
		printf("Join Network TriesLeft:%d >%s<\n", maxJoinTriesLeft, lora_driver_mapReturnCodeToText(rc));
     596:	0e 94 23 1a 	call	0x3446	; 0x3446 <lora_driver_mapReturnCodeToText>
     59a:	9f 93       	push	r25
     59c:	8f 93       	push	r24
     59e:	1f 93       	push	r17
     5a0:	0f 93       	push	r16
     5a2:	ff 92       	push	r15
     5a4:	ef 92       	push	r14
     5a6:	0e 94 17 24 	call	0x482e	; 0x482e <printf>

		if ( rc != LORA_ACCEPTED)
     5aa:	0f 90       	pop	r0
     5ac:	0f 90       	pop	r0
     5ae:	0f 90       	pop	r0
     5b0:	0f 90       	pop	r0
     5b2:	0f 90       	pop	r0
     5b4:	0f 90       	pop	r0
     5b6:	f8 e0       	ldi	r31, 0x08	; 8
     5b8:	df 16       	cp	r13, r31
     5ba:	c9 f1       	breq	.+114    	; 0x62e <lora_handler_task+0x1fc>
		{
			// Make the red led pulse to tell something went wrong
			status_leds_longPuls(led_ST1); // OPTIONAL
     5bc:	80 e0       	ldi	r24, 0x00	; 0
     5be:	0e 94 47 20 	call	0x408e	; 0x408e <status_leds_longPuls>
			// Wait 5 sec and lets try again
			vTaskDelay(pdMS_TO_TICKS(5000UL));
     5c2:	66 e3       	ldi	r22, 0x36	; 54
     5c4:	71 e0       	ldi	r23, 0x01	; 1
     5c6:	80 e0       	ldi	r24, 0x00	; 0
     5c8:	90 e0       	ldi	r25, 0x00	; 0
     5ca:	0e 94 3d 10 	call	0x207a	; 0x207a <vTaskDelay>
     5ce:	01 50       	subi	r16, 0x01	; 1
     5d0:	11 09       	sbc	r17, r1
		}
		else
		{
			break;
		}
	} while (--maxJoinTriesLeft);
     5d2:	e9 f6       	brne	.-70     	; 0x58e <lora_handler_task+0x15c>
     5d4:	25 c0       	rjmp	.+74     	; 0x620 <lora_handler_task+0x1ee>
		status_leds_fastBlink(led_ST1); // OPTIONAL

		// Lets stay here
		while (1)
		{
			taskYIELD();
     5d6:	02 d3       	rcall	.+1540   	; 0xbdc <vPortYield>
     5d8:	fe cf       	rjmp	.-4      	; 0x5d6 <lora_handler_task+0x1a4>
	 const TickType_t xFrequency = pdMS_TO_TICKS(300000UL); // Upload message every 5 minutes (300000 ms)
	 xLastWakeTime = xTaskGetTickCount();
	 
	for(;;)
	{
		vTaskDelayUntil( &xLastWakeTime, xFrequency );
     5da:	48 ea       	ldi	r20, 0xA8	; 168
     5dc:	58 e4       	ldi	r21, 0x48	; 72
     5de:	60 e0       	ldi	r22, 0x00	; 0
     5e0:	70 e0       	ldi	r23, 0x00	; 0
     5e2:	ce 01       	movw	r24, r28
     5e4:	01 96       	adiw	r24, 0x01	; 1
     5e6:	0e 94 df 0f 	call	0x1fbe	; 0x1fbe <vTaskDelayUntil>
		// Some dummy payload
		uint16_t hum = 12345; // Dummy humidity
		int16_t temp = 675; // Dummy temp
		uint16_t co2_ppm = 1050; // Dummy CO2

		_uplink_payload.bytes[0] = hum >> 8;
     5ea:	f8 01       	movw	r30, r16
     5ec:	82 82       	std	Z+2, r8	; 0x02
		_uplink_payload.bytes[1] = hum & 0xFF;
     5ee:	93 82       	std	Z+3, r9	; 0x03
		_uplink_payload.bytes[2] = temp >> 8;
     5f0:	a4 82       	std	Z+4, r10	; 0x04
		_uplink_payload.bytes[3] = temp & 0xFF;
     5f2:	b5 82       	std	Z+5, r11	; 0x05
		_uplink_payload.bytes[4] = co2_ppm >> 8;
     5f4:	c6 82       	std	Z+6, r12	; 0x06
		_uplink_payload.bytes[5] = co2_ppm & 0xFF;
     5f6:	d7 82       	std	Z+7, r13	; 0x07

		status_leds_shortPuls(led_ST4);  // OPTIONAL
     5f8:	83 e0       	ldi	r24, 0x03	; 3
     5fa:	0e 94 59 20 	call	0x40b2	; 0x40b2 <status_leds_shortPuls>
		printf("Upload Message >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_sendUploadMessage(false, &_uplink_payload)));
     5fe:	b8 01       	movw	r22, r16
     600:	80 e0       	ldi	r24, 0x00	; 0
     602:	0e 94 36 18 	call	0x306c	; 0x306c <lora_driver_sendUploadMessage>
     606:	0e 94 23 1a 	call	0x3446	; 0x3446 <lora_driver_mapReturnCodeToText>
     60a:	9f 93       	push	r25
     60c:	8f 93       	push	r24
     60e:	ff 92       	push	r15
     610:	ef 92       	push	r14
     612:	0e 94 17 24 	call	0x482e	; 0x482e <printf>
     616:	0f 90       	pop	r0
     618:	0f 90       	pop	r0
     61a:	0f 90       	pop	r0
     61c:	0f 90       	pop	r0
     61e:	dd cf       	rjmp	.-70     	; 0x5da <lora_handler_task+0x1a8>
	}
	else
	{
		// Something went wrong
		// Turn off the green led
		status_leds_ledOff(led_ST2); // OPTIONAL
     620:	81 e0       	ldi	r24, 0x01	; 1
     622:	0e 94 38 20 	call	0x4070	; 0x4070 <status_leds_ledOff>
		// Make the red led blink fast to tell something went wrong
		status_leds_fastBlink(led_ST1); // OPTIONAL
     626:	80 e0       	ldi	r24, 0x00	; 0
     628:	0e 94 06 20 	call	0x400c	; 0x400c <status_leds_fastBlink>
     62c:	d4 cf       	rjmp	.-88     	; 0x5d6 <lora_handler_task+0x1a4>

	if (rc == LORA_ACCEPTED)
	{
		// Connected to LoRaWAN :-)
		// Make the green led steady
		status_leds_ledOn(led_ST2); // OPTIONAL
     62e:	81 e0       	ldi	r24, 0x01	; 1
     630:	0e 94 29 20 	call	0x4052	; 0x4052 <status_leds_ledOn>

	lora_driver_flushBuffers(); // get rid of first version string from module after reset!

	_lora_setup();

	_uplink_payload.len = 6;
     634:	e6 e8       	ldi	r30, 0x86	; 134
     636:	f6 e0       	ldi	r31, 0x06	; 6
     638:	86 e0       	ldi	r24, 0x06	; 6
     63a:	81 83       	std	Z+1, r24	; 0x01
	_uplink_payload.port_no = 2;
     63c:	82 e0       	ldi	r24, 0x02	; 2
     63e:	80 83       	st	Z, r24

	 TickType_t xLastWakeTime;
	 const TickType_t xFrequency = pdMS_TO_TICKS(300000UL); // Upload message every 5 minutes (300000 ms)
	 xLastWakeTime = xTaskGetTickCount();
     640:	0e 94 80 0e 	call	0x1d00	; 0x1d00 <xTaskGetTickCount>
     644:	69 83       	std	Y+1, r22	; 0x01
     646:	7a 83       	std	Y+2, r23	; 0x02
     648:	8b 83       	std	Y+3, r24	; 0x03
     64a:	9c 83       	std	Y+4, r25	; 0x04
		// Some dummy payload
		uint16_t hum = 12345; // Dummy humidity
		int16_t temp = 675; // Dummy temp
		uint16_t co2_ppm = 1050; // Dummy CO2

		_uplink_payload.bytes[0] = hum >> 8;
     64c:	06 e8       	ldi	r16, 0x86	; 134
     64e:	16 e0       	ldi	r17, 0x06	; 6
     650:	0f 2e       	mov	r0, r31
     652:	f0 e3       	ldi	r31, 0x30	; 48
     654:	8f 2e       	mov	r8, r31
     656:	f0 2d       	mov	r31, r0
		_uplink_payload.bytes[1] = hum & 0xFF;
     658:	0f 2e       	mov	r0, r31
     65a:	f9 e3       	ldi	r31, 0x39	; 57
     65c:	9f 2e       	mov	r9, r31
     65e:	f0 2d       	mov	r31, r0
		_uplink_payload.bytes[2] = temp >> 8;
     660:	68 94       	set
     662:	aa 24       	eor	r10, r10
     664:	a1 f8       	bld	r10, 1
		_uplink_payload.bytes[3] = temp & 0xFF;
     666:	0f 2e       	mov	r0, r31
     668:	f3 ea       	ldi	r31, 0xA3	; 163
     66a:	bf 2e       	mov	r11, r31
     66c:	f0 2d       	mov	r31, r0
		_uplink_payload.bytes[4] = co2_ppm >> 8;
     66e:	68 94       	set
     670:	cc 24       	eor	r12, r12
     672:	c2 f8       	bld	r12, 2
		_uplink_payload.bytes[5] = co2_ppm & 0xFF;
     674:	0f 2e       	mov	r0, r31
     676:	fa e1       	ldi	r31, 0x1A	; 26
     678:	df 2e       	mov	r13, r31
     67a:	f0 2d       	mov	r31, r0

		status_leds_shortPuls(led_ST4);  // OPTIONAL
		printf("Upload Message >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_sendUploadMessage(false, &_uplink_payload)));
     67c:	0f 2e       	mov	r0, r31
     67e:	fa e6       	ldi	r31, 0x6A	; 106
     680:	ef 2e       	mov	r14, r31
     682:	f3 e0       	ldi	r31, 0x03	; 3
     684:	ff 2e       	mov	r15, r31
     686:	f0 2d       	mov	r31, r0
     688:	a8 cf       	rjmp	.-176    	; 0x5da <lora_handler_task+0x1a8>

0000068a <lora_handler_create>:
void lora_handler_task( void *pvParameters );

static lora_driver_payload_t _uplink_payload;

void lora_handler_create(UBaseType_t lora_handler_task_priority)
{
     68a:	ef 92       	push	r14
     68c:	ff 92       	push	r15
     68e:	0f 93       	push	r16
	xTaskCreate(
     690:	e1 2c       	mov	r14, r1
     692:	f1 2c       	mov	r15, r1
     694:	08 2f       	mov	r16, r24
     696:	20 e0       	ldi	r18, 0x00	; 0
     698:	30 e0       	ldi	r19, 0x00	; 0
     69a:	48 e8       	ldi	r20, 0x88	; 136
     69c:	51 e0       	ldi	r21, 0x01	; 1
     69e:	6f e7       	ldi	r22, 0x7F	; 127
     6a0:	73 e0       	ldi	r23, 0x03	; 3
     6a2:	89 e1       	ldi	r24, 0x19	; 25
     6a4:	92 e0       	ldi	r25, 0x02	; 2
     6a6:	0e 94 1f 0d 	call	0x1a3e	; 0x1a3e <xTaskCreate>
	,  (const portCHAR *)"LRHand"  // A name just for humans
	,  configMINIMAL_STACK_SIZE+200  // This stack size can be checked & adjusted by reading the Stack Highwater
	,  NULL
	,  lora_handler_task_priority  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
}
     6aa:	0f 91       	pop	r16
     6ac:	ff 90       	pop	r15
     6ae:	ef 90       	pop	r14
     6b0:	08 95       	ret

000006b2 <trace_init>:
	 #if (configUSE_TRACE_FACILITY == 1)
	 #ifdef HAL_DEFS_H_

	 #else
		// Used on VIA MEGA Shield rev. 2.0.0
		DDRK |= _BV(DDK0) | _BV(DDK1) | _BV(DDK2) | _BV(DDK3);
     6b2:	e7 e0       	ldi	r30, 0x07	; 7
     6b4:	f1 e0       	ldi	r31, 0x01	; 1
     6b6:	80 81       	ld	r24, Z
     6b8:	8f 60       	ori	r24, 0x0F	; 15
     6ba:	80 83       	st	Z, r24
     6bc:	08 95       	ret

000006be <task_switch_in>:
	void task_switch_in(uint8_t task_no) {
		 #ifdef HAL_DEFS_H_

		 #else
		 // Used on VIA MEGA Shield rev. 2.0.0
		 PORTK &= 0b11110000;
     6be:	e8 e0       	ldi	r30, 0x08	; 8
     6c0:	f1 e0       	ldi	r31, 0x01	; 1
     6c2:	90 81       	ld	r25, Z
     6c4:	90 7f       	andi	r25, 0xF0	; 240
     6c6:	90 83       	st	Z, r25
		 PORTK |= (task_no & 0b00001111);
     6c8:	90 81       	ld	r25, Z
     6ca:	8f 70       	andi	r24, 0x0F	; 15
     6cc:	98 2b       	or	r25, r24
     6ce:	90 83       	st	Z, r25
     6d0:	08 95       	ret

000006d2 <task_switch_out>:
	void task_switch_out(uint8_t task_no) {
		#ifdef HAL_DEFS_H_

		#else
		// Used on VIA MEGA Shield rev. 2.0.0
		PORTK &= 0b11110000;
     6d2:	e8 e0       	ldi	r30, 0x08	; 8
     6d4:	f1 e0       	ldi	r31, 0x01	; 1
     6d6:	80 81       	ld	r24, Z
     6d8:	80 7f       	andi	r24, 0xF0	; 240
     6da:	80 83       	st	Z, r24
     6dc:	08 95       	ret

000006de <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
     6de:	cf 93       	push	r28
     6e0:	df 93       	push	r29
     6e2:	dc 01       	movw	r26, r24
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
     6e4:	e8 e0       	ldi	r30, 0x08	; 8
     6e6:	f7 e0       	ldi	r31, 0x07	; 7
     6e8:	01 c0       	rjmp	.+2      	; 0x6ec <prvInsertBlockIntoFreeList+0xe>
     6ea:	f9 01       	movw	r30, r18
     6ec:	20 81       	ld	r18, Z
     6ee:	31 81       	ldd	r19, Z+1	; 0x01
     6f0:	2a 17       	cp	r18, r26
     6f2:	3b 07       	cpc	r19, r27
     6f4:	d0 f3       	brcs	.-12     	; 0x6ea <prvInsertBlockIntoFreeList+0xc>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
     6f6:	82 81       	ldd	r24, Z+2	; 0x02
     6f8:	93 81       	ldd	r25, Z+3	; 0x03
     6fa:	af 01       	movw	r20, r30
     6fc:	48 0f       	add	r20, r24
     6fe:	59 1f       	adc	r21, r25
     700:	a4 17       	cp	r26, r20
     702:	b5 07       	cpc	r27, r21
     704:	49 f4       	brne	.+18     	; 0x718 <prvInsertBlockIntoFreeList+0x3a>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
     706:	12 96       	adiw	r26, 0x02	; 2
     708:	4d 91       	ld	r20, X+
     70a:	5c 91       	ld	r21, X
     70c:	13 97       	sbiw	r26, 0x03	; 3
     70e:	84 0f       	add	r24, r20
     710:	95 1f       	adc	r25, r21
     712:	93 83       	std	Z+3, r25	; 0x03
     714:	82 83       	std	Z+2, r24	; 0x02
     716:	df 01       	movw	r26, r30
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
     718:	12 96       	adiw	r26, 0x02	; 2
     71a:	8d 91       	ld	r24, X+
     71c:	9c 91       	ld	r25, X
     71e:	13 97       	sbiw	r26, 0x03	; 3
     720:	ed 01       	movw	r28, r26
     722:	c8 0f       	add	r28, r24
     724:	d9 1f       	adc	r29, r25
     726:	2c 17       	cp	r18, r28
     728:	3d 07       	cpc	r19, r29
     72a:	d9 f4       	brne	.+54     	; 0x762 <prvInsertBlockIntoFreeList+0x84>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
     72c:	20 91 06 07 	lds	r18, 0x0706	; 0x800706 <pxEnd>
     730:	30 91 07 07 	lds	r19, 0x0707	; 0x800707 <pxEnd+0x1>
     734:	c2 17       	cp	r28, r18
     736:	d3 07       	cpc	r29, r19
     738:	81 f0       	breq	.+32     	; 0x75a <prvInsertBlockIntoFreeList+0x7c>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
     73a:	2a 81       	ldd	r18, Y+2	; 0x02
     73c:	3b 81       	ldd	r19, Y+3	; 0x03
     73e:	82 0f       	add	r24, r18
     740:	93 1f       	adc	r25, r19
     742:	13 96       	adiw	r26, 0x03	; 3
     744:	9c 93       	st	X, r25
     746:	8e 93       	st	-X, r24
     748:	12 97       	sbiw	r26, 0x02	; 2
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
     74a:	c0 81       	ld	r28, Z
     74c:	d1 81       	ldd	r29, Z+1	; 0x01
     74e:	88 81       	ld	r24, Y
     750:	99 81       	ldd	r25, Y+1	; 0x01
     752:	11 96       	adiw	r26, 0x01	; 1
     754:	9c 93       	st	X, r25
     756:	8e 93       	st	-X, r24
     758:	07 c0       	rjmp	.+14     	; 0x768 <prvInsertBlockIntoFreeList+0x8a>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
     75a:	11 96       	adiw	r26, 0x01	; 1
     75c:	dc 93       	st	X, r29
     75e:	ce 93       	st	-X, r28
     760:	03 c0       	rjmp	.+6      	; 0x768 <prvInsertBlockIntoFreeList+0x8a>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
     762:	11 96       	adiw	r26, 0x01	; 1
     764:	3c 93       	st	X, r19
     766:	2e 93       	st	-X, r18

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
     768:	ae 17       	cp	r26, r30
     76a:	bf 07       	cpc	r27, r31
     76c:	11 f0       	breq	.+4      	; 0x772 <prvInsertBlockIntoFreeList+0x94>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
     76e:	b1 83       	std	Z+1, r27	; 0x01
     770:	a0 83       	st	Z, r26
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
     772:	df 91       	pop	r29
     774:	cf 91       	pop	r28
     776:	08 95       	ret

00000778 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
     778:	cf 92       	push	r12
     77a:	df 92       	push	r13
     77c:	ef 92       	push	r14
     77e:	ff 92       	push	r15
     780:	0f 93       	push	r16
     782:	1f 93       	push	r17
     784:	cf 93       	push	r28
     786:	df 93       	push	r29
     788:	ec 01       	movw	r28, r24
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;

	vTaskSuspendAll();
     78a:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
     78e:	80 91 06 07 	lds	r24, 0x0706	; 0x800706 <pxEnd>
     792:	90 91 07 07 	lds	r25, 0x0707	; 0x800707 <pxEnd+0x1>
     796:	89 2b       	or	r24, r25
     798:	41 f5       	brne	.+80     	; 0x7ea <pvPortMalloc+0x72>

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
     79a:	e8 e0       	ldi	r30, 0x08	; 8
     79c:	f7 e0       	ldi	r31, 0x07	; 7
     79e:	ac e0       	ldi	r26, 0x0C	; 12
     7a0:	b7 e0       	ldi	r27, 0x07	; 7
     7a2:	b1 83       	std	Z+1, r27	; 0x01
     7a4:	a0 83       	st	Z, r26
	xStart.xBlockSize = ( size_t ) 0;
     7a6:	13 82       	std	Z+3, r1	; 0x03
     7a8:	12 82       	std	Z+2, r1	; 0x02
	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
	uxAddress -= xHeapStructSize;
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
	pxEnd = ( void * ) uxAddress;
     7aa:	e8 ea       	ldi	r30, 0xA8	; 168
     7ac:	f6 e1       	ldi	r31, 0x16	; 22
     7ae:	f0 93 07 07 	sts	0x0707, r31	; 0x800707 <pxEnd+0x1>
     7b2:	e0 93 06 07 	sts	0x0706, r30	; 0x800706 <pxEnd>
	pxEnd->xBlockSize = 0;
     7b6:	13 82       	std	Z+3, r1	; 0x03
     7b8:	12 82       	std	Z+2, r1	; 0x02
	pxEnd->pxNextFreeBlock = NULL;
     7ba:	11 82       	std	Z+1, r1	; 0x01
     7bc:	10 82       	st	Z, r1

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
     7be:	8c e9       	ldi	r24, 0x9C	; 156
     7c0:	9f e0       	ldi	r25, 0x0F	; 15
     7c2:	13 96       	adiw	r26, 0x03	; 3
     7c4:	9c 93       	st	X, r25
     7c6:	8e 93       	st	-X, r24
     7c8:	12 97       	sbiw	r26, 0x02	; 2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
     7ca:	ed 93       	st	X+, r30
     7cc:	fc 93       	st	X, r31

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     7ce:	90 93 03 07 	sts	0x0703, r25	; 0x800703 <xMinimumEverFreeBytesRemaining+0x1>
     7d2:	80 93 02 07 	sts	0x0702, r24	; 0x800702 <xMinimumEverFreeBytesRemaining>
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     7d6:	90 93 05 07 	sts	0x0705, r25	; 0x800705 <xFreeBytesRemaining+0x1>
     7da:	80 93 04 07 	sts	0x0704, r24	; 0x800704 <xFreeBytesRemaining>

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
     7de:	80 e0       	ldi	r24, 0x00	; 0
     7e0:	90 e8       	ldi	r25, 0x80	; 128
     7e2:	90 93 01 07 	sts	0x0701, r25	; 0x800701 <xBlockAllocatedBit+0x1>
     7e6:	80 93 00 07 	sts	0x0700, r24	; 0x800700 <xBlockAllocatedBit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
     7ea:	e0 90 00 07 	lds	r14, 0x0700	; 0x800700 <xBlockAllocatedBit>
     7ee:	f0 90 01 07 	lds	r15, 0x0701	; 0x800701 <xBlockAllocatedBit+0x1>
     7f2:	c7 01       	movw	r24, r14
     7f4:	8c 23       	and	r24, r28
     7f6:	9d 23       	and	r25, r29
     7f8:	89 2b       	or	r24, r25
     7fa:	09 f0       	breq	.+2      	; 0x7fe <pvPortMalloc+0x86>
     7fc:	66 c0       	rjmp	.+204    	; 0x8ca <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
     7fe:	20 97       	sbiw	r28, 0x00	; 0
     800:	09 f4       	brne	.+2      	; 0x804 <pvPortMalloc+0x8c>
     802:	66 c0       	rjmp	.+204    	; 0x8d0 <pvPortMalloc+0x158>
			{
				xWantedSize += xHeapStructSize;
     804:	ae 01       	movw	r20, r28
     806:	4c 5f       	subi	r20, 0xFC	; 252
     808:	5f 4f       	sbci	r21, 0xFF	; 255
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
     80a:	09 f4       	brne	.+2      	; 0x80e <pvPortMalloc+0x96>
     80c:	5e c0       	rjmp	.+188    	; 0x8ca <pvPortMalloc+0x152>
     80e:	00 91 04 07 	lds	r16, 0x0704	; 0x800704 <xFreeBytesRemaining>
     812:	10 91 05 07 	lds	r17, 0x0705	; 0x800705 <xFreeBytesRemaining+0x1>
     816:	04 17       	cp	r16, r20
     818:	15 07       	cpc	r17, r21
     81a:	08 f4       	brcc	.+2      	; 0x81e <pvPortMalloc+0xa6>
     81c:	56 c0       	rjmp	.+172    	; 0x8ca <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
     81e:	c0 91 08 07 	lds	r28, 0x0708	; 0x800708 <xStart>
     822:	d0 91 09 07 	lds	r29, 0x0709	; 0x800709 <xStart+0x1>

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
     826:	e8 e0       	ldi	r30, 0x08	; 8
     828:	f7 e0       	ldi	r31, 0x07	; 7
				pxBlock = xStart.pxNextFreeBlock;
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     82a:	02 c0       	rjmp	.+4      	; 0x830 <pvPortMalloc+0xb8>
     82c:	fe 01       	movw	r30, r28
				{
					pxPreviousBlock = pxBlock;
					pxBlock = pxBlock->pxNextFreeBlock;
     82e:	e9 01       	movw	r28, r18
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     830:	2a 81       	ldd	r18, Y+2	; 0x02
     832:	3b 81       	ldd	r19, Y+3	; 0x03
     834:	24 17       	cp	r18, r20
     836:	35 07       	cpc	r19, r21
     838:	28 f4       	brcc	.+10     	; 0x844 <pvPortMalloc+0xcc>
     83a:	28 81       	ld	r18, Y
     83c:	39 81       	ldd	r19, Y+1	; 0x01
     83e:	21 15       	cp	r18, r1
     840:	31 05       	cpc	r19, r1
     842:	a1 f7       	brne	.-24     	; 0x82c <pvPortMalloc+0xb4>
					pxBlock = pxBlock->pxNextFreeBlock;
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
     844:	80 91 06 07 	lds	r24, 0x0706	; 0x800706 <pxEnd>
     848:	90 91 07 07 	lds	r25, 0x0707	; 0x800707 <pxEnd+0x1>
     84c:	c8 17       	cp	r28, r24
     84e:	d9 07       	cpc	r29, r25
     850:	e1 f1       	breq	.+120    	; 0x8ca <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
     852:	c0 80       	ld	r12, Z
     854:	d1 80       	ldd	r13, Z+1	; 0x01
     856:	84 e0       	ldi	r24, 0x04	; 4
     858:	c8 0e       	add	r12, r24
     85a:	d1 1c       	adc	r13, r1

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
     85c:	88 81       	ld	r24, Y
     85e:	99 81       	ldd	r25, Y+1	; 0x01
     860:	91 83       	std	Z+1, r25	; 0x01
     862:	80 83       	st	Z, r24

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
     864:	2a 81       	ldd	r18, Y+2	; 0x02
     866:	3b 81       	ldd	r19, Y+3	; 0x03
     868:	24 1b       	sub	r18, r20
     86a:	35 0b       	sbc	r19, r21
     86c:	29 30       	cpi	r18, 0x09	; 9
     86e:	31 05       	cpc	r19, r1
     870:	48 f0       	brcs	.+18     	; 0x884 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
     872:	ce 01       	movw	r24, r28
     874:	84 0f       	add	r24, r20
     876:	95 1f       	adc	r25, r21
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
     878:	fc 01       	movw	r30, r24
     87a:	33 83       	std	Z+3, r19	; 0x03
     87c:	22 83       	std	Z+2, r18	; 0x02
						pxBlock->xBlockSize = xWantedSize;
     87e:	5b 83       	std	Y+3, r21	; 0x03
     880:	4a 83       	std	Y+2, r20	; 0x02

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
     882:	2d df       	rcall	.-422    	; 0x6de <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
     884:	8a 81       	ldd	r24, Y+2	; 0x02
     886:	9b 81       	ldd	r25, Y+3	; 0x03
     888:	08 1b       	sub	r16, r24
     88a:	19 0b       	sbc	r17, r25
     88c:	10 93 05 07 	sts	0x0705, r17	; 0x800705 <xFreeBytesRemaining+0x1>
     890:	00 93 04 07 	sts	0x0704, r16	; 0x800704 <xFreeBytesRemaining>

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
     894:	20 91 02 07 	lds	r18, 0x0702	; 0x800702 <xMinimumEverFreeBytesRemaining>
     898:	30 91 03 07 	lds	r19, 0x0703	; 0x800703 <xMinimumEverFreeBytesRemaining+0x1>
     89c:	02 17       	cp	r16, r18
     89e:	13 07       	cpc	r17, r19
     8a0:	20 f4       	brcc	.+8      	; 0x8aa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
     8a2:	10 93 03 07 	sts	0x0703, r17	; 0x800703 <xMinimumEverFreeBytesRemaining+0x1>
     8a6:	00 93 02 07 	sts	0x0702, r16	; 0x800702 <xMinimumEverFreeBytesRemaining>
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
     8aa:	e8 2a       	or	r14, r24
     8ac:	f9 2a       	or	r15, r25
     8ae:	fb 82       	std	Y+3, r15	; 0x03
     8b0:	ea 82       	std	Y+2, r14	; 0x02
					pxBlock->pxNextFreeBlock = NULL;
     8b2:	19 82       	std	Y+1, r1	; 0x01
     8b4:	18 82       	st	Y, r1
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
     8b6:	0e 94 63 0f 	call	0x1ec6	; 0x1ec6 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
     8ba:	c1 14       	cp	r12, r1
     8bc:	d1 04       	cpc	r13, r1
     8be:	59 f4       	brne	.+22     	; 0x8d6 <pvPortMalloc+0x15e>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
     8c0:	0e 94 56 15 	call	0x2aac	; 0x2aac <vApplicationMallocFailedHook>
     8c4:	c1 2c       	mov	r12, r1
     8c6:	d1 2c       	mov	r13, r1
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
	return pvReturn;
     8c8:	06 c0       	rjmp	.+12     	; 0x8d6 <pvPortMalloc+0x15e>
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
     8ca:	0e 94 63 0f 	call	0x1ec6	; 0x1ec6 <xTaskResumeAll>
     8ce:	f8 cf       	rjmp	.-16     	; 0x8c0 <pvPortMalloc+0x148>
     8d0:	0e 94 63 0f 	call	0x1ec6	; 0x1ec6 <xTaskResumeAll>
     8d4:	f5 cf       	rjmp	.-22     	; 0x8c0 <pvPortMalloc+0x148>
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
	return pvReturn;
}
     8d6:	c6 01       	movw	r24, r12
     8d8:	df 91       	pop	r29
     8da:	cf 91       	pop	r28
     8dc:	1f 91       	pop	r17
     8de:	0f 91       	pop	r16
     8e0:	ff 90       	pop	r15
     8e2:	ef 90       	pop	r14
     8e4:	df 90       	pop	r13
     8e6:	cf 90       	pop	r12
     8e8:	08 95       	ret

000008ea <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
     8ea:	cf 93       	push	r28
     8ec:	df 93       	push	r29
uint8_t *puc = ( uint8_t * ) pv;
BlockLink_t *pxLink;

	if( pv != NULL )
     8ee:	00 97       	sbiw	r24, 0x00	; 0
     8f0:	51 f1       	breq	.+84     	; 0x946 <vPortFree+0x5c>

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
		configASSERT( pxLink->pxNextFreeBlock == NULL );

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
     8f2:	fc 01       	movw	r30, r24
     8f4:	34 97       	sbiw	r30, 0x04	; 4
     8f6:	22 81       	ldd	r18, Z+2	; 0x02
     8f8:	33 81       	ldd	r19, Z+3	; 0x03
     8fa:	40 91 00 07 	lds	r20, 0x0700	; 0x800700 <xBlockAllocatedBit>
     8fe:	50 91 01 07 	lds	r21, 0x0701	; 0x800701 <xBlockAllocatedBit+0x1>
     902:	b9 01       	movw	r22, r18
     904:	64 23       	and	r22, r20
     906:	75 23       	and	r23, r21
     908:	67 2b       	or	r22, r23
     90a:	e9 f0       	breq	.+58     	; 0x946 <vPortFree+0x5c>
		{
			if( pxLink->pxNextFreeBlock == NULL )
     90c:	60 81       	ld	r22, Z
     90e:	71 81       	ldd	r23, Z+1	; 0x01
     910:	67 2b       	or	r22, r23
     912:	c9 f4       	brne	.+50     	; 0x946 <vPortFree+0x5c>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
     914:	ef 01       	movw	r28, r30
     916:	40 95       	com	r20
     918:	50 95       	com	r21
     91a:	24 23       	and	r18, r20
     91c:	35 23       	and	r19, r21
     91e:	33 83       	std	Z+3, r19	; 0x03
     920:	22 83       	std	Z+2, r18	; 0x02

				vTaskSuspendAll();
     922:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
     926:	20 91 04 07 	lds	r18, 0x0704	; 0x800704 <xFreeBytesRemaining>
     92a:	30 91 05 07 	lds	r19, 0x0705	; 0x800705 <xFreeBytesRemaining+0x1>
     92e:	8a 81       	ldd	r24, Y+2	; 0x02
     930:	9b 81       	ldd	r25, Y+3	; 0x03
     932:	82 0f       	add	r24, r18
     934:	93 1f       	adc	r25, r19
     936:	90 93 05 07 	sts	0x0705, r25	; 0x800705 <xFreeBytesRemaining+0x1>
     93a:	80 93 04 07 	sts	0x0704, r24	; 0x800704 <xFreeBytesRemaining>
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
     93e:	ce 01       	movw	r24, r28
     940:	ce de       	rcall	.-612    	; 0x6de <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
     942:	0e 94 63 0f 	call	0x1ec6	; 0x1ec6 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
     946:	df 91       	pop	r29
     948:	cf 91       	pop	r28
     94a:	08 95       	ret

0000094c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
     94c:	fc 01       	movw	r30, r24
    /* The list structure contains a list item which is used to mark the
    end of the list.  To initialise the list the list end is inserted
    as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );            /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     94e:	03 96       	adiw	r24, 0x03	; 3
     950:	92 83       	std	Z+2, r25	; 0x02
     952:	81 83       	std	Z+1, r24	; 0x01

    /* The list end value is the highest possible value in the list to
    ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
     954:	4f ef       	ldi	r20, 0xFF	; 255
     956:	5f ef       	ldi	r21, 0xFF	; 255
     958:	ba 01       	movw	r22, r20
     95a:	43 83       	std	Z+3, r20	; 0x03
     95c:	54 83       	std	Z+4, r21	; 0x04
     95e:	65 83       	std	Z+5, r22	; 0x05
     960:	76 83       	std	Z+6, r23	; 0x06

    /* The list end next and previous pointers point to itself so we know
    when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );    /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     962:	90 87       	std	Z+8, r25	; 0x08
     964:	87 83       	std	Z+7, r24	; 0x07
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     966:	92 87       	std	Z+10, r25	; 0x0a
     968:	81 87       	std	Z+9, r24	; 0x09

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
     96a:	10 82       	st	Z, r1
     96c:	08 95       	ret

0000096e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
     96e:	fc 01       	movw	r30, r24
     970:	13 86       	std	Z+11, r1	; 0x0b
     972:	12 86       	std	Z+10, r1	; 0x0a
     974:	08 95       	ret

00000976 <vListInsertEnd>:
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     976:	cf 93       	push	r28
     978:	df 93       	push	r29
     97a:	9c 01       	movw	r18, r24
     97c:	fb 01       	movw	r30, r22
ListItem_t * const pxIndex = pxList->pxIndex;
     97e:	dc 01       	movw	r26, r24
     980:	11 96       	adiw	r26, 0x01	; 1
     982:	cd 91       	ld	r28, X+
     984:	dc 91       	ld	r29, X
     986:	12 97       	sbiw	r26, 0x02	; 2
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
    makes the new list item the last item to be removed by a call to
    listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
     988:	d5 83       	std	Z+5, r29	; 0x05
     98a:	c4 83       	std	Z+4, r28	; 0x04
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
     98c:	8e 81       	ldd	r24, Y+6	; 0x06
     98e:	9f 81       	ldd	r25, Y+7	; 0x07
     990:	97 83       	std	Z+7, r25	; 0x07
     992:	86 83       	std	Z+6, r24	; 0x06

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
     994:	8e 81       	ldd	r24, Y+6	; 0x06
     996:	9f 81       	ldd	r25, Y+7	; 0x07
     998:	dc 01       	movw	r26, r24
     99a:	15 96       	adiw	r26, 0x05	; 5
     99c:	7c 93       	st	X, r23
     99e:	6e 93       	st	-X, r22
     9a0:	14 97       	sbiw	r26, 0x04	; 4
    pxIndex->pxPrevious = pxNewListItem;
     9a2:	7f 83       	std	Y+7, r23	; 0x07
     9a4:	6e 83       	std	Y+6, r22	; 0x06

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
     9a6:	33 87       	std	Z+11, r19	; 0x0b
     9a8:	22 87       	std	Z+10, r18	; 0x0a

    ( pxList->uxNumberOfItems )++;
     9aa:	f9 01       	movw	r30, r18
     9ac:	80 81       	ld	r24, Z
     9ae:	8f 5f       	subi	r24, 0xFF	; 255
     9b0:	80 83       	st	Z, r24
}
     9b2:	df 91       	pop	r29
     9b4:	cf 91       	pop	r28
     9b6:	08 95       	ret

000009b8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     9b8:	0f 93       	push	r16
     9ba:	1f 93       	push	r17
     9bc:	cf 93       	push	r28
     9be:	df 93       	push	r29
     9c0:	eb 01       	movw	r28, r22
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     9c2:	08 81       	ld	r16, Y
     9c4:	19 81       	ldd	r17, Y+1	; 0x01
     9c6:	2a 81       	ldd	r18, Y+2	; 0x02
     9c8:	3b 81       	ldd	r19, Y+3	; 0x03
    new list item should be placed after it.  This ensures that TCBs which are
    stored in ready lists (all of which have the same xItemValue value) get a
    share of the CPU.  However, if the xItemValue is the same as the back marker
    the iteration loop below will not end.  Therefore the value is checked
    first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
     9ca:	0f 3f       	cpi	r16, 0xFF	; 255
     9cc:	4f ef       	ldi	r20, 0xFF	; 255
     9ce:	14 07       	cpc	r17, r20
     9d0:	24 07       	cpc	r18, r20
     9d2:	34 07       	cpc	r19, r20
     9d4:	21 f4       	brne	.+8      	; 0x9de <vListInsert+0x26>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
     9d6:	fc 01       	movw	r30, r24
     9d8:	a1 85       	ldd	r26, Z+9	; 0x09
     9da:	b2 85       	ldd	r27, Z+10	; 0x0a
     9dc:	11 c0       	rjmp	.+34     	; 0xa00 <vListInsert+0x48>
            4) Using a queue or semaphore before it has been initialised or
               before the scheduler has been started (are interrupts firing
               before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
     9de:	dc 01       	movw	r26, r24
     9e0:	13 96       	adiw	r26, 0x03	; 3
     9e2:	01 c0       	rjmp	.+2      	; 0x9e6 <vListInsert+0x2e>
     9e4:	df 01       	movw	r26, r30
     9e6:	14 96       	adiw	r26, 0x04	; 4
     9e8:	ed 91       	ld	r30, X+
     9ea:	fc 91       	ld	r31, X
     9ec:	15 97       	sbiw	r26, 0x05	; 5
     9ee:	40 81       	ld	r20, Z
     9f0:	51 81       	ldd	r21, Z+1	; 0x01
     9f2:	62 81       	ldd	r22, Z+2	; 0x02
     9f4:	73 81       	ldd	r23, Z+3	; 0x03
     9f6:	04 17       	cp	r16, r20
     9f8:	15 07       	cpc	r17, r21
     9fa:	26 07       	cpc	r18, r22
     9fc:	37 07       	cpc	r19, r23
     9fe:	90 f7       	brcc	.-28     	; 0x9e4 <vListInsert+0x2c>
            /* There is nothing to do here, just iterating to the wanted
            insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
     a00:	14 96       	adiw	r26, 0x04	; 4
     a02:	ed 91       	ld	r30, X+
     a04:	fc 91       	ld	r31, X
     a06:	15 97       	sbiw	r26, 0x05	; 5
     a08:	fd 83       	std	Y+5, r31	; 0x05
     a0a:	ec 83       	std	Y+4, r30	; 0x04
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     a0c:	d7 83       	std	Z+7, r29	; 0x07
     a0e:	c6 83       	std	Z+6, r28	; 0x06
    pxNewListItem->pxPrevious = pxIterator;
     a10:	bf 83       	std	Y+7, r27	; 0x07
     a12:	ae 83       	std	Y+6, r26	; 0x06
    pxIterator->pxNext = pxNewListItem;
     a14:	15 96       	adiw	r26, 0x05	; 5
     a16:	dc 93       	st	X, r29
     a18:	ce 93       	st	-X, r28
     a1a:	14 97       	sbiw	r26, 0x04	; 4

    /* Remember which list the item is in.  This allows fast removal of the
    item later. */
    pxNewListItem->pxContainer = pxList;
     a1c:	9b 87       	std	Y+11, r25	; 0x0b
     a1e:	8a 87       	std	Y+10, r24	; 0x0a

    ( pxList->uxNumberOfItems )++;
     a20:	fc 01       	movw	r30, r24
     a22:	20 81       	ld	r18, Z
     a24:	2f 5f       	subi	r18, 0xFF	; 255
     a26:	20 83       	st	Z, r18
}
     a28:	df 91       	pop	r29
     a2a:	cf 91       	pop	r28
     a2c:	1f 91       	pop	r17
     a2e:	0f 91       	pop	r16
     a30:	08 95       	ret

00000a32 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     a32:	cf 93       	push	r28
     a34:	df 93       	push	r29
     a36:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
     a38:	a2 85       	ldd	r26, Z+10	; 0x0a
     a3a:	b3 85       	ldd	r27, Z+11	; 0x0b

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     a3c:	c4 81       	ldd	r28, Z+4	; 0x04
     a3e:	d5 81       	ldd	r29, Z+5	; 0x05
     a40:	86 81       	ldd	r24, Z+6	; 0x06
     a42:	97 81       	ldd	r25, Z+7	; 0x07
     a44:	9f 83       	std	Y+7, r25	; 0x07
     a46:	8e 83       	std	Y+6, r24	; 0x06
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     a48:	c6 81       	ldd	r28, Z+6	; 0x06
     a4a:	d7 81       	ldd	r29, Z+7	; 0x07
     a4c:	84 81       	ldd	r24, Z+4	; 0x04
     a4e:	95 81       	ldd	r25, Z+5	; 0x05
     a50:	9d 83       	std	Y+5, r25	; 0x05
     a52:	8c 83       	std	Y+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
     a54:	11 96       	adiw	r26, 0x01	; 1
     a56:	8d 91       	ld	r24, X+
     a58:	9c 91       	ld	r25, X
     a5a:	12 97       	sbiw	r26, 0x02	; 2
     a5c:	e8 17       	cp	r30, r24
     a5e:	f9 07       	cpc	r31, r25
     a60:	31 f4       	brne	.+12     	; 0xa6e <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
     a62:	86 81       	ldd	r24, Z+6	; 0x06
     a64:	97 81       	ldd	r25, Z+7	; 0x07
     a66:	12 96       	adiw	r26, 0x02	; 2
     a68:	9c 93       	st	X, r25
     a6a:	8e 93       	st	-X, r24
     a6c:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
     a6e:	13 86       	std	Z+11, r1	; 0x0b
     a70:	12 86       	std	Z+10, r1	; 0x0a
    ( pxList->uxNumberOfItems )--;
     a72:	8c 91       	ld	r24, X
     a74:	81 50       	subi	r24, 0x01	; 1
     a76:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
     a78:	8c 91       	ld	r24, X
}
     a7a:	df 91       	pop	r29
     a7c:	cf 91       	pop	r28
     a7e:	08 95       	ret

00000a80 <pxPortInitialiseStack>:
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
     a80:	31 e1       	ldi	r19, 0x11	; 17
     a82:	fc 01       	movw	r30, r24
     a84:	30 83       	st	Z, r19
     a86:	31 97       	sbiw	r30, 0x01	; 1
     a88:	22 e2       	ldi	r18, 0x22	; 34
     a8a:	20 83       	st	Z, r18
     a8c:	31 97       	sbiw	r30, 0x01	; 1
     a8e:	a3 e3       	ldi	r26, 0x33	; 51
     a90:	a0 83       	st	Z, r26
     a92:	31 97       	sbiw	r30, 0x01	; 1
     a94:	60 83       	st	Z, r22
     a96:	31 97       	sbiw	r30, 0x01	; 1
     a98:	70 83       	st	Z, r23
     a9a:	31 97       	sbiw	r30, 0x01	; 1
     a9c:	10 82       	st	Z, r1
     a9e:	31 97       	sbiw	r30, 0x01	; 1
     aa0:	10 82       	st	Z, r1
     aa2:	31 97       	sbiw	r30, 0x01	; 1
     aa4:	60 e8       	ldi	r22, 0x80	; 128
     aa6:	60 83       	st	Z, r22
     aa8:	31 97       	sbiw	r30, 0x01	; 1
     aaa:	10 82       	st	Z, r1
     aac:	31 97       	sbiw	r30, 0x01	; 1
     aae:	10 82       	st	Z, r1
     ab0:	31 97       	sbiw	r30, 0x01	; 1
     ab2:	10 82       	st	Z, r1
     ab4:	31 97       	sbiw	r30, 0x01	; 1
     ab6:	62 e0       	ldi	r22, 0x02	; 2
     ab8:	60 83       	st	Z, r22
     aba:	31 97       	sbiw	r30, 0x01	; 1
     abc:	63 e0       	ldi	r22, 0x03	; 3
     abe:	60 83       	st	Z, r22
     ac0:	31 97       	sbiw	r30, 0x01	; 1
     ac2:	64 e0       	ldi	r22, 0x04	; 4
     ac4:	60 83       	st	Z, r22
     ac6:	31 97       	sbiw	r30, 0x01	; 1
     ac8:	65 e0       	ldi	r22, 0x05	; 5
     aca:	60 83       	st	Z, r22
     acc:	31 97       	sbiw	r30, 0x01	; 1
     ace:	66 e0       	ldi	r22, 0x06	; 6
     ad0:	60 83       	st	Z, r22
     ad2:	31 97       	sbiw	r30, 0x01	; 1
     ad4:	67 e0       	ldi	r22, 0x07	; 7
     ad6:	60 83       	st	Z, r22
     ad8:	31 97       	sbiw	r30, 0x01	; 1
     ada:	68 e0       	ldi	r22, 0x08	; 8
     adc:	60 83       	st	Z, r22
     ade:	31 97       	sbiw	r30, 0x01	; 1
     ae0:	69 e0       	ldi	r22, 0x09	; 9
     ae2:	60 83       	st	Z, r22
     ae4:	31 97       	sbiw	r30, 0x01	; 1
     ae6:	60 e1       	ldi	r22, 0x10	; 16
     ae8:	60 83       	st	Z, r22
     aea:	31 97       	sbiw	r30, 0x01	; 1
     aec:	30 83       	st	Z, r19
     aee:	31 97       	sbiw	r30, 0x01	; 1
     af0:	32 e1       	ldi	r19, 0x12	; 18
     af2:	30 83       	st	Z, r19
     af4:	31 97       	sbiw	r30, 0x01	; 1
     af6:	33 e1       	ldi	r19, 0x13	; 19
     af8:	30 83       	st	Z, r19
     afa:	31 97       	sbiw	r30, 0x01	; 1
     afc:	34 e1       	ldi	r19, 0x14	; 20
     afe:	30 83       	st	Z, r19
     b00:	31 97       	sbiw	r30, 0x01	; 1
     b02:	35 e1       	ldi	r19, 0x15	; 21
     b04:	30 83       	st	Z, r19
     b06:	31 97       	sbiw	r30, 0x01	; 1
     b08:	36 e1       	ldi	r19, 0x16	; 22
     b0a:	30 83       	st	Z, r19
     b0c:	31 97       	sbiw	r30, 0x01	; 1
     b0e:	37 e1       	ldi	r19, 0x17	; 23
     b10:	30 83       	st	Z, r19
     b12:	31 97       	sbiw	r30, 0x01	; 1
     b14:	38 e1       	ldi	r19, 0x18	; 24
     b16:	30 83       	st	Z, r19
     b18:	31 97       	sbiw	r30, 0x01	; 1
     b1a:	39 e1       	ldi	r19, 0x19	; 25
     b1c:	30 83       	st	Z, r19
     b1e:	31 97       	sbiw	r30, 0x01	; 1
     b20:	30 e2       	ldi	r19, 0x20	; 32
     b22:	30 83       	st	Z, r19
     b24:	31 97       	sbiw	r30, 0x01	; 1
     b26:	31 e2       	ldi	r19, 0x21	; 33
     b28:	30 83       	st	Z, r19
     b2a:	31 97       	sbiw	r30, 0x01	; 1
     b2c:	20 83       	st	Z, r18
     b2e:	31 97       	sbiw	r30, 0x01	; 1
     b30:	23 e2       	ldi	r18, 0x23	; 35
     b32:	20 83       	st	Z, r18
     b34:	31 97       	sbiw	r30, 0x01	; 1
     b36:	40 83       	st	Z, r20
     b38:	31 97       	sbiw	r30, 0x01	; 1
     b3a:	50 83       	st	Z, r21
     b3c:	31 97       	sbiw	r30, 0x01	; 1
     b3e:	26 e2       	ldi	r18, 0x26	; 38
     b40:	20 83       	st	Z, r18
     b42:	31 97       	sbiw	r30, 0x01	; 1
     b44:	27 e2       	ldi	r18, 0x27	; 39
     b46:	20 83       	st	Z, r18
     b48:	31 97       	sbiw	r30, 0x01	; 1
     b4a:	28 e2       	ldi	r18, 0x28	; 40
     b4c:	20 83       	st	Z, r18
     b4e:	31 97       	sbiw	r30, 0x01	; 1
     b50:	29 e2       	ldi	r18, 0x29	; 41
     b52:	20 83       	st	Z, r18
     b54:	31 97       	sbiw	r30, 0x01	; 1
     b56:	20 e3       	ldi	r18, 0x30	; 48
     b58:	20 83       	st	Z, r18
     b5a:	31 97       	sbiw	r30, 0x01	; 1
     b5c:	21 e3       	ldi	r18, 0x31	; 49
     b5e:	20 83       	st	Z, r18
     b60:	89 97       	sbiw	r24, 0x29	; 41
     b62:	08 95       	ret

00000b64 <xPortStartScheduler>:
     b64:	a8 95       	wdr
     b66:	90 ec       	ldi	r25, 0xC0	; 192
     b68:	88 e1       	ldi	r24, 0x18	; 24
     b6a:	0f b6       	in	r0, 0x3f	; 63
     b6c:	f8 94       	cli
     b6e:	a8 95       	wdr
     b70:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
     b74:	0f be       	out	0x3f, r0	; 63
     b76:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
     b7a:	a0 91 26 17 	lds	r26, 0x1726	; 0x801726 <pxCurrentTCB>
     b7e:	b0 91 27 17 	lds	r27, 0x1727	; 0x801727 <pxCurrentTCB+0x1>
     b82:	cd 91       	ld	r28, X+
     b84:	cd bf       	out	0x3d, r28	; 61
     b86:	dd 91       	ld	r29, X+
     b88:	de bf       	out	0x3e, r29	; 62
     b8a:	ff 91       	pop	r31
     b8c:	ef 91       	pop	r30
     b8e:	df 91       	pop	r29
     b90:	cf 91       	pop	r28
     b92:	bf 91       	pop	r27
     b94:	af 91       	pop	r26
     b96:	9f 91       	pop	r25
     b98:	8f 91       	pop	r24
     b9a:	7f 91       	pop	r23
     b9c:	6f 91       	pop	r22
     b9e:	5f 91       	pop	r21
     ba0:	4f 91       	pop	r20
     ba2:	3f 91       	pop	r19
     ba4:	2f 91       	pop	r18
     ba6:	1f 91       	pop	r17
     ba8:	0f 91       	pop	r16
     baa:	ff 90       	pop	r15
     bac:	ef 90       	pop	r14
     bae:	df 90       	pop	r13
     bb0:	cf 90       	pop	r12
     bb2:	bf 90       	pop	r11
     bb4:	af 90       	pop	r10
     bb6:	9f 90       	pop	r9
     bb8:	8f 90       	pop	r8
     bba:	7f 90       	pop	r7
     bbc:	6f 90       	pop	r6
     bbe:	5f 90       	pop	r5
     bc0:	4f 90       	pop	r4
     bc2:	3f 90       	pop	r3
     bc4:	2f 90       	pop	r2
     bc6:	1f 90       	pop	r1
     bc8:	0f 90       	pop	r0
     bca:	0c be       	out	0x3c, r0	; 60
     bcc:	0f 90       	pop	r0
     bce:	0b be       	out	0x3b, r0	; 59
     bd0:	0f 90       	pop	r0
     bd2:	0f be       	out	0x3f, r0	; 63
     bd4:	0f 90       	pop	r0
     bd6:	08 95       	ret
     bd8:	81 e0       	ldi	r24, 0x01	; 1
     bda:	08 95       	ret

00000bdc <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYield( void )
{
    portSAVE_CONTEXT();
     bdc:	0f 92       	push	r0
     bde:	0f b6       	in	r0, 0x3f	; 63
     be0:	f8 94       	cli
     be2:	0f 92       	push	r0
     be4:	0b b6       	in	r0, 0x3b	; 59
     be6:	0f 92       	push	r0
     be8:	0c b6       	in	r0, 0x3c	; 60
     bea:	0f 92       	push	r0
     bec:	1f 92       	push	r1
     bee:	11 24       	eor	r1, r1
     bf0:	2f 92       	push	r2
     bf2:	3f 92       	push	r3
     bf4:	4f 92       	push	r4
     bf6:	5f 92       	push	r5
     bf8:	6f 92       	push	r6
     bfa:	7f 92       	push	r7
     bfc:	8f 92       	push	r8
     bfe:	9f 92       	push	r9
     c00:	af 92       	push	r10
     c02:	bf 92       	push	r11
     c04:	cf 92       	push	r12
     c06:	df 92       	push	r13
     c08:	ef 92       	push	r14
     c0a:	ff 92       	push	r15
     c0c:	0f 93       	push	r16
     c0e:	1f 93       	push	r17
     c10:	2f 93       	push	r18
     c12:	3f 93       	push	r19
     c14:	4f 93       	push	r20
     c16:	5f 93       	push	r21
     c18:	6f 93       	push	r22
     c1a:	7f 93       	push	r23
     c1c:	8f 93       	push	r24
     c1e:	9f 93       	push	r25
     c20:	af 93       	push	r26
     c22:	bf 93       	push	r27
     c24:	cf 93       	push	r28
     c26:	df 93       	push	r29
     c28:	ef 93       	push	r30
     c2a:	ff 93       	push	r31
     c2c:	a0 91 26 17 	lds	r26, 0x1726	; 0x801726 <pxCurrentTCB>
     c30:	b0 91 27 17 	lds	r27, 0x1727	; 0x801727 <pxCurrentTCB+0x1>
     c34:	0d b6       	in	r0, 0x3d	; 61
     c36:	0d 92       	st	X+, r0
     c38:	0e b6       	in	r0, 0x3e	; 62
     c3a:	0d 92       	st	X+, r0
    vTaskSwitchContext();
     c3c:	0e 94 65 10 	call	0x20ca	; 0x20ca <vTaskSwitchContext>
    portRESTORE_CONTEXT();
     c40:	a0 91 26 17 	lds	r26, 0x1726	; 0x801726 <pxCurrentTCB>
     c44:	b0 91 27 17 	lds	r27, 0x1727	; 0x801727 <pxCurrentTCB+0x1>
     c48:	cd 91       	ld	r28, X+
     c4a:	cd bf       	out	0x3d, r28	; 61
     c4c:	dd 91       	ld	r29, X+
     c4e:	de bf       	out	0x3e, r29	; 62
     c50:	ff 91       	pop	r31
     c52:	ef 91       	pop	r30
     c54:	df 91       	pop	r29
     c56:	cf 91       	pop	r28
     c58:	bf 91       	pop	r27
     c5a:	af 91       	pop	r26
     c5c:	9f 91       	pop	r25
     c5e:	8f 91       	pop	r24
     c60:	7f 91       	pop	r23
     c62:	6f 91       	pop	r22
     c64:	5f 91       	pop	r21
     c66:	4f 91       	pop	r20
     c68:	3f 91       	pop	r19
     c6a:	2f 91       	pop	r18
     c6c:	1f 91       	pop	r17
     c6e:	0f 91       	pop	r16
     c70:	ff 90       	pop	r15
     c72:	ef 90       	pop	r14
     c74:	df 90       	pop	r13
     c76:	cf 90       	pop	r12
     c78:	bf 90       	pop	r11
     c7a:	af 90       	pop	r10
     c7c:	9f 90       	pop	r9
     c7e:	8f 90       	pop	r8
     c80:	7f 90       	pop	r7
     c82:	6f 90       	pop	r6
     c84:	5f 90       	pop	r5
     c86:	4f 90       	pop	r4
     c88:	3f 90       	pop	r3
     c8a:	2f 90       	pop	r2
     c8c:	1f 90       	pop	r1
     c8e:	0f 90       	pop	r0
     c90:	0c be       	out	0x3c, r0	; 60
     c92:	0f 90       	pop	r0
     c94:	0b be       	out	0x3b, r0	; 59
     c96:	0f 90       	pop	r0
     c98:	0f be       	out	0x3f, r0	; 63
     c9a:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
     c9c:	08 95       	ret

00000c9e <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
    portSAVE_CONTEXT();
     c9e:	0f 92       	push	r0
     ca0:	0f b6       	in	r0, 0x3f	; 63
     ca2:	f8 94       	cli
     ca4:	0f 92       	push	r0
     ca6:	0b b6       	in	r0, 0x3b	; 59
     ca8:	0f 92       	push	r0
     caa:	0c b6       	in	r0, 0x3c	; 60
     cac:	0f 92       	push	r0
     cae:	1f 92       	push	r1
     cb0:	11 24       	eor	r1, r1
     cb2:	2f 92       	push	r2
     cb4:	3f 92       	push	r3
     cb6:	4f 92       	push	r4
     cb8:	5f 92       	push	r5
     cba:	6f 92       	push	r6
     cbc:	7f 92       	push	r7
     cbe:	8f 92       	push	r8
     cc0:	9f 92       	push	r9
     cc2:	af 92       	push	r10
     cc4:	bf 92       	push	r11
     cc6:	cf 92       	push	r12
     cc8:	df 92       	push	r13
     cca:	ef 92       	push	r14
     ccc:	ff 92       	push	r15
     cce:	0f 93       	push	r16
     cd0:	1f 93       	push	r17
     cd2:	2f 93       	push	r18
     cd4:	3f 93       	push	r19
     cd6:	4f 93       	push	r20
     cd8:	5f 93       	push	r21
     cda:	6f 93       	push	r22
     cdc:	7f 93       	push	r23
     cde:	8f 93       	push	r24
     ce0:	9f 93       	push	r25
     ce2:	af 93       	push	r26
     ce4:	bf 93       	push	r27
     ce6:	cf 93       	push	r28
     ce8:	df 93       	push	r29
     cea:	ef 93       	push	r30
     cec:	ff 93       	push	r31
     cee:	a0 91 26 17 	lds	r26, 0x1726	; 0x801726 <pxCurrentTCB>
     cf2:	b0 91 27 17 	lds	r27, 0x1727	; 0x801727 <pxCurrentTCB+0x1>
     cf6:	0d b6       	in	r0, 0x3d	; 61
     cf8:	0d 92       	st	X+, r0
     cfa:	0e b6       	in	r0, 0x3e	; 62
     cfc:	0d 92       	st	X+, r0

    sleep_reset();        //     reset the sleep_mode() faster than sleep_disable();
     cfe:	13 be       	out	0x33, r1	; 51

    if( xTaskIncrementTick() != pdFALSE )
     d00:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <xTaskIncrementTick>
     d04:	81 11       	cpse	r24, r1
    {
        vTaskSwitchContext();
     d06:	0e 94 65 10 	call	0x20ca	; 0x20ca <vTaskSwitchContext>
    }

    portRESTORE_CONTEXT();
     d0a:	a0 91 26 17 	lds	r26, 0x1726	; 0x801726 <pxCurrentTCB>
     d0e:	b0 91 27 17 	lds	r27, 0x1727	; 0x801727 <pxCurrentTCB+0x1>
     d12:	cd 91       	ld	r28, X+
     d14:	cd bf       	out	0x3d, r28	; 61
     d16:	dd 91       	ld	r29, X+
     d18:	de bf       	out	0x3e, r29	; 62
     d1a:	ff 91       	pop	r31
     d1c:	ef 91       	pop	r30
     d1e:	df 91       	pop	r29
     d20:	cf 91       	pop	r28
     d22:	bf 91       	pop	r27
     d24:	af 91       	pop	r26
     d26:	9f 91       	pop	r25
     d28:	8f 91       	pop	r24
     d2a:	7f 91       	pop	r23
     d2c:	6f 91       	pop	r22
     d2e:	5f 91       	pop	r21
     d30:	4f 91       	pop	r20
     d32:	3f 91       	pop	r19
     d34:	2f 91       	pop	r18
     d36:	1f 91       	pop	r17
     d38:	0f 91       	pop	r16
     d3a:	ff 90       	pop	r15
     d3c:	ef 90       	pop	r14
     d3e:	df 90       	pop	r13
     d40:	cf 90       	pop	r12
     d42:	bf 90       	pop	r11
     d44:	af 90       	pop	r10
     d46:	9f 90       	pop	r9
     d48:	8f 90       	pop	r8
     d4a:	7f 90       	pop	r7
     d4c:	6f 90       	pop	r6
     d4e:	5f 90       	pop	r5
     d50:	4f 90       	pop	r4
     d52:	3f 90       	pop	r3
     d54:	2f 90       	pop	r2
     d56:	1f 90       	pop	r1
     d58:	0f 90       	pop	r0
     d5a:	0c be       	out	0x3c, r0	; 60
     d5c:	0f 90       	pop	r0
     d5e:	0b be       	out	0x3b, r0	; 59
     d60:	0f 90       	pop	r0
     d62:	0f be       	out	0x3f, r0	; 63
     d64:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
     d66:	08 95       	ret

00000d68 <__vector_12>:
     */
    ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
//  ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
    ISR(portSCHEDULER_ISR)
    {
        vPortYieldFromTick();
     d68:	9a df       	rcall	.-204    	; 0xc9e <vPortYieldFromTick>
        __asm__ __volatile__ ( "reti" );
     d6a:	18 95       	reti

00000d6c <prvIsQueueEmpty>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
     d6c:	0f b6       	in	r0, 0x3f	; 63
     d6e:	f8 94       	cli
     d70:	0f 92       	push	r0
     d72:	fc 01       	movw	r30, r24
     d74:	96 8d       	ldd	r25, Z+30	; 0x1e
     d76:	0f 90       	pop	r0
     d78:	0f be       	out	0x3f, r0	; 63
     d7a:	81 e0       	ldi	r24, 0x01	; 1
     d7c:	91 11       	cpse	r25, r1
     d7e:	80 e0       	ldi	r24, 0x00	; 0
     d80:	08 95       	ret

00000d82 <prvCopyDataToQueue>:
     d82:	0f 93       	push	r16
     d84:	1f 93       	push	r17
     d86:	cf 93       	push	r28
     d88:	df 93       	push	r29
     d8a:	ec 01       	movw	r28, r24
     d8c:	04 2f       	mov	r16, r20
     d8e:	1e 8d       	ldd	r17, Y+30	; 0x1e
     d90:	48 a1       	ldd	r20, Y+32	; 0x20
     d92:	41 11       	cpse	r20, r1
     d94:	0c c0       	rjmp	.+24     	; 0xdae <prvCopyDataToQueue+0x2c>
     d96:	88 81       	ld	r24, Y
     d98:	99 81       	ldd	r25, Y+1	; 0x01
     d9a:	89 2b       	or	r24, r25
     d9c:	09 f0       	breq	.+2      	; 0xda0 <prvCopyDataToQueue+0x1e>
     d9e:	42 c0       	rjmp	.+132    	; 0xe24 <prvCopyDataToQueue+0xa2>
     da0:	8c 81       	ldd	r24, Y+4	; 0x04
     da2:	9d 81       	ldd	r25, Y+5	; 0x05
     da4:	0e 94 f0 11 	call	0x23e0	; 0x23e0 <xTaskPriorityDisinherit>
     da8:	1d 82       	std	Y+5, r1	; 0x05
     daa:	1c 82       	std	Y+4, r1	; 0x04
     dac:	42 c0       	rjmp	.+132    	; 0xe32 <prvCopyDataToQueue+0xb0>
     dae:	01 11       	cpse	r16, r1
     db0:	17 c0       	rjmp	.+46     	; 0xde0 <prvCopyDataToQueue+0x5e>
     db2:	50 e0       	ldi	r21, 0x00	; 0
     db4:	8a 81       	ldd	r24, Y+2	; 0x02
     db6:	9b 81       	ldd	r25, Y+3	; 0x03
     db8:	0e 94 b8 23 	call	0x4770	; 0x4770 <memcpy>
     dbc:	28 a1       	ldd	r18, Y+32	; 0x20
     dbe:	8a 81       	ldd	r24, Y+2	; 0x02
     dc0:	9b 81       	ldd	r25, Y+3	; 0x03
     dc2:	82 0f       	add	r24, r18
     dc4:	91 1d       	adc	r25, r1
     dc6:	9b 83       	std	Y+3, r25	; 0x03
     dc8:	8a 83       	std	Y+2, r24	; 0x02
     dca:	2c 81       	ldd	r18, Y+4	; 0x04
     dcc:	3d 81       	ldd	r19, Y+5	; 0x05
     dce:	82 17       	cp	r24, r18
     dd0:	93 07       	cpc	r25, r19
     dd2:	50 f1       	brcs	.+84     	; 0xe28 <prvCopyDataToQueue+0xa6>
     dd4:	88 81       	ld	r24, Y
     dd6:	99 81       	ldd	r25, Y+1	; 0x01
     dd8:	9b 83       	std	Y+3, r25	; 0x03
     dda:	8a 83       	std	Y+2, r24	; 0x02
     ddc:	80 e0       	ldi	r24, 0x00	; 0
     dde:	29 c0       	rjmp	.+82     	; 0xe32 <prvCopyDataToQueue+0xb0>
     de0:	50 e0       	ldi	r21, 0x00	; 0
     de2:	8e 81       	ldd	r24, Y+6	; 0x06
     de4:	9f 81       	ldd	r25, Y+7	; 0x07
     de6:	0e 94 b8 23 	call	0x4770	; 0x4770 <memcpy>
     dea:	88 a1       	ldd	r24, Y+32	; 0x20
     dec:	90 e0       	ldi	r25, 0x00	; 0
     dee:	91 95       	neg	r25
     df0:	81 95       	neg	r24
     df2:	91 09       	sbc	r25, r1
     df4:	2e 81       	ldd	r18, Y+6	; 0x06
     df6:	3f 81       	ldd	r19, Y+7	; 0x07
     df8:	28 0f       	add	r18, r24
     dfa:	39 1f       	adc	r19, r25
     dfc:	3f 83       	std	Y+7, r19	; 0x07
     dfe:	2e 83       	std	Y+6, r18	; 0x06
     e00:	48 81       	ld	r20, Y
     e02:	59 81       	ldd	r21, Y+1	; 0x01
     e04:	24 17       	cp	r18, r20
     e06:	35 07       	cpc	r19, r21
     e08:	30 f4       	brcc	.+12     	; 0xe16 <prvCopyDataToQueue+0x94>
     e0a:	2c 81       	ldd	r18, Y+4	; 0x04
     e0c:	3d 81       	ldd	r19, Y+5	; 0x05
     e0e:	82 0f       	add	r24, r18
     e10:	93 1f       	adc	r25, r19
     e12:	9f 83       	std	Y+7, r25	; 0x07
     e14:	8e 83       	std	Y+6, r24	; 0x06
     e16:	02 30       	cpi	r16, 0x02	; 2
     e18:	49 f4       	brne	.+18     	; 0xe2c <prvCopyDataToQueue+0xaa>
     e1a:	11 23       	and	r17, r17
     e1c:	49 f0       	breq	.+18     	; 0xe30 <prvCopyDataToQueue+0xae>
     e1e:	11 50       	subi	r17, 0x01	; 1
     e20:	80 e0       	ldi	r24, 0x00	; 0
     e22:	07 c0       	rjmp	.+14     	; 0xe32 <prvCopyDataToQueue+0xb0>
     e24:	80 e0       	ldi	r24, 0x00	; 0
     e26:	05 c0       	rjmp	.+10     	; 0xe32 <prvCopyDataToQueue+0xb0>
     e28:	80 e0       	ldi	r24, 0x00	; 0
     e2a:	03 c0       	rjmp	.+6      	; 0xe32 <prvCopyDataToQueue+0xb0>
     e2c:	80 e0       	ldi	r24, 0x00	; 0
     e2e:	01 c0       	rjmp	.+2      	; 0xe32 <prvCopyDataToQueue+0xb0>
     e30:	80 e0       	ldi	r24, 0x00	; 0
     e32:	1f 5f       	subi	r17, 0xFF	; 255
     e34:	1e 8f       	std	Y+30, r17	; 0x1e
     e36:	df 91       	pop	r29
     e38:	cf 91       	pop	r28
     e3a:	1f 91       	pop	r17
     e3c:	0f 91       	pop	r16
     e3e:	08 95       	ret

00000e40 <prvCopyDataFromQueue>:
     e40:	fc 01       	movw	r30, r24
     e42:	40 a1       	ldd	r20, Z+32	; 0x20
     e44:	44 23       	and	r20, r20
     e46:	a9 f0       	breq	.+42     	; 0xe72 <prvCopyDataFromQueue+0x32>
     e48:	50 e0       	ldi	r21, 0x00	; 0
     e4a:	26 81       	ldd	r18, Z+6	; 0x06
     e4c:	37 81       	ldd	r19, Z+7	; 0x07
     e4e:	24 0f       	add	r18, r20
     e50:	35 1f       	adc	r19, r21
     e52:	37 83       	std	Z+7, r19	; 0x07
     e54:	26 83       	std	Z+6, r18	; 0x06
     e56:	84 81       	ldd	r24, Z+4	; 0x04
     e58:	95 81       	ldd	r25, Z+5	; 0x05
     e5a:	28 17       	cp	r18, r24
     e5c:	39 07       	cpc	r19, r25
     e5e:	20 f0       	brcs	.+8      	; 0xe68 <prvCopyDataFromQueue+0x28>
     e60:	80 81       	ld	r24, Z
     e62:	91 81       	ldd	r25, Z+1	; 0x01
     e64:	97 83       	std	Z+7, r25	; 0x07
     e66:	86 83       	std	Z+6, r24	; 0x06
     e68:	cb 01       	movw	r24, r22
     e6a:	66 81       	ldd	r22, Z+6	; 0x06
     e6c:	77 81       	ldd	r23, Z+7	; 0x07
     e6e:	0c 94 b8 23 	jmp	0x4770	; 0x4770 <memcpy>
     e72:	08 95       	ret

00000e74 <prvUnlockQueue>:
     e74:	ef 92       	push	r14
     e76:	ff 92       	push	r15
     e78:	0f 93       	push	r16
     e7a:	1f 93       	push	r17
     e7c:	cf 93       	push	r28
     e7e:	8c 01       	movw	r16, r24
     e80:	0f b6       	in	r0, 0x3f	; 63
     e82:	f8 94       	cli
     e84:	0f 92       	push	r0
     e86:	fc 01       	movw	r30, r24
     e88:	c2 a1       	ldd	r28, Z+34	; 0x22
     e8a:	1c 16       	cp	r1, r28
     e8c:	ac f4       	brge	.+42     	; 0xeb8 <prvUnlockQueue+0x44>
     e8e:	83 89       	ldd	r24, Z+19	; 0x13
     e90:	81 11       	cpse	r24, r1
     e92:	06 c0       	rjmp	.+12     	; 0xea0 <prvUnlockQueue+0x2c>
     e94:	11 c0       	rjmp	.+34     	; 0xeb8 <prvUnlockQueue+0x44>
     e96:	f8 01       	movw	r30, r16
     e98:	83 89       	ldd	r24, Z+19	; 0x13
     e9a:	81 11       	cpse	r24, r1
     e9c:	05 c0       	rjmp	.+10     	; 0xea8 <prvUnlockQueue+0x34>
     e9e:	0c c0       	rjmp	.+24     	; 0xeb8 <prvUnlockQueue+0x44>
     ea0:	78 01       	movw	r14, r16
     ea2:	f3 e1       	ldi	r31, 0x13	; 19
     ea4:	ef 0e       	add	r14, r31
     ea6:	f1 1c       	adc	r15, r1
     ea8:	c7 01       	movw	r24, r14
     eaa:	0e 94 1b 11 	call	0x2236	; 0x2236 <xTaskRemoveFromEventList>
     eae:	81 11       	cpse	r24, r1
     eb0:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <vTaskMissedYield>
     eb4:	c1 50       	subi	r28, 0x01	; 1
     eb6:	79 f7       	brne	.-34     	; 0xe96 <prvUnlockQueue+0x22>
     eb8:	8f ef       	ldi	r24, 0xFF	; 255
     eba:	f8 01       	movw	r30, r16
     ebc:	82 a3       	std	Z+34, r24	; 0x22
     ebe:	0f 90       	pop	r0
     ec0:	0f be       	out	0x3f, r0	; 63
     ec2:	0f b6       	in	r0, 0x3f	; 63
     ec4:	f8 94       	cli
     ec6:	0f 92       	push	r0
     ec8:	c1 a1       	ldd	r28, Z+33	; 0x21
     eca:	1c 16       	cp	r1, r28
     ecc:	ac f4       	brge	.+42     	; 0xef8 <prvUnlockQueue+0x84>
     ece:	80 85       	ldd	r24, Z+8	; 0x08
     ed0:	81 11       	cpse	r24, r1
     ed2:	06 c0       	rjmp	.+12     	; 0xee0 <prvUnlockQueue+0x6c>
     ed4:	11 c0       	rjmp	.+34     	; 0xef8 <prvUnlockQueue+0x84>
     ed6:	f8 01       	movw	r30, r16
     ed8:	80 85       	ldd	r24, Z+8	; 0x08
     eda:	81 11       	cpse	r24, r1
     edc:	05 c0       	rjmp	.+10     	; 0xee8 <prvUnlockQueue+0x74>
     ede:	0c c0       	rjmp	.+24     	; 0xef8 <prvUnlockQueue+0x84>
     ee0:	78 01       	movw	r14, r16
     ee2:	f8 e0       	ldi	r31, 0x08	; 8
     ee4:	ef 0e       	add	r14, r31
     ee6:	f1 1c       	adc	r15, r1
     ee8:	c7 01       	movw	r24, r14
     eea:	0e 94 1b 11 	call	0x2236	; 0x2236 <xTaskRemoveFromEventList>
     eee:	81 11       	cpse	r24, r1
     ef0:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <vTaskMissedYield>
     ef4:	c1 50       	subi	r28, 0x01	; 1
     ef6:	79 f7       	brne	.-34     	; 0xed6 <prvUnlockQueue+0x62>
     ef8:	8f ef       	ldi	r24, 0xFF	; 255
     efa:	f8 01       	movw	r30, r16
     efc:	81 a3       	std	Z+33, r24	; 0x21
     efe:	0f 90       	pop	r0
     f00:	0f be       	out	0x3f, r0	; 63
     f02:	cf 91       	pop	r28
     f04:	1f 91       	pop	r17
     f06:	0f 91       	pop	r16
     f08:	ff 90       	pop	r15
     f0a:	ef 90       	pop	r14
     f0c:	08 95       	ret

00000f0e <xQueueGenericReset>:
     f0e:	cf 93       	push	r28
     f10:	df 93       	push	r29
     f12:	ec 01       	movw	r28, r24
     f14:	0f b6       	in	r0, 0x3f	; 63
     f16:	f8 94       	cli
     f18:	0f 92       	push	r0
     f1a:	e8 81       	ld	r30, Y
     f1c:	f9 81       	ldd	r31, Y+1	; 0x01
     f1e:	8f 8d       	ldd	r24, Y+31	; 0x1f
     f20:	28 a1       	ldd	r18, Y+32	; 0x20
     f22:	90 e0       	ldi	r25, 0x00	; 0
     f24:	30 e0       	ldi	r19, 0x00	; 0
     f26:	82 9f       	mul	r24, r18
     f28:	a0 01       	movw	r20, r0
     f2a:	83 9f       	mul	r24, r19
     f2c:	50 0d       	add	r21, r0
     f2e:	92 9f       	mul	r25, r18
     f30:	50 0d       	add	r21, r0
     f32:	11 24       	eor	r1, r1
     f34:	4e 0f       	add	r20, r30
     f36:	5f 1f       	adc	r21, r31
     f38:	5d 83       	std	Y+5, r21	; 0x05
     f3a:	4c 83       	std	Y+4, r20	; 0x04
     f3c:	1e 8e       	std	Y+30, r1	; 0x1e
     f3e:	fb 83       	std	Y+3, r31	; 0x03
     f40:	ea 83       	std	Y+2, r30	; 0x02
     f42:	01 97       	sbiw	r24, 0x01	; 1
     f44:	82 9f       	mul	r24, r18
     f46:	a0 01       	movw	r20, r0
     f48:	83 9f       	mul	r24, r19
     f4a:	50 0d       	add	r21, r0
     f4c:	92 9f       	mul	r25, r18
     f4e:	50 0d       	add	r21, r0
     f50:	11 24       	eor	r1, r1
     f52:	cf 01       	movw	r24, r30
     f54:	84 0f       	add	r24, r20
     f56:	95 1f       	adc	r25, r21
     f58:	9f 83       	std	Y+7, r25	; 0x07
     f5a:	8e 83       	std	Y+6, r24	; 0x06
     f5c:	8f ef       	ldi	r24, 0xFF	; 255
     f5e:	89 a3       	std	Y+33, r24	; 0x21
     f60:	8a a3       	std	Y+34, r24	; 0x22
     f62:	61 11       	cpse	r22, r1
     f64:	0b c0       	rjmp	.+22     	; 0xf7c <xQueueGenericReset+0x6e>
     f66:	88 85       	ldd	r24, Y+8	; 0x08
     f68:	88 23       	and	r24, r24
     f6a:	71 f0       	breq	.+28     	; 0xf88 <xQueueGenericReset+0x7a>
     f6c:	ce 01       	movw	r24, r28
     f6e:	08 96       	adiw	r24, 0x08	; 8
     f70:	0e 94 1b 11 	call	0x2236	; 0x2236 <xTaskRemoveFromEventList>
     f74:	88 23       	and	r24, r24
     f76:	41 f0       	breq	.+16     	; 0xf88 <xQueueGenericReset+0x7a>
     f78:	31 de       	rcall	.-926    	; 0xbdc <vPortYield>
     f7a:	06 c0       	rjmp	.+12     	; 0xf88 <xQueueGenericReset+0x7a>
     f7c:	ce 01       	movw	r24, r28
     f7e:	08 96       	adiw	r24, 0x08	; 8
     f80:	e5 dc       	rcall	.-1590   	; 0x94c <vListInitialise>
     f82:	ce 01       	movw	r24, r28
     f84:	43 96       	adiw	r24, 0x13	; 19
     f86:	e2 dc       	rcall	.-1596   	; 0x94c <vListInitialise>
     f88:	0f 90       	pop	r0
     f8a:	0f be       	out	0x3f, r0	; 63
     f8c:	81 e0       	ldi	r24, 0x01	; 1
     f8e:	df 91       	pop	r29
     f90:	cf 91       	pop	r28
     f92:	08 95       	ret

00000f94 <xQueueGenericCreate>:
     f94:	ff 92       	push	r15
     f96:	0f 93       	push	r16
     f98:	1f 93       	push	r17
     f9a:	cf 93       	push	r28
     f9c:	df 93       	push	r29
     f9e:	08 2f       	mov	r16, r24
     fa0:	16 2f       	mov	r17, r22
     fa2:	f4 2e       	mov	r15, r20
     fa4:	66 23       	and	r22, r22
     fa6:	b9 f0       	breq	.+46     	; 0xfd6 <xQueueGenericCreate+0x42>
     fa8:	86 9f       	mul	r24, r22
     faa:	c0 01       	movw	r24, r0
     fac:	11 24       	eor	r1, r1
     fae:	85 96       	adiw	r24, 0x25	; 37
     fb0:	e3 db       	rcall	.-2106   	; 0x778 <pvPortMalloc>
     fb2:	ec 01       	movw	r28, r24
     fb4:	00 97       	sbiw	r24, 0x00	; 0
     fb6:	41 f4       	brne	.+16     	; 0xfc8 <xQueueGenericCreate+0x34>
     fb8:	14 c0       	rjmp	.+40     	; 0xfe2 <xQueueGenericCreate+0x4e>
     fba:	0f 8f       	std	Y+31, r16	; 0x1f
     fbc:	18 a3       	std	Y+32, r17	; 0x20
     fbe:	61 e0       	ldi	r22, 0x01	; 1
     fc0:	ce 01       	movw	r24, r28
     fc2:	a5 df       	rcall	.-182    	; 0xf0e <xQueueGenericReset>
     fc4:	fc a2       	std	Y+36, r15	; 0x24
     fc6:	0d c0       	rjmp	.+26     	; 0xfe2 <xQueueGenericCreate+0x4e>
     fc8:	85 96       	adiw	r24, 0x25	; 37
     fca:	99 83       	std	Y+1, r25	; 0x01
     fcc:	88 83       	st	Y, r24
     fce:	f5 cf       	rjmp	.-22     	; 0xfba <xQueueGenericCreate+0x26>
     fd0:	d9 83       	std	Y+1, r29	; 0x01
     fd2:	c8 83       	st	Y, r28
     fd4:	f2 cf       	rjmp	.-28     	; 0xfba <xQueueGenericCreate+0x26>
     fd6:	85 e2       	ldi	r24, 0x25	; 37
     fd8:	90 e0       	ldi	r25, 0x00	; 0
     fda:	ce db       	rcall	.-2148   	; 0x778 <pvPortMalloc>
     fdc:	ec 01       	movw	r28, r24
     fde:	89 2b       	or	r24, r25
     fe0:	b9 f7       	brne	.-18     	; 0xfd0 <xQueueGenericCreate+0x3c>
     fe2:	ce 01       	movw	r24, r28
     fe4:	df 91       	pop	r29
     fe6:	cf 91       	pop	r28
     fe8:	1f 91       	pop	r17
     fea:	0f 91       	pop	r16
     fec:	ff 90       	pop	r15
     fee:	08 95       	ret

00000ff0 <xQueueGenericSend>:
     ff0:	9f 92       	push	r9
     ff2:	af 92       	push	r10
     ff4:	bf 92       	push	r11
     ff6:	cf 92       	push	r12
     ff8:	df 92       	push	r13
     ffa:	ef 92       	push	r14
     ffc:	ff 92       	push	r15
     ffe:	0f 93       	push	r16
    1000:	1f 93       	push	r17
    1002:	cf 93       	push	r28
    1004:	df 93       	push	r29
    1006:	cd b7       	in	r28, 0x3d	; 61
    1008:	de b7       	in	r29, 0x3e	; 62
    100a:	29 97       	sbiw	r28, 0x09	; 9
    100c:	0f b6       	in	r0, 0x3f	; 63
    100e:	f8 94       	cli
    1010:	de bf       	out	0x3e, r29	; 62
    1012:	0f be       	out	0x3f, r0	; 63
    1014:	cd bf       	out	0x3d, r28	; 61
    1016:	7c 01       	movw	r14, r24
    1018:	5b 01       	movw	r10, r22
    101a:	2e 83       	std	Y+6, r18	; 0x06
    101c:	3f 83       	std	Y+7, r19	; 0x07
    101e:	48 87       	std	Y+8, r20	; 0x08
    1020:	59 87       	std	Y+9, r21	; 0x09
    1022:	10 e0       	ldi	r17, 0x00	; 0
    1024:	99 24       	eor	r9, r9
    1026:	93 94       	inc	r9
    1028:	6c 01       	movw	r12, r24
    102a:	88 e0       	ldi	r24, 0x08	; 8
    102c:	c8 0e       	add	r12, r24
    102e:	d1 1c       	adc	r13, r1
    1030:	0f b6       	in	r0, 0x3f	; 63
    1032:	f8 94       	cli
    1034:	0f 92       	push	r0
    1036:	f7 01       	movw	r30, r14
    1038:	96 8d       	ldd	r25, Z+30	; 0x1e
    103a:	87 8d       	ldd	r24, Z+31	; 0x1f
    103c:	98 17       	cp	r25, r24
    103e:	10 f0       	brcs	.+4      	; 0x1044 <xQueueGenericSend+0x54>
    1040:	02 30       	cpi	r16, 0x02	; 2
    1042:	b1 f4       	brne	.+44     	; 0x1070 <xQueueGenericSend+0x80>
    1044:	40 2f       	mov	r20, r16
    1046:	b5 01       	movw	r22, r10
    1048:	c7 01       	movw	r24, r14
    104a:	9b de       	rcall	.-714    	; 0xd82 <prvCopyDataToQueue>
    104c:	f7 01       	movw	r30, r14
    104e:	93 89       	ldd	r25, Z+19	; 0x13
    1050:	99 23       	and	r25, r25
    1052:	41 f0       	breq	.+16     	; 0x1064 <xQueueGenericSend+0x74>
    1054:	c7 01       	movw	r24, r14
    1056:	43 96       	adiw	r24, 0x13	; 19
    1058:	0e 94 1b 11 	call	0x2236	; 0x2236 <xTaskRemoveFromEventList>
    105c:	88 23       	and	r24, r24
    105e:	21 f0       	breq	.+8      	; 0x1068 <xQueueGenericSend+0x78>
    1060:	bd dd       	rcall	.-1158   	; 0xbdc <vPortYield>
    1062:	02 c0       	rjmp	.+4      	; 0x1068 <xQueueGenericSend+0x78>
    1064:	81 11       	cpse	r24, r1
    1066:	ba dd       	rcall	.-1164   	; 0xbdc <vPortYield>
    1068:	0f 90       	pop	r0
    106a:	0f be       	out	0x3f, r0	; 63
    106c:	81 e0       	ldi	r24, 0x01	; 1
    106e:	4e c0       	rjmp	.+156    	; 0x110c <xQueueGenericSend+0x11c>
    1070:	8e 81       	ldd	r24, Y+6	; 0x06
    1072:	9f 81       	ldd	r25, Y+7	; 0x07
    1074:	a8 85       	ldd	r26, Y+8	; 0x08
    1076:	b9 85       	ldd	r27, Y+9	; 0x09
    1078:	89 2b       	or	r24, r25
    107a:	8a 2b       	or	r24, r26
    107c:	8b 2b       	or	r24, r27
    107e:	21 f4       	brne	.+8      	; 0x1088 <xQueueGenericSend+0x98>
    1080:	0f 90       	pop	r0
    1082:	0f be       	out	0x3f, r0	; 63
    1084:	80 e0       	ldi	r24, 0x00	; 0
    1086:	42 c0       	rjmp	.+132    	; 0x110c <xQueueGenericSend+0x11c>
    1088:	11 11       	cpse	r17, r1
    108a:	05 c0       	rjmp	.+10     	; 0x1096 <xQueueGenericSend+0xa6>
    108c:	ce 01       	movw	r24, r28
    108e:	01 96       	adiw	r24, 0x01	; 1
    1090:	0e 94 73 11 	call	0x22e6	; 0x22e6 <vTaskInternalSetTimeOutState>
    1094:	19 2d       	mov	r17, r9
    1096:	0f 90       	pop	r0
    1098:	0f be       	out	0x3f, r0	; 63
    109a:	2c d6       	rcall	.+3160   	; 0x1cf4 <vTaskSuspendAll>
    109c:	0f b6       	in	r0, 0x3f	; 63
    109e:	f8 94       	cli
    10a0:	0f 92       	push	r0
    10a2:	f7 01       	movw	r30, r14
    10a4:	81 a1       	ldd	r24, Z+33	; 0x21
    10a6:	8f 3f       	cpi	r24, 0xFF	; 255
    10a8:	09 f4       	brne	.+2      	; 0x10ac <xQueueGenericSend+0xbc>
    10aa:	11 a2       	std	Z+33, r1	; 0x21
    10ac:	f7 01       	movw	r30, r14
    10ae:	82 a1       	ldd	r24, Z+34	; 0x22
    10b0:	8f 3f       	cpi	r24, 0xFF	; 255
    10b2:	09 f4       	brne	.+2      	; 0x10b6 <xQueueGenericSend+0xc6>
    10b4:	12 a2       	std	Z+34, r1	; 0x22
    10b6:	0f 90       	pop	r0
    10b8:	0f be       	out	0x3f, r0	; 63
    10ba:	be 01       	movw	r22, r28
    10bc:	6a 5f       	subi	r22, 0xFA	; 250
    10be:	7f 4f       	sbci	r23, 0xFF	; 255
    10c0:	ce 01       	movw	r24, r28
    10c2:	01 96       	adiw	r24, 0x01	; 1
    10c4:	0e 94 84 11 	call	0x2308	; 0x2308 <xTaskCheckForTimeOut>
    10c8:	81 11       	cpse	r24, r1
    10ca:	1c c0       	rjmp	.+56     	; 0x1104 <xQueueGenericSend+0x114>
    10cc:	0f b6       	in	r0, 0x3f	; 63
    10ce:	f8 94       	cli
    10d0:	0f 92       	push	r0
    10d2:	f7 01       	movw	r30, r14
    10d4:	96 8d       	ldd	r25, Z+30	; 0x1e
    10d6:	87 8d       	ldd	r24, Z+31	; 0x1f
    10d8:	0f 90       	pop	r0
    10da:	0f be       	out	0x3f, r0	; 63
    10dc:	98 13       	cpse	r25, r24
    10de:	0e c0       	rjmp	.+28     	; 0x10fc <xQueueGenericSend+0x10c>
    10e0:	4e 81       	ldd	r20, Y+6	; 0x06
    10e2:	5f 81       	ldd	r21, Y+7	; 0x07
    10e4:	68 85       	ldd	r22, Y+8	; 0x08
    10e6:	79 85       	ldd	r23, Y+9	; 0x09
    10e8:	c6 01       	movw	r24, r12
    10ea:	0e 94 e4 10 	call	0x21c8	; 0x21c8 <vTaskPlaceOnEventList>
    10ee:	c7 01       	movw	r24, r14
    10f0:	c1 de       	rcall	.-638    	; 0xe74 <prvUnlockQueue>
    10f2:	e9 d6       	rcall	.+3538   	; 0x1ec6 <xTaskResumeAll>
    10f4:	81 11       	cpse	r24, r1
    10f6:	9c cf       	rjmp	.-200    	; 0x1030 <xQueueGenericSend+0x40>
    10f8:	71 dd       	rcall	.-1310   	; 0xbdc <vPortYield>
    10fa:	9a cf       	rjmp	.-204    	; 0x1030 <xQueueGenericSend+0x40>
    10fc:	c7 01       	movw	r24, r14
    10fe:	ba de       	rcall	.-652    	; 0xe74 <prvUnlockQueue>
    1100:	e2 d6       	rcall	.+3524   	; 0x1ec6 <xTaskResumeAll>
    1102:	96 cf       	rjmp	.-212    	; 0x1030 <xQueueGenericSend+0x40>
    1104:	c7 01       	movw	r24, r14
    1106:	b6 de       	rcall	.-660    	; 0xe74 <prvUnlockQueue>
    1108:	de d6       	rcall	.+3516   	; 0x1ec6 <xTaskResumeAll>
    110a:	80 e0       	ldi	r24, 0x00	; 0
    110c:	29 96       	adiw	r28, 0x09	; 9
    110e:	0f b6       	in	r0, 0x3f	; 63
    1110:	f8 94       	cli
    1112:	de bf       	out	0x3e, r29	; 62
    1114:	0f be       	out	0x3f, r0	; 63
    1116:	cd bf       	out	0x3d, r28	; 61
    1118:	df 91       	pop	r29
    111a:	cf 91       	pop	r28
    111c:	1f 91       	pop	r17
    111e:	0f 91       	pop	r16
    1120:	ff 90       	pop	r15
    1122:	ef 90       	pop	r14
    1124:	df 90       	pop	r13
    1126:	cf 90       	pop	r12
    1128:	bf 90       	pop	r11
    112a:	af 90       	pop	r10
    112c:	9f 90       	pop	r9
    112e:	08 95       	ret

00001130 <xQueueCreateMutex>:
    1130:	0f 93       	push	r16
    1132:	cf 93       	push	r28
    1134:	df 93       	push	r29
    1136:	48 2f       	mov	r20, r24
    1138:	60 e0       	ldi	r22, 0x00	; 0
    113a:	81 e0       	ldi	r24, 0x01	; 1
    113c:	2b df       	rcall	.-426    	; 0xf94 <xQueueGenericCreate>
    113e:	ec 01       	movw	r28, r24
    1140:	00 97       	sbiw	r24, 0x00	; 0
    1142:	61 f0       	breq	.+24     	; 0x115c <xQueueCreateMutex+0x2c>
    1144:	1d 82       	std	Y+5, r1	; 0x05
    1146:	1c 82       	std	Y+4, r1	; 0x04
    1148:	19 82       	std	Y+1, r1	; 0x01
    114a:	18 82       	st	Y, r1
    114c:	1e 82       	std	Y+6, r1	; 0x06
    114e:	00 e0       	ldi	r16, 0x00	; 0
    1150:	20 e0       	ldi	r18, 0x00	; 0
    1152:	30 e0       	ldi	r19, 0x00	; 0
    1154:	a9 01       	movw	r20, r18
    1156:	60 e0       	ldi	r22, 0x00	; 0
    1158:	70 e0       	ldi	r23, 0x00	; 0
    115a:	4a df       	rcall	.-364    	; 0xff0 <xQueueGenericSend>
    115c:	ce 01       	movw	r24, r28
    115e:	df 91       	pop	r29
    1160:	cf 91       	pop	r28
    1162:	0f 91       	pop	r16
    1164:	08 95       	ret

00001166 <xQueueGenericSendFromISR>:
    1166:	ef 92       	push	r14
    1168:	ff 92       	push	r15
    116a:	0f 93       	push	r16
    116c:	1f 93       	push	r17
    116e:	cf 93       	push	r28
    1170:	df 93       	push	r29
    1172:	8a 01       	movw	r16, r20
    1174:	fc 01       	movw	r30, r24
    1176:	56 8d       	ldd	r21, Z+30	; 0x1e
    1178:	37 8d       	ldd	r19, Z+31	; 0x1f
    117a:	53 17       	cp	r21, r19
    117c:	10 f0       	brcs	.+4      	; 0x1182 <xQueueGenericSendFromISR+0x1c>
    117e:	22 30       	cpi	r18, 0x02	; 2
    1180:	e9 f4       	brne	.+58     	; 0x11bc <xQueueGenericSendFromISR+0x56>
    1182:	42 2f       	mov	r20, r18
    1184:	78 01       	movw	r14, r16
    1186:	ec 01       	movw	r28, r24
    1188:	1a a1       	ldd	r17, Y+34	; 0x22
    118a:	fb dd       	rcall	.-1034   	; 0xd82 <prvCopyDataToQueue>
    118c:	1f 3f       	cpi	r17, 0xFF	; 255
    118e:	81 f4       	brne	.+32     	; 0x11b0 <xQueueGenericSendFromISR+0x4a>
    1190:	8b 89       	ldd	r24, Y+19	; 0x13
    1192:	88 23       	and	r24, r24
    1194:	a9 f0       	breq	.+42     	; 0x11c0 <xQueueGenericSendFromISR+0x5a>
    1196:	ce 01       	movw	r24, r28
    1198:	43 96       	adiw	r24, 0x13	; 19
    119a:	0e 94 1b 11 	call	0x2236	; 0x2236 <xTaskRemoveFromEventList>
    119e:	88 23       	and	r24, r24
    11a0:	89 f0       	breq	.+34     	; 0x11c4 <xQueueGenericSendFromISR+0x5e>
    11a2:	e1 14       	cp	r14, r1
    11a4:	f1 04       	cpc	r15, r1
    11a6:	81 f0       	breq	.+32     	; 0x11c8 <xQueueGenericSendFromISR+0x62>
    11a8:	81 e0       	ldi	r24, 0x01	; 1
    11aa:	f7 01       	movw	r30, r14
    11ac:	80 83       	st	Z, r24
    11ae:	0d c0       	rjmp	.+26     	; 0x11ca <xQueueGenericSendFromISR+0x64>
    11b0:	ff 24       	eor	r15, r15
    11b2:	f3 94       	inc	r15
    11b4:	f1 0e       	add	r15, r17
    11b6:	fa a2       	std	Y+34, r15	; 0x22
    11b8:	81 e0       	ldi	r24, 0x01	; 1
    11ba:	07 c0       	rjmp	.+14     	; 0x11ca <xQueueGenericSendFromISR+0x64>
    11bc:	80 e0       	ldi	r24, 0x00	; 0
    11be:	05 c0       	rjmp	.+10     	; 0x11ca <xQueueGenericSendFromISR+0x64>
    11c0:	81 e0       	ldi	r24, 0x01	; 1
    11c2:	03 c0       	rjmp	.+6      	; 0x11ca <xQueueGenericSendFromISR+0x64>
    11c4:	81 e0       	ldi	r24, 0x01	; 1
    11c6:	01 c0       	rjmp	.+2      	; 0x11ca <xQueueGenericSendFromISR+0x64>
    11c8:	81 e0       	ldi	r24, 0x01	; 1
    11ca:	df 91       	pop	r29
    11cc:	cf 91       	pop	r28
    11ce:	1f 91       	pop	r17
    11d0:	0f 91       	pop	r16
    11d2:	ff 90       	pop	r15
    11d4:	ef 90       	pop	r14
    11d6:	08 95       	ret

000011d8 <xQueueReceive>:
    11d8:	9f 92       	push	r9
    11da:	af 92       	push	r10
    11dc:	bf 92       	push	r11
    11de:	cf 92       	push	r12
    11e0:	df 92       	push	r13
    11e2:	ef 92       	push	r14
    11e4:	ff 92       	push	r15
    11e6:	0f 93       	push	r16
    11e8:	1f 93       	push	r17
    11ea:	cf 93       	push	r28
    11ec:	df 93       	push	r29
    11ee:	cd b7       	in	r28, 0x3d	; 61
    11f0:	de b7       	in	r29, 0x3e	; 62
    11f2:	29 97       	sbiw	r28, 0x09	; 9
    11f4:	0f b6       	in	r0, 0x3f	; 63
    11f6:	f8 94       	cli
    11f8:	de bf       	out	0x3e, r29	; 62
    11fa:	0f be       	out	0x3f, r0	; 63
    11fc:	cd bf       	out	0x3d, r28	; 61
    11fe:	8c 01       	movw	r16, r24
    1200:	5b 01       	movw	r10, r22
    1202:	2e 83       	std	Y+6, r18	; 0x06
    1204:	3f 83       	std	Y+7, r19	; 0x07
    1206:	48 87       	std	Y+8, r20	; 0x08
    1208:	59 87       	std	Y+9, r21	; 0x09
    120a:	e1 2c       	mov	r14, r1
    120c:	99 24       	eor	r9, r9
    120e:	93 94       	inc	r9
    1210:	6c 01       	movw	r12, r24
    1212:	83 e1       	ldi	r24, 0x13	; 19
    1214:	c8 0e       	add	r12, r24
    1216:	d1 1c       	adc	r13, r1
    1218:	0f b6       	in	r0, 0x3f	; 63
    121a:	f8 94       	cli
    121c:	0f 92       	push	r0
    121e:	f8 01       	movw	r30, r16
    1220:	f6 8c       	ldd	r15, Z+30	; 0x1e
    1222:	ff 20       	and	r15, r15
    1224:	91 f0       	breq	.+36     	; 0x124a <xQueueReceive+0x72>
    1226:	b5 01       	movw	r22, r10
    1228:	c8 01       	movw	r24, r16
    122a:	0a de       	rcall	.-1004   	; 0xe40 <prvCopyDataFromQueue>
    122c:	fa 94       	dec	r15
    122e:	f8 01       	movw	r30, r16
    1230:	f6 8e       	std	Z+30, r15	; 0x1e
    1232:	80 85       	ldd	r24, Z+8	; 0x08
    1234:	88 23       	and	r24, r24
    1236:	29 f0       	breq	.+10     	; 0x1242 <xQueueReceive+0x6a>
    1238:	c8 01       	movw	r24, r16
    123a:	08 96       	adiw	r24, 0x08	; 8
    123c:	fc d7       	rcall	.+4088   	; 0x2236 <xTaskRemoveFromEventList>
    123e:	81 11       	cpse	r24, r1
    1240:	cd dc       	rcall	.-1638   	; 0xbdc <vPortYield>
    1242:	0f 90       	pop	r0
    1244:	0f be       	out	0x3f, r0	; 63
    1246:	81 e0       	ldi	r24, 0x01	; 1
    1248:	4c c0       	rjmp	.+152    	; 0x12e2 <xQueueReceive+0x10a>
    124a:	8e 81       	ldd	r24, Y+6	; 0x06
    124c:	9f 81       	ldd	r25, Y+7	; 0x07
    124e:	a8 85       	ldd	r26, Y+8	; 0x08
    1250:	b9 85       	ldd	r27, Y+9	; 0x09
    1252:	89 2b       	or	r24, r25
    1254:	8a 2b       	or	r24, r26
    1256:	8b 2b       	or	r24, r27
    1258:	21 f4       	brne	.+8      	; 0x1262 <xQueueReceive+0x8a>
    125a:	0f 90       	pop	r0
    125c:	0f be       	out	0x3f, r0	; 63
    125e:	80 e0       	ldi	r24, 0x00	; 0
    1260:	40 c0       	rjmp	.+128    	; 0x12e2 <xQueueReceive+0x10a>
    1262:	e1 10       	cpse	r14, r1
    1264:	05 c0       	rjmp	.+10     	; 0x1270 <xQueueReceive+0x98>
    1266:	ce 01       	movw	r24, r28
    1268:	01 96       	adiw	r24, 0x01	; 1
    126a:	0e 94 73 11 	call	0x22e6	; 0x22e6 <vTaskInternalSetTimeOutState>
    126e:	e9 2c       	mov	r14, r9
    1270:	0f 90       	pop	r0
    1272:	0f be       	out	0x3f, r0	; 63
    1274:	3f d5       	rcall	.+2686   	; 0x1cf4 <vTaskSuspendAll>
    1276:	0f b6       	in	r0, 0x3f	; 63
    1278:	f8 94       	cli
    127a:	0f 92       	push	r0
    127c:	f8 01       	movw	r30, r16
    127e:	81 a1       	ldd	r24, Z+33	; 0x21
    1280:	8f 3f       	cpi	r24, 0xFF	; 255
    1282:	09 f4       	brne	.+2      	; 0x1286 <xQueueReceive+0xae>
    1284:	11 a2       	std	Z+33, r1	; 0x21
    1286:	f8 01       	movw	r30, r16
    1288:	82 a1       	ldd	r24, Z+34	; 0x22
    128a:	8f 3f       	cpi	r24, 0xFF	; 255
    128c:	09 f4       	brne	.+2      	; 0x1290 <xQueueReceive+0xb8>
    128e:	12 a2       	std	Z+34, r1	; 0x22
    1290:	0f 90       	pop	r0
    1292:	0f be       	out	0x3f, r0	; 63
    1294:	be 01       	movw	r22, r28
    1296:	6a 5f       	subi	r22, 0xFA	; 250
    1298:	7f 4f       	sbci	r23, 0xFF	; 255
    129a:	ce 01       	movw	r24, r28
    129c:	01 96       	adiw	r24, 0x01	; 1
    129e:	0e 94 84 11 	call	0x2308	; 0x2308 <xTaskCheckForTimeOut>
    12a2:	81 11       	cpse	r24, r1
    12a4:	15 c0       	rjmp	.+42     	; 0x12d0 <xQueueReceive+0xf8>
    12a6:	c8 01       	movw	r24, r16
    12a8:	61 dd       	rcall	.-1342   	; 0xd6c <prvIsQueueEmpty>
    12aa:	88 23       	and	r24, r24
    12ac:	69 f0       	breq	.+26     	; 0x12c8 <xQueueReceive+0xf0>
    12ae:	4e 81       	ldd	r20, Y+6	; 0x06
    12b0:	5f 81       	ldd	r21, Y+7	; 0x07
    12b2:	68 85       	ldd	r22, Y+8	; 0x08
    12b4:	79 85       	ldd	r23, Y+9	; 0x09
    12b6:	c6 01       	movw	r24, r12
    12b8:	87 d7       	rcall	.+3854   	; 0x21c8 <vTaskPlaceOnEventList>
    12ba:	c8 01       	movw	r24, r16
    12bc:	db dd       	rcall	.-1098   	; 0xe74 <prvUnlockQueue>
    12be:	03 d6       	rcall	.+3078   	; 0x1ec6 <xTaskResumeAll>
    12c0:	81 11       	cpse	r24, r1
    12c2:	aa cf       	rjmp	.-172    	; 0x1218 <xQueueReceive+0x40>
    12c4:	8b dc       	rcall	.-1770   	; 0xbdc <vPortYield>
    12c6:	a8 cf       	rjmp	.-176    	; 0x1218 <xQueueReceive+0x40>
    12c8:	c8 01       	movw	r24, r16
    12ca:	d4 dd       	rcall	.-1112   	; 0xe74 <prvUnlockQueue>
    12cc:	fc d5       	rcall	.+3064   	; 0x1ec6 <xTaskResumeAll>
    12ce:	a4 cf       	rjmp	.-184    	; 0x1218 <xQueueReceive+0x40>
    12d0:	c8 01       	movw	r24, r16
    12d2:	d0 dd       	rcall	.-1120   	; 0xe74 <prvUnlockQueue>
    12d4:	f8 d5       	rcall	.+3056   	; 0x1ec6 <xTaskResumeAll>
    12d6:	c8 01       	movw	r24, r16
    12d8:	49 dd       	rcall	.-1390   	; 0xd6c <prvIsQueueEmpty>
    12da:	88 23       	and	r24, r24
    12dc:	09 f4       	brne	.+2      	; 0x12e0 <xQueueReceive+0x108>
    12de:	9c cf       	rjmp	.-200    	; 0x1218 <xQueueReceive+0x40>
    12e0:	80 e0       	ldi	r24, 0x00	; 0
    12e2:	29 96       	adiw	r28, 0x09	; 9
    12e4:	0f b6       	in	r0, 0x3f	; 63
    12e6:	f8 94       	cli
    12e8:	de bf       	out	0x3e, r29	; 62
    12ea:	0f be       	out	0x3f, r0	; 63
    12ec:	cd bf       	out	0x3d, r28	; 61
    12ee:	df 91       	pop	r29
    12f0:	cf 91       	pop	r28
    12f2:	1f 91       	pop	r17
    12f4:	0f 91       	pop	r16
    12f6:	ff 90       	pop	r15
    12f8:	ef 90       	pop	r14
    12fa:	df 90       	pop	r13
    12fc:	cf 90       	pop	r12
    12fe:	bf 90       	pop	r11
    1300:	af 90       	pop	r10
    1302:	9f 90       	pop	r9
    1304:	08 95       	ret

00001306 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
    {
    1306:	cf 93       	push	r28
    1308:	df 93       	push	r29
    130a:	ec 01       	movw	r28, r24
        will not actually cause the task to block, just place it on a blocked
        list.  It will not block until the scheduler is unlocked - at which
        time a yield will be performed.  If an item is added to the queue while
        the queue is locked, and the calling task blocks on the queue, then the
        calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
    130c:	0f b6       	in	r0, 0x3f	; 63
    130e:	f8 94       	cli
    1310:	0f 92       	push	r0
    1312:	89 a1       	ldd	r24, Y+33	; 0x21
    1314:	8f 3f       	cpi	r24, 0xFF	; 255
    1316:	09 f4       	brne	.+2      	; 0x131a <vQueueWaitForMessageRestricted+0x14>
    1318:	19 a2       	std	Y+33, r1	; 0x21
    131a:	8a a1       	ldd	r24, Y+34	; 0x22
    131c:	8f 3f       	cpi	r24, 0xFF	; 255
    131e:	09 f4       	brne	.+2      	; 0x1322 <vQueueWaitForMessageRestricted+0x1c>
    1320:	1a a2       	std	Y+34, r1	; 0x22
    1322:	0f 90       	pop	r0
    1324:	0f be       	out	0x3f, r0	; 63
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    1326:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1328:	81 11       	cpse	r24, r1
    132a:	03 c0       	rjmp	.+6      	; 0x1332 <vQueueWaitForMessageRestricted+0x2c>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    132c:	ce 01       	movw	r24, r28
    132e:	43 96       	adiw	r24, 0x13	; 19
    1330:	62 d7       	rcall	.+3780   	; 0x21f6 <vTaskPlaceOnEventListRestricted>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
        prvUnlockQueue( pxQueue );
    1332:	ce 01       	movw	r24, r28
    1334:	9f dd       	rcall	.-1218   	; 0xe74 <prvUnlockQueue>
    }
    1336:	df 91       	pop	r29
    1338:	cf 91       	pop	r28
    133a:	08 95       	ret

0000133c <prvBytesInBuffer>:

    configASSERT( pxStreamBuffer );

    xReturn = prvBytesInBuffer( pxStreamBuffer );
    return xReturn;
}
    133c:	fc 01       	movw	r30, r24
    133e:	44 81       	ldd	r20, Z+4	; 0x04
    1340:	55 81       	ldd	r21, Z+5	; 0x05
    1342:	22 81       	ldd	r18, Z+2	; 0x02
    1344:	33 81       	ldd	r19, Z+3	; 0x03
    1346:	24 0f       	add	r18, r20
    1348:	35 1f       	adc	r19, r21
    134a:	80 81       	ld	r24, Z
    134c:	91 81       	ldd	r25, Z+1	; 0x01
    134e:	b9 01       	movw	r22, r18
    1350:	68 1b       	sub	r22, r24
    1352:	79 0b       	sbc	r23, r25
    1354:	cb 01       	movw	r24, r22
    1356:	64 17       	cp	r22, r20
    1358:	75 07       	cpc	r23, r21
    135a:	10 f0       	brcs	.+4      	; 0x1360 <prvBytesInBuffer+0x24>
    135c:	84 1b       	sub	r24, r20
    135e:	95 0b       	sbc	r25, r21
    1360:	08 95       	ret

00001362 <prvWriteBytesToBuffer>:
    1362:	af 92       	push	r10
    1364:	bf 92       	push	r11
    1366:	cf 92       	push	r12
    1368:	df 92       	push	r13
    136a:	ef 92       	push	r14
    136c:	ff 92       	push	r15
    136e:	0f 93       	push	r16
    1370:	1f 93       	push	r17
    1372:	cf 93       	push	r28
    1374:	df 93       	push	r29
    1376:	6c 01       	movw	r12, r24
    1378:	5b 01       	movw	r10, r22
    137a:	7a 01       	movw	r14, r20
    137c:	fc 01       	movw	r30, r24
    137e:	c2 81       	ldd	r28, Z+2	; 0x02
    1380:	d3 81       	ldd	r29, Z+3	; 0x03
    1382:	04 81       	ldd	r16, Z+4	; 0x04
    1384:	15 81       	ldd	r17, Z+5	; 0x05
    1386:	0c 1b       	sub	r16, r28
    1388:	1d 0b       	sbc	r17, r29
    138a:	40 17       	cp	r20, r16
    138c:	51 07       	cpc	r21, r17
    138e:	08 f4       	brcc	.+2      	; 0x1392 <prvWriteBytesToBuffer+0x30>
    1390:	8a 01       	movw	r16, r20
    1392:	f6 01       	movw	r30, r12
    1394:	84 85       	ldd	r24, Z+12	; 0x0c
    1396:	95 85       	ldd	r25, Z+13	; 0x0d
    1398:	a8 01       	movw	r20, r16
    139a:	b5 01       	movw	r22, r10
    139c:	8c 0f       	add	r24, r28
    139e:	9d 1f       	adc	r25, r29
    13a0:	0e 94 b8 23 	call	0x4770	; 0x4770 <memcpy>
    13a4:	0e 15       	cp	r16, r14
    13a6:	1f 05       	cpc	r17, r15
    13a8:	58 f4       	brcc	.+22     	; 0x13c0 <prvWriteBytesToBuffer+0x5e>
    13aa:	a7 01       	movw	r20, r14
    13ac:	40 1b       	sub	r20, r16
    13ae:	51 0b       	sbc	r21, r17
    13b0:	b5 01       	movw	r22, r10
    13b2:	60 0f       	add	r22, r16
    13b4:	71 1f       	adc	r23, r17
    13b6:	f6 01       	movw	r30, r12
    13b8:	84 85       	ldd	r24, Z+12	; 0x0c
    13ba:	95 85       	ldd	r25, Z+13	; 0x0d
    13bc:	0e 94 b8 23 	call	0x4770	; 0x4770 <memcpy>
    13c0:	ce 01       	movw	r24, r28
    13c2:	8e 0d       	add	r24, r14
    13c4:	9f 1d       	adc	r25, r15
    13c6:	f6 01       	movw	r30, r12
    13c8:	24 81       	ldd	r18, Z+4	; 0x04
    13ca:	35 81       	ldd	r19, Z+5	; 0x05
    13cc:	82 17       	cp	r24, r18
    13ce:	93 07       	cpc	r25, r19
    13d0:	10 f0       	brcs	.+4      	; 0x13d6 <prvWriteBytesToBuffer+0x74>
    13d2:	82 1b       	sub	r24, r18
    13d4:	93 0b       	sbc	r25, r19
    13d6:	f6 01       	movw	r30, r12
    13d8:	93 83       	std	Z+3, r25	; 0x03
    13da:	82 83       	std	Z+2, r24	; 0x02
    13dc:	c7 01       	movw	r24, r14
    13de:	df 91       	pop	r29
    13e0:	cf 91       	pop	r28
    13e2:	1f 91       	pop	r17
    13e4:	0f 91       	pop	r16
    13e6:	ff 90       	pop	r15
    13e8:	ef 90       	pop	r14
    13ea:	df 90       	pop	r13
    13ec:	cf 90       	pop	r12
    13ee:	bf 90       	pop	r11
    13f0:	af 90       	pop	r10
    13f2:	08 95       	ret

000013f4 <prvWriteMessageToBuffer>:
    13f4:	cf 92       	push	r12
    13f6:	df 92       	push	r13
    13f8:	ef 92       	push	r14
    13fa:	ff 92       	push	r15
    13fc:	0f 93       	push	r16
    13fe:	1f 93       	push	r17
    1400:	cf 93       	push	r28
    1402:	df 93       	push	r29
    1404:	1f 92       	push	r1
    1406:	1f 92       	push	r1
    1408:	cd b7       	in	r28, 0x3d	; 61
    140a:	de b7       	in	r29, 0x3e	; 62
    140c:	5a 83       	std	Y+2, r21	; 0x02
    140e:	49 83       	std	Y+1, r20	; 0x01
    1410:	21 15       	cp	r18, r1
    1412:	31 05       	cpc	r19, r1
    1414:	c9 f0       	breq	.+50     	; 0x1448 <prvWriteMessageToBuffer+0x54>
    1416:	6b 01       	movw	r12, r22
    1418:	7c 01       	movw	r14, r24
    141a:	fc 01       	movw	r30, r24
    141c:	86 85       	ldd	r24, Z+14	; 0x0e
    141e:	80 fd       	sbrc	r24, 0
    1420:	08 c0       	rjmp	.+16     	; 0x1432 <prvWriteMessageToBuffer+0x3e>
    1422:	ca 01       	movw	r24, r20
    1424:	24 17       	cp	r18, r20
    1426:	35 07       	cpc	r19, r21
    1428:	08 f4       	brcc	.+2      	; 0x142c <prvWriteMessageToBuffer+0x38>
    142a:	c9 01       	movw	r24, r18
    142c:	9a 83       	std	Y+2, r25	; 0x02
    142e:	89 83       	std	Y+1, r24	; 0x01
    1430:	11 c0       	rjmp	.+34     	; 0x1454 <prvWriteMessageToBuffer+0x60>
    1432:	20 17       	cp	r18, r16
    1434:	31 07       	cpc	r19, r17
    1436:	58 f0       	brcs	.+22     	; 0x144e <prvWriteMessageToBuffer+0x5a>
    1438:	42 e0       	ldi	r20, 0x02	; 2
    143a:	50 e0       	ldi	r21, 0x00	; 0
    143c:	be 01       	movw	r22, r28
    143e:	6f 5f       	subi	r22, 0xFF	; 255
    1440:	7f 4f       	sbci	r23, 0xFF	; 255
    1442:	c7 01       	movw	r24, r14
    1444:	8e df       	rcall	.-228    	; 0x1362 <prvWriteBytesToBuffer>
    1446:	06 c0       	rjmp	.+12     	; 0x1454 <prvWriteMessageToBuffer+0x60>
    1448:	80 e0       	ldi	r24, 0x00	; 0
    144a:	90 e0       	ldi	r25, 0x00	; 0
    144c:	08 c0       	rjmp	.+16     	; 0x145e <prvWriteMessageToBuffer+0x6a>
    144e:	80 e0       	ldi	r24, 0x00	; 0
    1450:	90 e0       	ldi	r25, 0x00	; 0
    1452:	05 c0       	rjmp	.+10     	; 0x145e <prvWriteMessageToBuffer+0x6a>
    1454:	49 81       	ldd	r20, Y+1	; 0x01
    1456:	5a 81       	ldd	r21, Y+2	; 0x02
    1458:	b6 01       	movw	r22, r12
    145a:	c7 01       	movw	r24, r14
    145c:	82 df       	rcall	.-252    	; 0x1362 <prvWriteBytesToBuffer>
    145e:	0f 90       	pop	r0
    1460:	0f 90       	pop	r0
    1462:	df 91       	pop	r29
    1464:	cf 91       	pop	r28
    1466:	1f 91       	pop	r17
    1468:	0f 91       	pop	r16
    146a:	ff 90       	pop	r15
    146c:	ef 90       	pop	r14
    146e:	df 90       	pop	r13
    1470:	cf 90       	pop	r12
    1472:	08 95       	ret

00001474 <prvReadBytesFromBuffer>:
    1474:	af 92       	push	r10
    1476:	bf 92       	push	r11
    1478:	cf 92       	push	r12
    147a:	df 92       	push	r13
    147c:	ef 92       	push	r14
    147e:	ff 92       	push	r15
    1480:	0f 93       	push	r16
    1482:	1f 93       	push	r17
    1484:	cf 93       	push	r28
    1486:	df 93       	push	r29
    1488:	7c 01       	movw	r14, r24
    148a:	5b 01       	movw	r10, r22
    148c:	e9 01       	movw	r28, r18
    148e:	42 17       	cp	r20, r18
    1490:	53 07       	cpc	r21, r19
    1492:	08 f4       	brcc	.+2      	; 0x1496 <prvReadBytesFromBuffer+0x22>
    1494:	ea 01       	movw	r28, r20
    1496:	20 97       	sbiw	r28, 0x00	; 0
    1498:	79 f1       	breq	.+94     	; 0x14f8 <prvReadBytesFromBuffer+0x84>
    149a:	f7 01       	movw	r30, r14
    149c:	00 81       	ld	r16, Z
    149e:	11 81       	ldd	r17, Z+1	; 0x01
    14a0:	c4 80       	ldd	r12, Z+4	; 0x04
    14a2:	d5 80       	ldd	r13, Z+5	; 0x05
    14a4:	c0 1a       	sub	r12, r16
    14a6:	d1 0a       	sbc	r13, r17
    14a8:	cc 15       	cp	r28, r12
    14aa:	dd 05       	cpc	r29, r13
    14ac:	08 f4       	brcc	.+2      	; 0x14b0 <prvReadBytesFromBuffer+0x3c>
    14ae:	6e 01       	movw	r12, r28
    14b0:	f7 01       	movw	r30, r14
    14b2:	64 85       	ldd	r22, Z+12	; 0x0c
    14b4:	75 85       	ldd	r23, Z+13	; 0x0d
    14b6:	60 0f       	add	r22, r16
    14b8:	71 1f       	adc	r23, r17
    14ba:	a6 01       	movw	r20, r12
    14bc:	c5 01       	movw	r24, r10
    14be:	0e 94 b8 23 	call	0x4770	; 0x4770 <memcpy>
    14c2:	cc 16       	cp	r12, r28
    14c4:	dd 06       	cpc	r13, r29
    14c6:	58 f4       	brcc	.+22     	; 0x14de <prvReadBytesFromBuffer+0x6a>
    14c8:	ae 01       	movw	r20, r28
    14ca:	4c 19       	sub	r20, r12
    14cc:	5d 09       	sbc	r21, r13
    14ce:	f7 01       	movw	r30, r14
    14d0:	64 85       	ldd	r22, Z+12	; 0x0c
    14d2:	75 85       	ldd	r23, Z+13	; 0x0d
    14d4:	c5 01       	movw	r24, r10
    14d6:	8c 0d       	add	r24, r12
    14d8:	9d 1d       	adc	r25, r13
    14da:	0e 94 b8 23 	call	0x4770	; 0x4770 <memcpy>
    14de:	0c 0f       	add	r16, r28
    14e0:	1d 1f       	adc	r17, r29
    14e2:	f7 01       	movw	r30, r14
    14e4:	84 81       	ldd	r24, Z+4	; 0x04
    14e6:	95 81       	ldd	r25, Z+5	; 0x05
    14e8:	08 17       	cp	r16, r24
    14ea:	19 07       	cpc	r17, r25
    14ec:	10 f0       	brcs	.+4      	; 0x14f2 <prvReadBytesFromBuffer+0x7e>
    14ee:	08 1b       	sub	r16, r24
    14f0:	19 0b       	sbc	r17, r25
    14f2:	f7 01       	movw	r30, r14
    14f4:	11 83       	std	Z+1, r17	; 0x01
    14f6:	00 83       	st	Z, r16
    14f8:	ce 01       	movw	r24, r28
    14fa:	df 91       	pop	r29
    14fc:	cf 91       	pop	r28
    14fe:	1f 91       	pop	r17
    1500:	0f 91       	pop	r16
    1502:	ff 90       	pop	r15
    1504:	ef 90       	pop	r14
    1506:	df 90       	pop	r13
    1508:	cf 90       	pop	r12
    150a:	bf 90       	pop	r11
    150c:	af 90       	pop	r10
    150e:	08 95       	ret

00001510 <xStreamBufferGenericCreate>:
    1510:	ef 92       	push	r14
    1512:	ff 92       	push	r15
    1514:	1f 93       	push	r17
    1516:	cf 93       	push	r28
    1518:	df 93       	push	r29
    151a:	eb 01       	movw	r28, r22
    151c:	11 e0       	ldi	r17, 0x01	; 1
    151e:	41 30       	cpi	r20, 0x01	; 1
    1520:	09 f0       	breq	.+2      	; 0x1524 <xStreamBufferGenericCreate+0x14>
    1522:	10 e0       	ldi	r17, 0x00	; 0
    1524:	20 97       	sbiw	r28, 0x00	; 0
    1526:	11 f4       	brne	.+4      	; 0x152c <xStreamBufferGenericCreate+0x1c>
    1528:	c1 e0       	ldi	r28, 0x01	; 1
    152a:	d0 e0       	ldi	r29, 0x00	; 0
    152c:	7c 01       	movw	r14, r24
    152e:	2f ef       	ldi	r18, 0xFF	; 255
    1530:	e2 1a       	sub	r14, r18
    1532:	f2 0a       	sbc	r15, r18
    1534:	41 96       	adiw	r24, 0x11	; 17
    1536:	20 d9       	rcall	.-3520   	; 0x778 <pvPortMalloc>
    1538:	00 97       	sbiw	r24, 0x00	; 0
    153a:	81 f0       	breq	.+32     	; 0x155c <xStreamBufferGenericCreate+0x4c>
    153c:	20 e1       	ldi	r18, 0x10	; 16
    153e:	fc 01       	movw	r30, r24
    1540:	11 92       	st	Z+, r1
    1542:	2a 95       	dec	r18
    1544:	e9 f7       	brne	.-6      	; 0x1540 <xStreamBufferGenericCreate+0x30>
    1546:	9c 01       	movw	r18, r24
    1548:	20 5f       	subi	r18, 0xF0	; 240
    154a:	3f 4f       	sbci	r19, 0xFF	; 255
    154c:	fc 01       	movw	r30, r24
    154e:	35 87       	std	Z+13, r19	; 0x0d
    1550:	24 87       	std	Z+12, r18	; 0x0c
    1552:	f5 82       	std	Z+5, r15	; 0x05
    1554:	e4 82       	std	Z+4, r14	; 0x04
    1556:	d7 83       	std	Z+7, r29	; 0x07
    1558:	c6 83       	std	Z+6, r28	; 0x06
    155a:	16 87       	std	Z+14, r17	; 0x0e
    155c:	df 91       	pop	r29
    155e:	cf 91       	pop	r28
    1560:	1f 91       	pop	r17
    1562:	ff 90       	pop	r15
    1564:	ef 90       	pop	r14
    1566:	08 95       	ret

00001568 <xStreamBufferReset>:
    1568:	cf 93       	push	r28
    156a:	df 93       	push	r29
    156c:	fc 01       	movw	r30, r24
    156e:	27 85       	ldd	r18, Z+15	; 0x0f
    1570:	0f b6       	in	r0, 0x3f	; 63
    1572:	f8 94       	cli
    1574:	0f 92       	push	r0
    1576:	80 85       	ldd	r24, Z+8	; 0x08
    1578:	91 85       	ldd	r25, Z+9	; 0x09
    157a:	89 2b       	or	r24, r25
    157c:	d1 f4       	brne	.+52     	; 0x15b2 <xStreamBufferReset+0x4a>
    157e:	82 85       	ldd	r24, Z+10	; 0x0a
    1580:	93 85       	ldd	r25, Z+11	; 0x0b
    1582:	89 2b       	or	r24, r25
    1584:	c1 f4       	brne	.+48     	; 0x15b6 <xStreamBufferReset+0x4e>
    1586:	86 85       	ldd	r24, Z+14	; 0x0e
    1588:	46 81       	ldd	r20, Z+6	; 0x06
    158a:	57 81       	ldd	r21, Z+7	; 0x07
    158c:	64 81       	ldd	r22, Z+4	; 0x04
    158e:	75 81       	ldd	r23, Z+5	; 0x05
    1590:	a4 85       	ldd	r26, Z+12	; 0x0c
    1592:	b5 85       	ldd	r27, Z+13	; 0x0d
    1594:	90 e1       	ldi	r25, 0x10	; 16
    1596:	ef 01       	movw	r28, r30
    1598:	19 92       	st	Y+, r1
    159a:	9a 95       	dec	r25
    159c:	e9 f7       	brne	.-6      	; 0x1598 <xStreamBufferReset+0x30>
    159e:	b5 87       	std	Z+13, r27	; 0x0d
    15a0:	a4 87       	std	Z+12, r26	; 0x0c
    15a2:	75 83       	std	Z+5, r23	; 0x05
    15a4:	64 83       	std	Z+4, r22	; 0x04
    15a6:	57 83       	std	Z+7, r21	; 0x07
    15a8:	46 83       	std	Z+6, r20	; 0x06
    15aa:	86 87       	std	Z+14, r24	; 0x0e
    15ac:	27 87       	std	Z+15, r18	; 0x0f
    15ae:	81 e0       	ldi	r24, 0x01	; 1
    15b0:	03 c0       	rjmp	.+6      	; 0x15b8 <xStreamBufferReset+0x50>
    15b2:	80 e0       	ldi	r24, 0x00	; 0
    15b4:	01 c0       	rjmp	.+2      	; 0x15b8 <xStreamBufferReset+0x50>
    15b6:	80 e0       	ldi	r24, 0x00	; 0
    15b8:	0f 90       	pop	r0
    15ba:	0f be       	out	0x3f, r0	; 63
    15bc:	df 91       	pop	r29
    15be:	cf 91       	pop	r28
    15c0:	08 95       	ret

000015c2 <xStreamBufferSpacesAvailable>:
    15c2:	fc 01       	movw	r30, r24
    15c4:	24 81       	ldd	r18, Z+4	; 0x04
    15c6:	35 81       	ldd	r19, Z+5	; 0x05
    15c8:	80 81       	ld	r24, Z
    15ca:	91 81       	ldd	r25, Z+1	; 0x01
    15cc:	42 81       	ldd	r20, Z+2	; 0x02
    15ce:	53 81       	ldd	r21, Z+3	; 0x03
    15d0:	82 0f       	add	r24, r18
    15d2:	93 1f       	adc	r25, r19
    15d4:	01 97       	sbiw	r24, 0x01	; 1
    15d6:	84 1b       	sub	r24, r20
    15d8:	95 0b       	sbc	r25, r21
    15da:	82 17       	cp	r24, r18
    15dc:	93 07       	cpc	r25, r19
    15de:	10 f0       	brcs	.+4      	; 0x15e4 <xStreamBufferSpacesAvailable+0x22>
    15e0:	82 1b       	sub	r24, r18
    15e2:	93 0b       	sbc	r25, r19
    15e4:	08 95       	ret

000015e6 <xStreamBufferSend>:

size_t xStreamBufferSend( StreamBufferHandle_t xStreamBuffer,
                          const void *pvTxData,
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    15e6:	2f 92       	push	r2
    15e8:	3f 92       	push	r3
    15ea:	4f 92       	push	r4
    15ec:	5f 92       	push	r5
    15ee:	6f 92       	push	r6
    15f0:	7f 92       	push	r7
    15f2:	8f 92       	push	r8
    15f4:	9f 92       	push	r9
    15f6:	af 92       	push	r10
    15f8:	bf 92       	push	r11
    15fa:	cf 92       	push	r12
    15fc:	df 92       	push	r13
    15fe:	ef 92       	push	r14
    1600:	ff 92       	push	r15
    1602:	0f 93       	push	r16
    1604:	1f 93       	push	r17
    1606:	cf 93       	push	r28
    1608:	df 93       	push	r29
    160a:	cd b7       	in	r28, 0x3d	; 61
    160c:	de b7       	in	r29, 0x3e	; 62
    160e:	29 97       	sbiw	r28, 0x09	; 9
    1610:	0f b6       	in	r0, 0x3f	; 63
    1612:	f8 94       	cli
    1614:	de bf       	out	0x3e, r29	; 62
    1616:	0f be       	out	0x3f, r0	; 63
    1618:	cd bf       	out	0x3d, r28	; 61
    161a:	5c 01       	movw	r10, r24
    161c:	1b 01       	movw	r2, r22
    161e:	2a 01       	movw	r4, r20
    1620:	0e 83       	std	Y+6, r16	; 0x06
    1622:	1f 83       	std	Y+7, r17	; 0x07
    1624:	28 87       	std	Y+8, r18	; 0x08
    1626:	39 87       	std	Y+9, r19	; 0x09

    /* This send function is used to write to both message buffers and stream
    buffers.  If this is a message buffer then the space needed must be
    increased by the amount of bytes needed to store the length of the
    message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    1628:	fc 01       	movw	r30, r24
    162a:	86 85       	ldd	r24, Z+14	; 0x0e
    162c:	80 ff       	sbrs	r24, 0
    162e:	05 c0       	rjmp	.+10     	; 0x163a <xStreamBufferSend+0x54>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    1630:	3a 01       	movw	r6, r20
    1632:	f2 e0       	ldi	r31, 0x02	; 2
    1634:	6f 0e       	add	r6, r31
    1636:	71 1c       	adc	r7, r1
    1638:	01 c0       	rjmp	.+2      	; 0x163c <xStreamBufferSend+0x56>
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
size_t xReturn, xSpace = 0;
size_t xRequiredSpace = xDataLengthBytes;
    163a:	3a 01       	movw	r6, r20
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    163c:	8e 81       	ldd	r24, Y+6	; 0x06
    163e:	9f 81       	ldd	r25, Y+7	; 0x07
    1640:	a8 85       	ldd	r26, Y+8	; 0x08
    1642:	b9 85       	ldd	r27, Y+9	; 0x09
    1644:	89 2b       	or	r24, r25
    1646:	8a 2b       	or	r24, r26
    1648:	8b 2b       	or	r24, r27
    164a:	09 f4       	brne	.+2      	; 0x164e <xStreamBufferSend+0x68>
    164c:	34 c0       	rjmp	.+104    	; 0x16b6 <xStreamBufferSend+0xd0>
    {
        vTaskSetTimeOutState( &xTimeOut );
    164e:	ce 01       	movw	r24, r28
    1650:	01 96       	adiw	r24, 0x01	; 1
    1652:	33 d6       	rcall	.+3174   	; 0x22ba <vTaskSetTimeOutState>

        do
        {
            /* Wait until the required number of bytes are free in the message
            buffer. */
            taskENTER_CRITICAL();
    1654:	0f b6       	in	r0, 0x3f	; 63
    1656:	f8 94       	cli
    1658:	0f 92       	push	r0
            {
                xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    165a:	c5 01       	movw	r24, r10
    165c:	b2 df       	rcall	.-156    	; 0x15c2 <xStreamBufferSpacesAvailable>
    165e:	4c 01       	movw	r8, r24

                if( xSpace < xRequiredSpace )
    1660:	86 15       	cp	r24, r6
    1662:	97 05       	cpc	r25, r7
    1664:	18 f5       	brcc	.+70     	; 0x16ac <xStreamBufferSend+0xc6>
                {
                    /* Clear notification state as going to wait for space. */
                    ( void ) xTaskNotifyStateClear( NULL );
    1666:	80 e0       	ldi	r24, 0x00	; 0
    1668:	90 e0       	ldi	r25, 0x00	; 0
    166a:	0e 94 bb 13 	call	0x2776	; 0x2776 <xTaskNotifyStateClear>

                    /* Should only be one writer. */
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
    166e:	a5 d6       	rcall	.+3402   	; 0x23ba <xTaskGetCurrentTaskHandle>
    1670:	f5 01       	movw	r30, r10
    1672:	93 87       	std	Z+11, r25	; 0x0b
    1674:	82 87       	std	Z+10, r24	; 0x0a
                {
                    taskEXIT_CRITICAL();
                    break;
                }
            }
            taskEXIT_CRITICAL();
    1676:	0f 90       	pop	r0
    1678:	0f be       	out	0x3f, r0	; 63

            traceBLOCKING_ON_STREAM_BUFFER_SEND( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    167a:	ce 80       	ldd	r12, Y+6	; 0x06
    167c:	df 80       	ldd	r13, Y+7	; 0x07
    167e:	e8 84       	ldd	r14, Y+8	; 0x08
    1680:	f9 84       	ldd	r15, Y+9	; 0x09
    1682:	00 e0       	ldi	r16, 0x00	; 0
    1684:	10 e0       	ldi	r17, 0x00	; 0
    1686:	20 e0       	ldi	r18, 0x00	; 0
    1688:	30 e0       	ldi	r19, 0x00	; 0
    168a:	a9 01       	movw	r20, r18
    168c:	60 e0       	ldi	r22, 0x00	; 0
    168e:	70 e0       	ldi	r23, 0x00	; 0
    1690:	cb 01       	movw	r24, r22
    1692:	e6 d6       	rcall	.+3532   	; 0x2460 <xTaskNotifyWait>
            pxStreamBuffer->xTaskWaitingToSend = NULL;
    1694:	f5 01       	movw	r30, r10
    1696:	13 86       	std	Z+11, r1	; 0x0b
    1698:	12 86       	std	Z+10, r1	; 0x0a

        } while( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE );
    169a:	be 01       	movw	r22, r28
    169c:	6a 5f       	subi	r22, 0xFA	; 250
    169e:	7f 4f       	sbci	r23, 0xFF	; 255
    16a0:	ce 01       	movw	r24, r28
    16a2:	01 96       	adiw	r24, 0x01	; 1
    16a4:	31 d6       	rcall	.+3170   	; 0x2308 <xTaskCheckForTimeOut>
    16a6:	88 23       	and	r24, r24
    16a8:	a9 f2       	breq	.-86     	; 0x1654 <xStreamBufferSend+0x6e>
    16aa:	02 c0       	rjmp	.+4      	; 0x16b0 <xStreamBufferSend+0xca>
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
                }
                else
                {
                    taskEXIT_CRITICAL();
    16ac:	0f 90       	pop	r0
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    if( xSpace == ( size_t ) 0 )
    16ae:	0f be       	out	0x3f, r0	; 63
    16b0:	81 14       	cp	r8, r1
    16b2:	91 04       	cpc	r9, r1
    {
        xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    16b4:	19 f4       	brne	.+6      	; 0x16bc <xStreamBufferSend+0xd6>
    16b6:	c5 01       	movw	r24, r10
    16b8:	84 df       	rcall	.-248    	; 0x15c2 <xStreamBufferSpacesAvailable>
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    16ba:	4c 01       	movw	r8, r24
    16bc:	83 01       	movw	r16, r6
    16be:	94 01       	movw	r18, r8
    16c0:	a2 01       	movw	r20, r4
    16c2:	b1 01       	movw	r22, r2
    16c4:	c5 01       	movw	r24, r10
    16c6:	96 de       	rcall	.-724    	; 0x13f4 <prvWriteMessageToBuffer>

    if( xReturn > ( size_t ) 0 )
    16c8:	7c 01       	movw	r14, r24
    16ca:	89 2b       	or	r24, r25
    {
        traceSTREAM_BUFFER_SEND( xStreamBuffer, xReturn );

        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    16cc:	d9 f0       	breq	.+54     	; 0x1704 <xStreamBufferSend+0x11e>
    16ce:	c5 01       	movw	r24, r10
    16d0:	35 de       	rcall	.-918    	; 0x133c <prvBytesInBuffer>
    16d2:	f5 01       	movw	r30, r10
    16d4:	26 81       	ldd	r18, Z+6	; 0x06
    16d6:	37 81       	ldd	r19, Z+7	; 0x07
    16d8:	82 17       	cp	r24, r18
    16da:	93 07       	cpc	r25, r19
        {
            sbSEND_COMPLETED( pxStreamBuffer );
    16dc:	98 f0       	brcs	.+38     	; 0x1704 <xStreamBufferSend+0x11e>
    16de:	0a d3       	rcall	.+1556   	; 0x1cf4 <vTaskSuspendAll>
    16e0:	f5 01       	movw	r30, r10
    16e2:	80 85       	ldd	r24, Z+8	; 0x08
    16e4:	91 85       	ldd	r25, Z+9	; 0x09
    16e6:	89 2b       	or	r24, r25
    16e8:	61 f0       	breq	.+24     	; 0x1702 <xStreamBufferSend+0x11c>
    16ea:	80 85       	ldd	r24, Z+8	; 0x08
    16ec:	91 85       	ldd	r25, Z+9	; 0x09
    16ee:	00 e0       	ldi	r16, 0x00	; 0
    16f0:	10 e0       	ldi	r17, 0x00	; 0
    16f2:	20 e0       	ldi	r18, 0x00	; 0
    16f4:	40 e0       	ldi	r20, 0x00	; 0
    16f6:	50 e0       	ldi	r21, 0x00	; 0
    16f8:	ba 01       	movw	r22, r20
    16fa:	3c d7       	rcall	.+3704   	; 0x2574 <xTaskGenericNotify>
    16fc:	f5 01       	movw	r30, r10
    16fe:	11 86       	std	Z+9, r1	; 0x09
    1700:	10 86       	std	Z+8, r1	; 0x08
    1702:	e1 d3       	rcall	.+1986   	; 0x1ec6 <xTaskResumeAll>
        mtCOVERAGE_TEST_MARKER();
        traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
    }

    return xReturn;
}
    1704:	c7 01       	movw	r24, r14
    1706:	29 96       	adiw	r28, 0x09	; 9
    1708:	0f b6       	in	r0, 0x3f	; 63
    170a:	f8 94       	cli
    170c:	de bf       	out	0x3e, r29	; 62
    170e:	0f be       	out	0x3f, r0	; 63
    1710:	cd bf       	out	0x3d, r28	; 61
    1712:	df 91       	pop	r29
    1714:	cf 91       	pop	r28
    1716:	1f 91       	pop	r17
    1718:	0f 91       	pop	r16
    171a:	ff 90       	pop	r15
    171c:	ef 90       	pop	r14
    171e:	df 90       	pop	r13
    1720:	cf 90       	pop	r12
    1722:	bf 90       	pop	r11
    1724:	af 90       	pop	r10
    1726:	9f 90       	pop	r9
    1728:	8f 90       	pop	r8
    172a:	7f 90       	pop	r7
    172c:	6f 90       	pop	r6
    172e:	5f 90       	pop	r5
    1730:	4f 90       	pop	r4
    1732:	3f 90       	pop	r3
    1734:	2f 90       	pop	r2
    1736:	08 95       	ret

00001738 <xStreamBufferSendFromISR>:

size_t xStreamBufferSendFromISR( StreamBufferHandle_t xStreamBuffer,
                                 const void *pvTxData,
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    1738:	af 92       	push	r10
    173a:	bf 92       	push	r11
    173c:	cf 92       	push	r12
    173e:	df 92       	push	r13
    1740:	ef 92       	push	r14
    1742:	ff 92       	push	r15
    1744:	0f 93       	push	r16
    1746:	1f 93       	push	r17
    1748:	cf 93       	push	r28
    174a:	df 93       	push	r29
    174c:	ec 01       	movw	r28, r24
    174e:	5b 01       	movw	r10, r22
    1750:	6a 01       	movw	r12, r20
    1752:	79 01       	movw	r14, r18

    /* This send function is used to write to both message buffers and stream
    buffers.  If this is a message buffer then the space needed must be
    increased by the amount of bytes needed to store the length of the
    message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    1754:	8e 85       	ldd	r24, Y+14	; 0x0e
    1756:	80 ff       	sbrs	r24, 0
    1758:	04 c0       	rjmp	.+8      	; 0x1762 <xStreamBufferSendFromISR+0x2a>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    175a:	8a 01       	movw	r16, r20
    175c:	0e 5f       	subi	r16, 0xFE	; 254
    175e:	1f 4f       	sbci	r17, 0xFF	; 255
    1760:	01 c0       	rjmp	.+2      	; 0x1764 <xStreamBufferSendFromISR+0x2c>
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
size_t xReturn, xSpace;
size_t xRequiredSpace = xDataLengthBytes;
    1762:	8a 01       	movw	r16, r20
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    1764:	ce 01       	movw	r24, r28
    1766:	2d df       	rcall	.-422    	; 0x15c2 <xStreamBufferSpacesAvailable>
    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    1768:	9c 01       	movw	r18, r24
    176a:	a6 01       	movw	r20, r12
    176c:	b5 01       	movw	r22, r10
    176e:	ce 01       	movw	r24, r28
    1770:	41 de       	rcall	.-894    	; 0x13f4 <prvWriteMessageToBuffer>
    1772:	6c 01       	movw	r12, r24

    if( xReturn > ( size_t ) 0 )
    1774:	89 2b       	or	r24, r25
    {
        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    1776:	b1 f0       	breq	.+44     	; 0x17a4 <xStreamBufferSendFromISR+0x6c>
    1778:	ce 01       	movw	r24, r28
    177a:	e0 dd       	rcall	.-1088   	; 0x133c <prvBytesInBuffer>
    177c:	2e 81       	ldd	r18, Y+6	; 0x06
    177e:	3f 81       	ldd	r19, Y+7	; 0x07
    1780:	82 17       	cp	r24, r18
    1782:	93 07       	cpc	r25, r19
    1784:	78 f0       	brcs	.+30     	; 0x17a4 <xStreamBufferSendFromISR+0x6c>
        {
            sbSEND_COMPLETE_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
    1786:	88 85       	ldd	r24, Y+8	; 0x08
    1788:	99 85       	ldd	r25, Y+9	; 0x09
    178a:	89 2b       	or	r24, r25
    178c:	59 f0       	breq	.+22     	; 0x17a4 <xStreamBufferSendFromISR+0x6c>
    178e:	88 85       	ldd	r24, Y+8	; 0x08
    1790:	99 85       	ldd	r25, Y+9	; 0x09
    1792:	00 e0       	ldi	r16, 0x00	; 0
    1794:	10 e0       	ldi	r17, 0x00	; 0
    1796:	20 e0       	ldi	r18, 0x00	; 0
    1798:	40 e0       	ldi	r20, 0x00	; 0
    179a:	50 e0       	ldi	r21, 0x00	; 0
    179c:	ba 01       	movw	r22, r20
    179e:	62 d7       	rcall	.+3780   	; 0x2664 <xTaskGenericNotifyFromISR>
    17a0:	19 86       	std	Y+9, r1	; 0x09
    17a2:	18 86       	std	Y+8, r1	; 0x08
    }

    traceSTREAM_BUFFER_SEND_FROM_ISR( xStreamBuffer, xReturn );

    return xReturn;
}
    17a4:	c6 01       	movw	r24, r12
    17a6:	df 91       	pop	r29
    17a8:	cf 91       	pop	r28
    17aa:	1f 91       	pop	r17
    17ac:	0f 91       	pop	r16
    17ae:	ff 90       	pop	r15
    17b0:	ef 90       	pop	r14
    17b2:	df 90       	pop	r13
    17b4:	cf 90       	pop	r12
    17b6:	bf 90       	pop	r11
    17b8:	af 90       	pop	r10
    17ba:	08 95       	ret

000017bc <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
                             void *pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    17bc:	4f 92       	push	r4
    17be:	5f 92       	push	r5
    17c0:	6f 92       	push	r6
    17c2:	7f 92       	push	r7
    17c4:	8f 92       	push	r8
    17c6:	9f 92       	push	r9
    17c8:	af 92       	push	r10
    17ca:	bf 92       	push	r11
    17cc:	cf 92       	push	r12
    17ce:	df 92       	push	r13
    17d0:	ef 92       	push	r14
    17d2:	ff 92       	push	r15
    17d4:	0f 93       	push	r16
    17d6:	1f 93       	push	r17
    17d8:	cf 93       	push	r28
    17da:	df 93       	push	r29
    17dc:	1f 92       	push	r1
    17de:	1f 92       	push	r1
    17e0:	cd b7       	in	r28, 0x3d	; 61
    17e2:	de b7       	in	r29, 0x3e	; 62
    17e4:	5c 01       	movw	r10, r24
    17e6:	2b 01       	movw	r4, r22
    17e8:	3a 01       	movw	r6, r20
    17ea:	68 01       	movw	r12, r16
    17ec:	79 01       	movw	r14, r18
    /* This receive function is used by both message buffers, which store
    discrete messages, and stream buffers, which store a continuous stream of
    bytes.  Discrete messages include an additional
    sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
    message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    17ee:	fc 01       	movw	r30, r24
    17f0:	86 85       	ldd	r24, Z+14	; 0x0e
    17f2:	80 fd       	sbrc	r24, 0
    17f4:	03 c0       	rjmp	.+6      	; 0x17fc <xStreamBufferReceive+0x40>
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    }
    else
    {
        xBytesToStoreMessageLength = 0;
    17f6:	81 2c       	mov	r8, r1
    17f8:	91 2c       	mov	r9, r1
    17fa:	04 c0       	rjmp	.+8      	; 0x1804 <xStreamBufferReceive+0x48>
    bytes.  Discrete messages include an additional
    sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
    message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    17fc:	68 94       	set
    17fe:	88 24       	eor	r8, r8
    1800:	81 f8       	bld	r8, 1
    1802:	91 2c       	mov	r9, r1
    else
    {
        xBytesToStoreMessageLength = 0;
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    1804:	c1 14       	cp	r12, r1
    1806:	d1 04       	cpc	r13, r1
    1808:	e1 04       	cpc	r14, r1
    180a:	f1 04       	cpc	r15, r1
    180c:	29 f1       	breq	.+74     	; 0x1858 <xStreamBufferReceive+0x9c>
    {
        /* Checking if there is data and clearing the notification state must be
        performed atomically. */
        taskENTER_CRITICAL();
    180e:	0f b6       	in	r0, 0x3f	; 63
    1810:	f8 94       	cli
    1812:	0f 92       	push	r0
        {
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    1814:	c5 01       	movw	r24, r10
    1816:	92 dd       	rcall	.-1244   	; 0x133c <prvBytesInBuffer>
    1818:	8c 01       	movw	r16, r24
            /* If this function was invoked by a message buffer read then
            xBytesToStoreMessageLength holds the number of bytes used to hold
            the length of the next discrete message.  If this function was
            invoked by a stream buffer read then xBytesToStoreMessageLength will
            be 0. */
            if( xBytesAvailable <= xBytesToStoreMessageLength )
    181a:	88 16       	cp	r8, r24
    181c:	99 06       	cpc	r9, r25
    181e:	38 f0       	brcs	.+14     	; 0x182e <xStreamBufferReceive+0x72>
            {
                /* Clear notification state as going to wait for data. */
                ( void ) xTaskNotifyStateClear( NULL );
    1820:	80 e0       	ldi	r24, 0x00	; 0
    1822:	90 e0       	ldi	r25, 0x00	; 0

                /* Should only be one reader. */
                configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
                pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
    1824:	a8 d7       	rcall	.+3920   	; 0x2776 <xTaskNotifyStateClear>
    1826:	c9 d5       	rcall	.+2962   	; 0x23ba <xTaskGetCurrentTaskHandle>
    1828:	f5 01       	movw	r30, r10
    182a:	91 87       	std	Z+9, r25	; 0x09
    182c:	80 87       	std	Z+8, r24	; 0x08
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
    182e:	0f 90       	pop	r0
    1830:	0f be       	out	0x3f, r0	; 63

        if( xBytesAvailable <= xBytesToStoreMessageLength )
    1832:	80 16       	cp	r8, r16
    1834:	91 06       	cpc	r9, r17
    1836:	b0 f0       	brcs	.+44     	; 0x1864 <xStreamBufferReceive+0xa8>
        {
            /* Wait for data to be available. */
            traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    1838:	00 e0       	ldi	r16, 0x00	; 0
    183a:	10 e0       	ldi	r17, 0x00	; 0
    183c:	20 e0       	ldi	r18, 0x00	; 0
    183e:	30 e0       	ldi	r19, 0x00	; 0
    1840:	a9 01       	movw	r20, r18
    1842:	60 e0       	ldi	r22, 0x00	; 0
    1844:	70 e0       	ldi	r23, 0x00	; 0
    1846:	cb 01       	movw	r24, r22
    1848:	0b d6       	rcall	.+3094   	; 0x2460 <xTaskNotifyWait>
            pxStreamBuffer->xTaskWaitingToReceive = NULL;
    184a:	f5 01       	movw	r30, r10
    184c:	11 86       	std	Z+9, r1	; 0x09

            /* Recheck the data available after blocking. */
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    184e:	10 86       	std	Z+8, r1	; 0x08
    1850:	c5 01       	movw	r24, r10
    1852:	74 dd       	rcall	.-1304   	; 0x133c <prvBytesInBuffer>
    1854:	8c 01       	movw	r16, r24
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    1856:	03 c0       	rjmp	.+6      	; 0x185e <xStreamBufferReceive+0xa2>
    1858:	c5 01       	movw	r24, r10
    185a:	70 dd       	rcall	.-1312   	; 0x133c <prvBytesInBuffer>
    185c:	8c 01       	movw	r16, r24
    /* Whether receiving a discrete message (where xBytesToStoreMessageLength
    holds the number of bytes used to store the message length) or a stream of
    bytes (where xBytesToStoreMessageLength is zero), the number of bytes
    available must be greater than xBytesToStoreMessageLength to be able to
    read bytes from the buffer. */
    if( xBytesAvailable > xBytesToStoreMessageLength )
    185e:	80 16       	cp	r8, r16
    1860:	91 06       	cpc	r9, r17
    1862:	b8 f5       	brcc	.+110    	; 0x18d2 <xStreamBufferReceive+0x116>
                                        size_t xBytesToStoreMessageLength )
{
size_t xOriginalTail, xReceivedLength, xNextMessageLength;
configMESSAGE_BUFFER_LENGTH_TYPE xTempNextMessageLength;

    if( xBytesToStoreMessageLength != ( size_t ) 0 )
    1864:	81 14       	cp	r8, r1
    1866:	91 04       	cpc	r9, r1
    1868:	c1 f0       	breq	.+48     	; 0x189a <xStreamBufferReceive+0xde>
    {
        /* A discrete message is being received.  First receive the length
        of the message.  A copy of the tail is stored so the buffer can be
        returned to its prior state if the length of the message is too
        large for the provided buffer. */
        xOriginalTail = pxStreamBuffer->xTail;
    186a:	f5 01       	movw	r30, r10
    186c:	e0 80       	ld	r14, Z
    186e:	f1 80       	ldd	r15, Z+1	; 0x01
        ( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
    1870:	98 01       	movw	r18, r16
    1872:	a4 01       	movw	r20, r8
    1874:	be 01       	movw	r22, r28
    1876:	6f 5f       	subi	r22, 0xFF	; 255
    1878:	7f 4f       	sbci	r23, 0xFF	; 255
    187a:	c5 01       	movw	r24, r10
    187c:	fb dd       	rcall	.-1034   	; 0x1474 <prvReadBytesFromBuffer>
        xNextMessageLength = ( size_t ) xTempNextMessageLength;
    187e:	89 81       	ldd	r24, Y+1	; 0x01
    1880:	9a 81       	ldd	r25, Y+2	; 0x02

        /* Reduce the number of bytes available by the number of bytes just
        read out. */
        xBytesAvailable -= xBytesToStoreMessageLength;
    1882:	08 19       	sub	r16, r8
    1884:	19 09       	sbc	r17, r9

        /* Check there is enough space in the buffer provided by the
        user. */
        if( xNextMessageLength > xBufferLengthBytes )
    1886:	68 16       	cp	r6, r24
    1888:	79 06       	cpc	r7, r25
    188a:	30 f4       	brcc	.+12     	; 0x1898 <xStreamBufferReceive+0xdc>
        {
            /* The user has provided insufficient space to read the message
            so return the buffer to its previous state (so the length of
            the message is in the buffer again). */
            pxStreamBuffer->xTail = xOriginalTail;
    188c:	f5 01       	movw	r30, r10
    188e:	f1 82       	std	Z+1, r15	; 0x01
    1890:	e0 82       	st	Z, r14
            xNextMessageLength = 0;
    1892:	61 2c       	mov	r6, r1
    1894:	71 2c       	mov	r7, r1
        of the message.  A copy of the tail is stored so the buffer can be
        returned to its prior state if the length of the message is too
        large for the provided buffer. */
        xOriginalTail = pxStreamBuffer->xTail;
        ( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
        xNextMessageLength = ( size_t ) xTempNextMessageLength;
    1896:	01 c0       	rjmp	.+2      	; 0x189a <xStreamBufferReceive+0xde>
        message), so read as many bytes as possible. */
        xNextMessageLength = xBufferLengthBytes;
    }

    /* Read the actual data. */
    xReceivedLength = prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) pvRxData, xNextMessageLength, xBytesAvailable ); /*lint !e9079 Data storage area is implemented as uint8_t array for ease of sizing, indexing and alignment. */
    1898:	3c 01       	movw	r6, r24
    189a:	98 01       	movw	r18, r16
    189c:	a3 01       	movw	r20, r6
    189e:	b2 01       	movw	r22, r4
    18a0:	c5 01       	movw	r24, r10
    18a2:	e8 dd       	rcall	.-1072   	; 0x1474 <prvReadBytesFromBuffer>
    if( xBytesAvailable > xBytesToStoreMessageLength )
    {
        xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );

        /* Was a task waiting for space in the buffer? */
        if( xReceivedLength != ( size_t ) 0 )
    18a4:	7c 01       	movw	r14, r24
    18a6:	89 2b       	or	r24, r25
        {
            traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
            sbRECEIVE_COMPLETED( pxStreamBuffer );
    18a8:	b1 f0       	breq	.+44     	; 0x18d6 <xStreamBufferReceive+0x11a>
    18aa:	24 d2       	rcall	.+1096   	; 0x1cf4 <vTaskSuspendAll>
    18ac:	f5 01       	movw	r30, r10
    18ae:	82 85       	ldd	r24, Z+10	; 0x0a
    18b0:	93 85       	ldd	r25, Z+11	; 0x0b
    18b2:	89 2b       	or	r24, r25
    18b4:	61 f0       	breq	.+24     	; 0x18ce <xStreamBufferReceive+0x112>
    18b6:	82 85       	ldd	r24, Z+10	; 0x0a
    18b8:	93 85       	ldd	r25, Z+11	; 0x0b
    18ba:	00 e0       	ldi	r16, 0x00	; 0
    18bc:	10 e0       	ldi	r17, 0x00	; 0
    18be:	20 e0       	ldi	r18, 0x00	; 0
    18c0:	40 e0       	ldi	r20, 0x00	; 0
    18c2:	50 e0       	ldi	r21, 0x00	; 0
    18c4:	ba 01       	movw	r22, r20
    18c6:	56 d6       	rcall	.+3244   	; 0x2574 <xTaskGenericNotify>
    18c8:	f5 01       	movw	r30, r10
    18ca:	13 86       	std	Z+11, r1	; 0x0b
    18cc:	12 86       	std	Z+10, r1	; 0x0a
    18ce:	fb d2       	rcall	.+1526   	; 0x1ec6 <xTaskResumeAll>
    18d0:	02 c0       	rjmp	.+4      	; 0x18d6 <xStreamBufferReceive+0x11a>
                             void *pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
    18d2:	e1 2c       	mov	r14, r1
    18d4:	f1 2c       	mov	r15, r1
        traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
        mtCOVERAGE_TEST_MARKER();
    }

    return xReceivedLength;
}
    18d6:	c7 01       	movw	r24, r14
    18d8:	0f 90       	pop	r0
    18da:	0f 90       	pop	r0
    18dc:	df 91       	pop	r29
    18de:	cf 91       	pop	r28
    18e0:	1f 91       	pop	r17
    18e2:	0f 91       	pop	r16
    18e4:	ff 90       	pop	r15
    18e6:	ef 90       	pop	r14
    18e8:	df 90       	pop	r13
    18ea:	cf 90       	pop	r12
    18ec:	bf 90       	pop	r11
    18ee:	af 90       	pop	r10
    18f0:	9f 90       	pop	r9
    18f2:	8f 90       	pop	r8
    18f4:	7f 90       	pop	r7
    18f6:	6f 90       	pop	r6
    18f8:	5f 90       	pop	r5
    18fa:	4f 90       	pop	r4
    18fc:	08 95       	ret

000018fe <prvResetNextTaskUnblockTime>:
    18fe:	e0 91 e2 16 	lds	r30, 0x16E2	; 0x8016e2 <pxDelayedTaskList>
    1902:	f0 91 e3 16 	lds	r31, 0x16E3	; 0x8016e3 <pxDelayedTaskList+0x1>
    1906:	80 81       	ld	r24, Z
    1908:	81 11       	cpse	r24, r1
    190a:	0c c0       	rjmp	.+24     	; 0x1924 <prvResetNextTaskUnblockTime+0x26>
    190c:	8f ef       	ldi	r24, 0xFF	; 255
    190e:	9f ef       	ldi	r25, 0xFF	; 255
    1910:	dc 01       	movw	r26, r24
    1912:	80 93 af 16 	sts	0x16AF, r24	; 0x8016af <xNextTaskUnblockTime>
    1916:	90 93 b0 16 	sts	0x16B0, r25	; 0x8016b0 <xNextTaskUnblockTime+0x1>
    191a:	a0 93 b1 16 	sts	0x16B1, r26	; 0x8016b1 <xNextTaskUnblockTime+0x2>
    191e:	b0 93 b2 16 	sts	0x16B2, r27	; 0x8016b2 <xNextTaskUnblockTime+0x3>
    1922:	08 95       	ret
    1924:	e0 91 e2 16 	lds	r30, 0x16E2	; 0x8016e2 <pxDelayedTaskList>
    1928:	f0 91 e3 16 	lds	r31, 0x16E3	; 0x8016e3 <pxDelayedTaskList+0x1>
    192c:	07 80       	ldd	r0, Z+7	; 0x07
    192e:	f0 85       	ldd	r31, Z+8	; 0x08
    1930:	e0 2d       	mov	r30, r0
    1932:	00 84       	ldd	r0, Z+8	; 0x08
    1934:	f1 85       	ldd	r31, Z+9	; 0x09
    1936:	e0 2d       	mov	r30, r0
    1938:	82 81       	ldd	r24, Z+2	; 0x02
    193a:	93 81       	ldd	r25, Z+3	; 0x03
    193c:	a4 81       	ldd	r26, Z+4	; 0x04
    193e:	b5 81       	ldd	r27, Z+5	; 0x05
    1940:	80 93 af 16 	sts	0x16AF, r24	; 0x8016af <xNextTaskUnblockTime>
    1944:	90 93 b0 16 	sts	0x16B0, r25	; 0x8016b0 <xNextTaskUnblockTime+0x1>
    1948:	a0 93 b1 16 	sts	0x16B1, r26	; 0x8016b1 <xNextTaskUnblockTime+0x2>
    194c:	b0 93 b2 16 	sts	0x16B2, r27	; 0x8016b2 <xNextTaskUnblockTime+0x3>
    1950:	08 95       	ret

00001952 <prvAddCurrentTaskToDelayedList>:
    1952:	8f 92       	push	r8
    1954:	9f 92       	push	r9
    1956:	af 92       	push	r10
    1958:	bf 92       	push	r11
    195a:	cf 92       	push	r12
    195c:	df 92       	push	r13
    195e:	ef 92       	push	r14
    1960:	ff 92       	push	r15
    1962:	cf 93       	push	r28
    1964:	6b 01       	movw	r12, r22
    1966:	7c 01       	movw	r14, r24
    1968:	c4 2f       	mov	r28, r20
    196a:	80 90 b9 16 	lds	r8, 0x16B9	; 0x8016b9 <xTickCount>
    196e:	90 90 ba 16 	lds	r9, 0x16BA	; 0x8016ba <xTickCount+0x1>
    1972:	a0 90 bb 16 	lds	r10, 0x16BB	; 0x8016bb <xTickCount+0x2>
    1976:	b0 90 bc 16 	lds	r11, 0x16BC	; 0x8016bc <xTickCount+0x3>
    197a:	80 91 26 17 	lds	r24, 0x1726	; 0x801726 <pxCurrentTCB>
    197e:	90 91 27 17 	lds	r25, 0x1727	; 0x801727 <pxCurrentTCB+0x1>
    1982:	02 96       	adiw	r24, 0x02	; 2
    1984:	56 d8       	rcall	.-3924   	; 0xa32 <uxListRemove>
    1986:	8f ef       	ldi	r24, 0xFF	; 255
    1988:	c8 16       	cp	r12, r24
    198a:	d8 06       	cpc	r13, r24
    198c:	e8 06       	cpc	r14, r24
    198e:	f8 06       	cpc	r15, r24
    1990:	69 f4       	brne	.+26     	; 0x19ac <prvAddCurrentTaskToDelayedList+0x5a>
    1992:	cc 23       	and	r28, r28
    1994:	59 f0       	breq	.+22     	; 0x19ac <prvAddCurrentTaskToDelayedList+0x5a>
    1996:	60 91 26 17 	lds	r22, 0x1726	; 0x801726 <pxCurrentTCB>
    199a:	70 91 27 17 	lds	r23, 0x1727	; 0x801727 <pxCurrentTCB+0x1>
    199e:	6e 5f       	subi	r22, 0xFE	; 254
    19a0:	7f 4f       	sbci	r23, 0xFF	; 255
    19a2:	8e eb       	ldi	r24, 0xBE	; 190
    19a4:	96 e1       	ldi	r25, 0x16	; 22
    19a6:	0e 94 bb 04 	call	0x976	; 0x976 <vListInsertEnd>
    19aa:	3f c0       	rjmp	.+126    	; 0x1a2a <prvAddCurrentTaskToDelayedList+0xd8>
    19ac:	c8 0c       	add	r12, r8
    19ae:	d9 1c       	adc	r13, r9
    19b0:	ea 1c       	adc	r14, r10
    19b2:	fb 1c       	adc	r15, r11
    19b4:	e0 91 26 17 	lds	r30, 0x1726	; 0x801726 <pxCurrentTCB>
    19b8:	f0 91 27 17 	lds	r31, 0x1727	; 0x801727 <pxCurrentTCB+0x1>
    19bc:	c2 82       	std	Z+2, r12	; 0x02
    19be:	d3 82       	std	Z+3, r13	; 0x03
    19c0:	e4 82       	std	Z+4, r14	; 0x04
    19c2:	f5 82       	std	Z+5, r15	; 0x05
    19c4:	c8 14       	cp	r12, r8
    19c6:	d9 04       	cpc	r13, r9
    19c8:	ea 04       	cpc	r14, r10
    19ca:	fb 04       	cpc	r15, r11
    19cc:	68 f4       	brcc	.+26     	; 0x19e8 <prvAddCurrentTaskToDelayedList+0x96>
    19ce:	60 91 26 17 	lds	r22, 0x1726	; 0x801726 <pxCurrentTCB>
    19d2:	70 91 27 17 	lds	r23, 0x1727	; 0x801727 <pxCurrentTCB+0x1>
    19d6:	80 91 e0 16 	lds	r24, 0x16E0	; 0x8016e0 <pxOverflowDelayedTaskList>
    19da:	90 91 e1 16 	lds	r25, 0x16E1	; 0x8016e1 <pxOverflowDelayedTaskList+0x1>
    19de:	6e 5f       	subi	r22, 0xFE	; 254
    19e0:	7f 4f       	sbci	r23, 0xFF	; 255
    19e2:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <vListInsert>
    19e6:	21 c0       	rjmp	.+66     	; 0x1a2a <prvAddCurrentTaskToDelayedList+0xd8>
    19e8:	60 91 26 17 	lds	r22, 0x1726	; 0x801726 <pxCurrentTCB>
    19ec:	70 91 27 17 	lds	r23, 0x1727	; 0x801727 <pxCurrentTCB+0x1>
    19f0:	80 91 e2 16 	lds	r24, 0x16E2	; 0x8016e2 <pxDelayedTaskList>
    19f4:	90 91 e3 16 	lds	r25, 0x16E3	; 0x8016e3 <pxDelayedTaskList+0x1>
    19f8:	6e 5f       	subi	r22, 0xFE	; 254
    19fa:	7f 4f       	sbci	r23, 0xFF	; 255
    19fc:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <vListInsert>
    1a00:	80 91 af 16 	lds	r24, 0x16AF	; 0x8016af <xNextTaskUnblockTime>
    1a04:	90 91 b0 16 	lds	r25, 0x16B0	; 0x8016b0 <xNextTaskUnblockTime+0x1>
    1a08:	a0 91 b1 16 	lds	r26, 0x16B1	; 0x8016b1 <xNextTaskUnblockTime+0x2>
    1a0c:	b0 91 b2 16 	lds	r27, 0x16B2	; 0x8016b2 <xNextTaskUnblockTime+0x3>
    1a10:	c8 16       	cp	r12, r24
    1a12:	d9 06       	cpc	r13, r25
    1a14:	ea 06       	cpc	r14, r26
    1a16:	fb 06       	cpc	r15, r27
    1a18:	40 f4       	brcc	.+16     	; 0x1a2a <prvAddCurrentTaskToDelayedList+0xd8>
    1a1a:	c0 92 af 16 	sts	0x16AF, r12	; 0x8016af <xNextTaskUnblockTime>
    1a1e:	d0 92 b0 16 	sts	0x16B0, r13	; 0x8016b0 <xNextTaskUnblockTime+0x1>
    1a22:	e0 92 b1 16 	sts	0x16B1, r14	; 0x8016b1 <xNextTaskUnblockTime+0x2>
    1a26:	f0 92 b2 16 	sts	0x16B2, r15	; 0x8016b2 <xNextTaskUnblockTime+0x3>
    1a2a:	cf 91       	pop	r28
    1a2c:	ff 90       	pop	r15
    1a2e:	ef 90       	pop	r14
    1a30:	df 90       	pop	r13
    1a32:	cf 90       	pop	r12
    1a34:	bf 90       	pop	r11
    1a36:	af 90       	pop	r10
    1a38:	9f 90       	pop	r9
    1a3a:	8f 90       	pop	r8
    1a3c:	08 95       	ret

00001a3e <xTaskCreate>:
    1a3e:	4f 92       	push	r4
    1a40:	5f 92       	push	r5
    1a42:	6f 92       	push	r6
    1a44:	7f 92       	push	r7
    1a46:	8f 92       	push	r8
    1a48:	9f 92       	push	r9
    1a4a:	af 92       	push	r10
    1a4c:	bf 92       	push	r11
    1a4e:	cf 92       	push	r12
    1a50:	df 92       	push	r13
    1a52:	ef 92       	push	r14
    1a54:	ff 92       	push	r15
    1a56:	0f 93       	push	r16
    1a58:	cf 93       	push	r28
    1a5a:	df 93       	push	r29
    1a5c:	4c 01       	movw	r8, r24
    1a5e:	6b 01       	movw	r12, r22
    1a60:	5a 01       	movw	r10, r20
    1a62:	29 01       	movw	r4, r18
    1a64:	ca 01       	movw	r24, r20
    1a66:	0e 94 bc 03 	call	0x778	; 0x778 <pvPortMalloc>
    1a6a:	3c 01       	movw	r6, r24
    1a6c:	89 2b       	or	r24, r25
    1a6e:	09 f4       	brne	.+2      	; 0x1a72 <xTaskCreate+0x34>
    1a70:	f4 c0       	rjmp	.+488    	; 0x1c5a <xTaskCreate+0x21c>
    1a72:	80 e3       	ldi	r24, 0x30	; 48
    1a74:	90 e0       	ldi	r25, 0x00	; 0
    1a76:	0e 94 bc 03 	call	0x778	; 0x778 <pvPortMalloc>
    1a7a:	ec 01       	movw	r28, r24
    1a7c:	89 2b       	or	r24, r25
    1a7e:	99 f0       	breq	.+38     	; 0x1aa6 <xTaskCreate+0x68>
    1a80:	7c 8e       	std	Y+28, r7	; 0x1c
    1a82:	6b 8e       	std	Y+27, r6	; 0x1b
    1a84:	a5 01       	movw	r20, r10
    1a86:	65 ea       	ldi	r22, 0xA5	; 165
    1a88:	70 e0       	ldi	r23, 0x00	; 0
    1a8a:	c3 01       	movw	r24, r6
    1a8c:	0e 94 c1 23 	call	0x4782	; 0x4782 <memset>
    1a90:	21 e0       	ldi	r18, 0x01	; 1
    1a92:	a2 1a       	sub	r10, r18
    1a94:	b1 08       	sbc	r11, r1
    1a96:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a98:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a9a:	a8 0e       	add	r10, r24
    1a9c:	b9 1e       	adc	r11, r25
    1a9e:	c1 14       	cp	r12, r1
    1aa0:	d1 04       	cpc	r13, r1
    1aa2:	29 f4       	brne	.+10     	; 0x1aae <xTaskCreate+0x70>
    1aa4:	20 c0       	rjmp	.+64     	; 0x1ae6 <xTaskCreate+0xa8>
    1aa6:	c3 01       	movw	r24, r6
    1aa8:	0e 94 75 04 	call	0x8ea	; 0x8ea <vPortFree>
    1aac:	d6 c0       	rjmp	.+428    	; 0x1c5a <xTaskCreate+0x21c>
    1aae:	d6 01       	movw	r26, r12
    1ab0:	8c 91       	ld	r24, X
    1ab2:	8d 8f       	std	Y+29, r24	; 0x1d
    1ab4:	8c 91       	ld	r24, X
    1ab6:	88 23       	and	r24, r24
    1ab8:	a1 f0       	breq	.+40     	; 0x1ae2 <xTaskCreate+0xa4>
    1aba:	ae 01       	movw	r20, r28
    1abc:	42 5e       	subi	r20, 0xE2	; 226
    1abe:	5f 4f       	sbci	r21, 0xFF	; 255
    1ac0:	f6 01       	movw	r30, r12
    1ac2:	31 96       	adiw	r30, 0x01	; 1
    1ac4:	b8 e0       	ldi	r27, 0x08	; 8
    1ac6:	cb 0e       	add	r12, r27
    1ac8:	d1 1c       	adc	r13, r1
    1aca:	cf 01       	movw	r24, r30
    1acc:	21 91       	ld	r18, Z+
    1ace:	da 01       	movw	r26, r20
    1ad0:	2d 93       	st	X+, r18
    1ad2:	ad 01       	movw	r20, r26
    1ad4:	dc 01       	movw	r26, r24
    1ad6:	8c 91       	ld	r24, X
    1ad8:	88 23       	and	r24, r24
    1ada:	19 f0       	breq	.+6      	; 0x1ae2 <xTaskCreate+0xa4>
    1adc:	ec 15       	cp	r30, r12
    1ade:	fd 05       	cpc	r31, r13
    1ae0:	a1 f7       	brne	.-24     	; 0x1aca <xTaskCreate+0x8c>
    1ae2:	1c a2       	std	Y+36, r1	; 0x24
    1ae4:	01 c0       	rjmp	.+2      	; 0x1ae8 <xTaskCreate+0xaa>
    1ae6:	1d 8e       	std	Y+29, r1	; 0x1d
    1ae8:	04 30       	cpi	r16, 0x04	; 4
    1aea:	08 f0       	brcs	.+2      	; 0x1aee <xTaskCreate+0xb0>
    1aec:	03 e0       	ldi	r16, 0x03	; 3
    1aee:	0a 8f       	std	Y+26, r16	; 0x1a
    1af0:	0f a3       	std	Y+39, r16	; 0x27
    1af2:	18 a6       	std	Y+40, r1	; 0x28
    1af4:	6e 01       	movw	r12, r28
    1af6:	b2 e0       	ldi	r27, 0x02	; 2
    1af8:	cb 0e       	add	r12, r27
    1afa:	d1 1c       	adc	r13, r1
    1afc:	c6 01       	movw	r24, r12
    1afe:	0e 94 b7 04 	call	0x96e	; 0x96e <vListInitialiseItem>
    1b02:	ce 01       	movw	r24, r28
    1b04:	0e 96       	adiw	r24, 0x0e	; 14
    1b06:	0e 94 b7 04 	call	0x96e	; 0x96e <vListInitialiseItem>
    1b0a:	db 87       	std	Y+11, r29	; 0x0b
    1b0c:	ca 87       	std	Y+10, r28	; 0x0a
    1b0e:	84 e0       	ldi	r24, 0x04	; 4
    1b10:	90 e0       	ldi	r25, 0x00	; 0
    1b12:	a0 e0       	ldi	r26, 0x00	; 0
    1b14:	b0 e0       	ldi	r27, 0x00	; 0
    1b16:	80 1b       	sub	r24, r16
    1b18:	91 09       	sbc	r25, r1
    1b1a:	a1 09       	sbc	r26, r1
    1b1c:	b1 09       	sbc	r27, r1
    1b1e:	8e 87       	std	Y+14, r24	; 0x0e
    1b20:	9f 87       	std	Y+15, r25	; 0x0f
    1b22:	a8 8b       	std	Y+16, r26	; 0x10
    1b24:	b9 8b       	std	Y+17, r27	; 0x11
    1b26:	df 8b       	std	Y+23, r29	; 0x17
    1b28:	ce 8b       	std	Y+22, r28	; 0x16
    1b2a:	1a a6       	std	Y+42, r1	; 0x2a
    1b2c:	19 a6       	std	Y+41, r1	; 0x29
    1b2e:	1b a6       	std	Y+43, r1	; 0x2b
    1b30:	1c a6       	std	Y+44, r1	; 0x2c
    1b32:	1d a6       	std	Y+45, r1	; 0x2d
    1b34:	1e a6       	std	Y+46, r1	; 0x2e
    1b36:	1f a6       	std	Y+47, r1	; 0x2f
    1b38:	a2 01       	movw	r20, r4
    1b3a:	b4 01       	movw	r22, r8
    1b3c:	c5 01       	movw	r24, r10
    1b3e:	0e 94 40 05 	call	0xa80	; 0xa80 <pxPortInitialiseStack>
    1b42:	99 83       	std	Y+1, r25	; 0x01
    1b44:	88 83       	st	Y, r24
    1b46:	e1 14       	cp	r14, r1
    1b48:	f1 04       	cpc	r15, r1
    1b4a:	19 f0       	breq	.+6      	; 0x1b52 <xTaskCreate+0x114>
    1b4c:	f7 01       	movw	r30, r14
    1b4e:	d1 83       	std	Z+1, r29	; 0x01
    1b50:	c0 83       	st	Z, r28
    1b52:	0f b6       	in	r0, 0x3f	; 63
    1b54:	f8 94       	cli
    1b56:	0f 92       	push	r0
    1b58:	80 91 bd 16 	lds	r24, 0x16BD	; 0x8016bd <uxCurrentNumberOfTasks>
    1b5c:	8f 5f       	subi	r24, 0xFF	; 255
    1b5e:	80 93 bd 16 	sts	0x16BD, r24	; 0x8016bd <uxCurrentNumberOfTasks>
    1b62:	80 91 26 17 	lds	r24, 0x1726	; 0x801726 <pxCurrentTCB>
    1b66:	90 91 27 17 	lds	r25, 0x1727	; 0x801727 <pxCurrentTCB+0x1>
    1b6a:	89 2b       	or	r24, r25
    1b6c:	d1 f5       	brne	.+116    	; 0x1be2 <xTaskCreate+0x1a4>
    1b6e:	d0 93 27 17 	sts	0x1727, r29	; 0x801727 <pxCurrentTCB+0x1>
    1b72:	c0 93 26 17 	sts	0x1726, r28	; 0x801726 <pxCurrentTCB>
    1b76:	80 91 bd 16 	lds	r24, 0x16BD	; 0x8016bd <uxCurrentNumberOfTasks>
    1b7a:	81 30       	cpi	r24, 0x01	; 1
    1b7c:	09 f0       	breq	.+2      	; 0x1b80 <xTaskCreate+0x142>
    1b7e:	41 c0       	rjmp	.+130    	; 0x1c02 <xTaskCreate+0x1c4>
    1b80:	8a ef       	ldi	r24, 0xFA	; 250
    1b82:	96 e1       	ldi	r25, 0x16	; 22
    1b84:	0e 94 a6 04 	call	0x94c	; 0x94c <vListInitialise>
    1b88:	85 e0       	ldi	r24, 0x05	; 5
    1b8a:	97 e1       	ldi	r25, 0x17	; 23
    1b8c:	0e 94 a6 04 	call	0x94c	; 0x94c <vListInitialise>
    1b90:	80 e1       	ldi	r24, 0x10	; 16
    1b92:	97 e1       	ldi	r25, 0x17	; 23
    1b94:	0e 94 a6 04 	call	0x94c	; 0x94c <vListInitialise>
    1b98:	8b e1       	ldi	r24, 0x1B	; 27
    1b9a:	97 e1       	ldi	r25, 0x17	; 23
    1b9c:	0e 94 a6 04 	call	0x94c	; 0x94c <vListInitialise>
    1ba0:	8f ee       	ldi	r24, 0xEF	; 239
    1ba2:	96 e1       	ldi	r25, 0x16	; 22
    1ba4:	0e 94 a6 04 	call	0x94c	; 0x94c <vListInitialise>
    1ba8:	84 ee       	ldi	r24, 0xE4	; 228
    1baa:	96 e1       	ldi	r25, 0x16	; 22
    1bac:	0e 94 a6 04 	call	0x94c	; 0x94c <vListInitialise>
    1bb0:	85 ed       	ldi	r24, 0xD5	; 213
    1bb2:	96 e1       	ldi	r25, 0x16	; 22
    1bb4:	0e 94 a6 04 	call	0x94c	; 0x94c <vListInitialise>
    1bb8:	8a ec       	ldi	r24, 0xCA	; 202
    1bba:	96 e1       	ldi	r25, 0x16	; 22
    1bbc:	0e 94 a6 04 	call	0x94c	; 0x94c <vListInitialise>
    1bc0:	8e eb       	ldi	r24, 0xBE	; 190
    1bc2:	96 e1       	ldi	r25, 0x16	; 22
    1bc4:	0e 94 a6 04 	call	0x94c	; 0x94c <vListInitialise>
    1bc8:	8f ee       	ldi	r24, 0xEF	; 239
    1bca:	96 e1       	ldi	r25, 0x16	; 22
    1bcc:	90 93 e3 16 	sts	0x16E3, r25	; 0x8016e3 <pxDelayedTaskList+0x1>
    1bd0:	80 93 e2 16 	sts	0x16E2, r24	; 0x8016e2 <pxDelayedTaskList>
    1bd4:	84 ee       	ldi	r24, 0xE4	; 228
    1bd6:	96 e1       	ldi	r25, 0x16	; 22
    1bd8:	90 93 e1 16 	sts	0x16E1, r25	; 0x8016e1 <pxOverflowDelayedTaskList+0x1>
    1bdc:	80 93 e0 16 	sts	0x16E0, r24	; 0x8016e0 <pxOverflowDelayedTaskList>
    1be0:	10 c0       	rjmp	.+32     	; 0x1c02 <xTaskCreate+0x1c4>
    1be2:	80 91 b7 16 	lds	r24, 0x16B7	; 0x8016b7 <xSchedulerRunning>
    1be6:	81 11       	cpse	r24, r1
    1be8:	0c c0       	rjmp	.+24     	; 0x1c02 <xTaskCreate+0x1c4>
    1bea:	e0 91 26 17 	lds	r30, 0x1726	; 0x801726 <pxCurrentTCB>
    1bee:	f0 91 27 17 	lds	r31, 0x1727	; 0x801727 <pxCurrentTCB+0x1>
    1bf2:	92 8d       	ldd	r25, Z+26	; 0x1a
    1bf4:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1bf6:	89 17       	cp	r24, r25
    1bf8:	20 f0       	brcs	.+8      	; 0x1c02 <xTaskCreate+0x1c4>
    1bfa:	d0 93 27 17 	sts	0x1727, r29	; 0x801727 <pxCurrentTCB+0x1>
    1bfe:	c0 93 26 17 	sts	0x1726, r28	; 0x801726 <pxCurrentTCB>
    1c02:	80 91 b3 16 	lds	r24, 0x16B3	; 0x8016b3 <uxTaskNumber>
    1c06:	8f 5f       	subi	r24, 0xFF	; 255
    1c08:	80 93 b3 16 	sts	0x16B3, r24	; 0x8016b3 <uxTaskNumber>
    1c0c:	8d a3       	std	Y+37, r24	; 0x25
    1c0e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1c10:	90 91 b8 16 	lds	r25, 0x16B8	; 0x8016b8 <uxTopReadyPriority>
    1c14:	98 17       	cp	r25, r24
    1c16:	10 f4       	brcc	.+4      	; 0x1c1c <xTaskCreate+0x1de>
    1c18:	80 93 b8 16 	sts	0x16B8, r24	; 0x8016b8 <uxTopReadyPriority>
    1c1c:	fb e0       	ldi	r31, 0x0B	; 11
    1c1e:	8f 9f       	mul	r24, r31
    1c20:	c0 01       	movw	r24, r0
    1c22:	11 24       	eor	r1, r1
    1c24:	b6 01       	movw	r22, r12
    1c26:	86 50       	subi	r24, 0x06	; 6
    1c28:	99 4e       	sbci	r25, 0xE9	; 233
    1c2a:	0e 94 bb 04 	call	0x976	; 0x976 <vListInsertEnd>
    1c2e:	0f 90       	pop	r0
    1c30:	0f be       	out	0x3f, r0	; 63
    1c32:	80 91 b7 16 	lds	r24, 0x16B7	; 0x8016b7 <xSchedulerRunning>
    1c36:	88 23       	and	r24, r24
    1c38:	61 f0       	breq	.+24     	; 0x1c52 <xTaskCreate+0x214>
    1c3a:	e0 91 26 17 	lds	r30, 0x1726	; 0x801726 <pxCurrentTCB>
    1c3e:	f0 91 27 17 	lds	r31, 0x1727	; 0x801727 <pxCurrentTCB+0x1>
    1c42:	92 8d       	ldd	r25, Z+26	; 0x1a
    1c44:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1c46:	98 17       	cp	r25, r24
    1c48:	30 f4       	brcc	.+12     	; 0x1c56 <xTaskCreate+0x218>
    1c4a:	0e 94 ee 05 	call	0xbdc	; 0xbdc <vPortYield>
    1c4e:	81 e0       	ldi	r24, 0x01	; 1
    1c50:	05 c0       	rjmp	.+10     	; 0x1c5c <xTaskCreate+0x21e>
    1c52:	81 e0       	ldi	r24, 0x01	; 1
    1c54:	03 c0       	rjmp	.+6      	; 0x1c5c <xTaskCreate+0x21e>
    1c56:	81 e0       	ldi	r24, 0x01	; 1
    1c58:	01 c0       	rjmp	.+2      	; 0x1c5c <xTaskCreate+0x21e>
    1c5a:	8f ef       	ldi	r24, 0xFF	; 255
    1c5c:	df 91       	pop	r29
    1c5e:	cf 91       	pop	r28
    1c60:	0f 91       	pop	r16
    1c62:	ff 90       	pop	r15
    1c64:	ef 90       	pop	r14
    1c66:	df 90       	pop	r13
    1c68:	cf 90       	pop	r12
    1c6a:	bf 90       	pop	r11
    1c6c:	af 90       	pop	r10
    1c6e:	9f 90       	pop	r9
    1c70:	8f 90       	pop	r8
    1c72:	7f 90       	pop	r7
    1c74:	6f 90       	pop	r6
    1c76:	5f 90       	pop	r5
    1c78:	4f 90       	pop	r4
    1c7a:	08 95       	ret

00001c7c <vTaskStartScheduler>:
    1c7c:	ef 92       	push	r14
    1c7e:	ff 92       	push	r15
    1c80:	0f 93       	push	r16
    1c82:	0f 2e       	mov	r0, r31
    1c84:	fd ea       	ldi	r31, 0xAD	; 173
    1c86:	ef 2e       	mov	r14, r31
    1c88:	f6 e1       	ldi	r31, 0x16	; 22
    1c8a:	ff 2e       	mov	r15, r31
    1c8c:	f0 2d       	mov	r31, r0
    1c8e:	00 e0       	ldi	r16, 0x00	; 0
    1c90:	20 e0       	ldi	r18, 0x00	; 0
    1c92:	30 e0       	ldi	r19, 0x00	; 0
    1c94:	40 ec       	ldi	r20, 0xC0	; 192
    1c96:	50 e0       	ldi	r21, 0x00	; 0
    1c98:	66 e8       	ldi	r22, 0x86	; 134
    1c9a:	73 e0       	ldi	r23, 0x03	; 3
    1c9c:	8c e7       	ldi	r24, 0x7C	; 124
    1c9e:	90 e0       	ldi	r25, 0x00	; 0
    1ca0:	ce de       	rcall	.-612    	; 0x1a3e <xTaskCreate>
    1ca2:	81 30       	cpi	r24, 0x01	; 1
    1ca4:	19 f5       	brne	.+70     	; 0x1cec <vTaskStartScheduler+0x70>
    1ca6:	ed d5       	rcall	.+3034   	; 0x2882 <xTimerCreateTimerTask>
    1ca8:	81 30       	cpi	r24, 0x01	; 1
    1caa:	01 f5       	brne	.+64     	; 0x1cec <vTaskStartScheduler+0x70>
    1cac:	f8 94       	cli
    1cae:	8f ef       	ldi	r24, 0xFF	; 255
    1cb0:	9f ef       	ldi	r25, 0xFF	; 255
    1cb2:	dc 01       	movw	r26, r24
    1cb4:	80 93 af 16 	sts	0x16AF, r24	; 0x8016af <xNextTaskUnblockTime>
    1cb8:	90 93 b0 16 	sts	0x16B0, r25	; 0x8016b0 <xNextTaskUnblockTime+0x1>
    1cbc:	a0 93 b1 16 	sts	0x16B1, r26	; 0x8016b1 <xNextTaskUnblockTime+0x2>
    1cc0:	b0 93 b2 16 	sts	0x16B2, r27	; 0x8016b2 <xNextTaskUnblockTime+0x3>
    1cc4:	81 e0       	ldi	r24, 0x01	; 1
    1cc6:	80 93 b7 16 	sts	0x16B7, r24	; 0x8016b7 <xSchedulerRunning>
    1cca:	10 92 b9 16 	sts	0x16B9, r1	; 0x8016b9 <xTickCount>
    1cce:	10 92 ba 16 	sts	0x16BA, r1	; 0x8016ba <xTickCount+0x1>
    1cd2:	10 92 bb 16 	sts	0x16BB, r1	; 0x8016bb <xTickCount+0x2>
    1cd6:	10 92 bc 16 	sts	0x16BC, r1	; 0x8016bc <xTickCount+0x3>
    1cda:	e0 91 26 17 	lds	r30, 0x1726	; 0x801726 <pxCurrentTCB>
    1cde:	f0 91 27 17 	lds	r31, 0x1727	; 0x801727 <pxCurrentTCB+0x1>
    1ce2:	81 a5       	ldd	r24, Z+41	; 0x29
    1ce4:	0e 94 5f 03 	call	0x6be	; 0x6be <task_switch_in>
    1ce8:	0e 94 b2 05 	call	0xb64	; 0xb64 <xPortStartScheduler>
    1cec:	0f 91       	pop	r16
    1cee:	ff 90       	pop	r15
    1cf0:	ef 90       	pop	r14
    1cf2:	08 95       	ret

00001cf4 <vTaskSuspendAll>:
    1cf4:	80 91 ac 16 	lds	r24, 0x16AC	; 0x8016ac <uxSchedulerSuspended>
    1cf8:	8f 5f       	subi	r24, 0xFF	; 255
    1cfa:	80 93 ac 16 	sts	0x16AC, r24	; 0x8016ac <uxSchedulerSuspended>
    1cfe:	08 95       	ret

00001d00 <xTaskGetTickCount>:
    1d00:	0f b6       	in	r0, 0x3f	; 63
    1d02:	f8 94       	cli
    1d04:	0f 92       	push	r0
    1d06:	60 91 b9 16 	lds	r22, 0x16B9	; 0x8016b9 <xTickCount>
    1d0a:	70 91 ba 16 	lds	r23, 0x16BA	; 0x8016ba <xTickCount+0x1>
    1d0e:	80 91 bb 16 	lds	r24, 0x16BB	; 0x8016bb <xTickCount+0x2>
    1d12:	90 91 bc 16 	lds	r25, 0x16BC	; 0x8016bc <xTickCount+0x3>
    1d16:	0f 90       	pop	r0
    1d18:	0f be       	out	0x3f, r0	; 63
    1d1a:	08 95       	ret

00001d1c <xTaskIncrementTick>:
    1d1c:	9f 92       	push	r9
    1d1e:	af 92       	push	r10
    1d20:	bf 92       	push	r11
    1d22:	cf 92       	push	r12
    1d24:	df 92       	push	r13
    1d26:	ef 92       	push	r14
    1d28:	ff 92       	push	r15
    1d2a:	0f 93       	push	r16
    1d2c:	1f 93       	push	r17
    1d2e:	cf 93       	push	r28
    1d30:	df 93       	push	r29
    1d32:	80 91 ac 16 	lds	r24, 0x16AC	; 0x8016ac <uxSchedulerSuspended>
    1d36:	81 11       	cpse	r24, r1
    1d38:	ad c0       	rjmp	.+346    	; 0x1e94 <xTaskIncrementTick+0x178>
    1d3a:	c0 90 b9 16 	lds	r12, 0x16B9	; 0x8016b9 <xTickCount>
    1d3e:	d0 90 ba 16 	lds	r13, 0x16BA	; 0x8016ba <xTickCount+0x1>
    1d42:	e0 90 bb 16 	lds	r14, 0x16BB	; 0x8016bb <xTickCount+0x2>
    1d46:	f0 90 bc 16 	lds	r15, 0x16BC	; 0x8016bc <xTickCount+0x3>
    1d4a:	8f ef       	ldi	r24, 0xFF	; 255
    1d4c:	c8 1a       	sub	r12, r24
    1d4e:	d8 0a       	sbc	r13, r24
    1d50:	e8 0a       	sbc	r14, r24
    1d52:	f8 0a       	sbc	r15, r24
    1d54:	c0 92 b9 16 	sts	0x16B9, r12	; 0x8016b9 <xTickCount>
    1d58:	d0 92 ba 16 	sts	0x16BA, r13	; 0x8016ba <xTickCount+0x1>
    1d5c:	e0 92 bb 16 	sts	0x16BB, r14	; 0x8016bb <xTickCount+0x2>
    1d60:	f0 92 bc 16 	sts	0x16BC, r15	; 0x8016bc <xTickCount+0x3>
    1d64:	c1 14       	cp	r12, r1
    1d66:	d1 04       	cpc	r13, r1
    1d68:	e1 04       	cpc	r14, r1
    1d6a:	f1 04       	cpc	r15, r1
    1d6c:	b1 f4       	brne	.+44     	; 0x1d9a <xTaskIncrementTick+0x7e>
    1d6e:	80 91 e2 16 	lds	r24, 0x16E2	; 0x8016e2 <pxDelayedTaskList>
    1d72:	90 91 e3 16 	lds	r25, 0x16E3	; 0x8016e3 <pxDelayedTaskList+0x1>
    1d76:	20 91 e0 16 	lds	r18, 0x16E0	; 0x8016e0 <pxOverflowDelayedTaskList>
    1d7a:	30 91 e1 16 	lds	r19, 0x16E1	; 0x8016e1 <pxOverflowDelayedTaskList+0x1>
    1d7e:	30 93 e3 16 	sts	0x16E3, r19	; 0x8016e3 <pxDelayedTaskList+0x1>
    1d82:	20 93 e2 16 	sts	0x16E2, r18	; 0x8016e2 <pxDelayedTaskList>
    1d86:	90 93 e1 16 	sts	0x16E1, r25	; 0x8016e1 <pxOverflowDelayedTaskList+0x1>
    1d8a:	80 93 e0 16 	sts	0x16E0, r24	; 0x8016e0 <pxOverflowDelayedTaskList>
    1d8e:	80 91 b4 16 	lds	r24, 0x16B4	; 0x8016b4 <xNumOfOverflows>
    1d92:	8f 5f       	subi	r24, 0xFF	; 255
    1d94:	80 93 b4 16 	sts	0x16B4, r24	; 0x8016b4 <xNumOfOverflows>
    1d98:	b2 dd       	rcall	.-1180   	; 0x18fe <prvResetNextTaskUnblockTime>
    1d9a:	80 91 af 16 	lds	r24, 0x16AF	; 0x8016af <xNextTaskUnblockTime>
    1d9e:	90 91 b0 16 	lds	r25, 0x16B0	; 0x8016b0 <xNextTaskUnblockTime+0x1>
    1da2:	a0 91 b1 16 	lds	r26, 0x16B1	; 0x8016b1 <xNextTaskUnblockTime+0x2>
    1da6:	b0 91 b2 16 	lds	r27, 0x16B2	; 0x8016b2 <xNextTaskUnblockTime+0x3>
    1daa:	c8 16       	cp	r12, r24
    1dac:	d9 06       	cpc	r13, r25
    1dae:	ea 06       	cpc	r14, r26
    1db0:	fb 06       	cpc	r15, r27
    1db2:	10 f4       	brcc	.+4      	; 0x1db8 <xTaskIncrementTick+0x9c>
    1db4:	b1 2c       	mov	r11, r1
    1db6:	5d c0       	rjmp	.+186    	; 0x1e72 <xTaskIncrementTick+0x156>
    1db8:	b1 2c       	mov	r11, r1
    1dba:	0f 2e       	mov	r0, r31
    1dbc:	fb e0       	ldi	r31, 0x0B	; 11
    1dbe:	af 2e       	mov	r10, r31
    1dc0:	f0 2d       	mov	r31, r0
    1dc2:	99 24       	eor	r9, r9
    1dc4:	93 94       	inc	r9
    1dc6:	e0 91 e2 16 	lds	r30, 0x16E2	; 0x8016e2 <pxDelayedTaskList>
    1dca:	f0 91 e3 16 	lds	r31, 0x16E3	; 0x8016e3 <pxDelayedTaskList+0x1>
    1dce:	80 81       	ld	r24, Z
    1dd0:	81 11       	cpse	r24, r1
    1dd2:	0c c0       	rjmp	.+24     	; 0x1dec <xTaskIncrementTick+0xd0>
    1dd4:	8f ef       	ldi	r24, 0xFF	; 255
    1dd6:	9f ef       	ldi	r25, 0xFF	; 255
    1dd8:	dc 01       	movw	r26, r24
    1dda:	80 93 af 16 	sts	0x16AF, r24	; 0x8016af <xNextTaskUnblockTime>
    1dde:	90 93 b0 16 	sts	0x16B0, r25	; 0x8016b0 <xNextTaskUnblockTime+0x1>
    1de2:	a0 93 b1 16 	sts	0x16B1, r26	; 0x8016b1 <xNextTaskUnblockTime+0x2>
    1de6:	b0 93 b2 16 	sts	0x16B2, r27	; 0x8016b2 <xNextTaskUnblockTime+0x3>
    1dea:	43 c0       	rjmp	.+134    	; 0x1e72 <xTaskIncrementTick+0x156>
    1dec:	e0 91 e2 16 	lds	r30, 0x16E2	; 0x8016e2 <pxDelayedTaskList>
    1df0:	f0 91 e3 16 	lds	r31, 0x16E3	; 0x8016e3 <pxDelayedTaskList+0x1>
    1df4:	07 80       	ldd	r0, Z+7	; 0x07
    1df6:	f0 85       	ldd	r31, Z+8	; 0x08
    1df8:	e0 2d       	mov	r30, r0
    1dfa:	c0 85       	ldd	r28, Z+8	; 0x08
    1dfc:	d1 85       	ldd	r29, Z+9	; 0x09
    1dfe:	8a 81       	ldd	r24, Y+2	; 0x02
    1e00:	9b 81       	ldd	r25, Y+3	; 0x03
    1e02:	ac 81       	ldd	r26, Y+4	; 0x04
    1e04:	bd 81       	ldd	r27, Y+5	; 0x05
    1e06:	c8 16       	cp	r12, r24
    1e08:	d9 06       	cpc	r13, r25
    1e0a:	ea 06       	cpc	r14, r26
    1e0c:	fb 06       	cpc	r15, r27
    1e0e:	48 f4       	brcc	.+18     	; 0x1e22 <xTaskIncrementTick+0x106>
    1e10:	80 93 af 16 	sts	0x16AF, r24	; 0x8016af <xNextTaskUnblockTime>
    1e14:	90 93 b0 16 	sts	0x16B0, r25	; 0x8016b0 <xNextTaskUnblockTime+0x1>
    1e18:	a0 93 b1 16 	sts	0x16B1, r26	; 0x8016b1 <xNextTaskUnblockTime+0x2>
    1e1c:	b0 93 b2 16 	sts	0x16B2, r27	; 0x8016b2 <xNextTaskUnblockTime+0x3>
    1e20:	28 c0       	rjmp	.+80     	; 0x1e72 <xTaskIncrementTick+0x156>
    1e22:	8e 01       	movw	r16, r28
    1e24:	0e 5f       	subi	r16, 0xFE	; 254
    1e26:	1f 4f       	sbci	r17, 0xFF	; 255
    1e28:	c8 01       	movw	r24, r16
    1e2a:	0e 94 19 05 	call	0xa32	; 0xa32 <uxListRemove>
    1e2e:	88 8d       	ldd	r24, Y+24	; 0x18
    1e30:	99 8d       	ldd	r25, Y+25	; 0x19
    1e32:	89 2b       	or	r24, r25
    1e34:	21 f0       	breq	.+8      	; 0x1e3e <xTaskIncrementTick+0x122>
    1e36:	ce 01       	movw	r24, r28
    1e38:	0e 96       	adiw	r24, 0x0e	; 14
    1e3a:	0e 94 19 05 	call	0xa32	; 0xa32 <uxListRemove>
    1e3e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1e40:	90 91 b8 16 	lds	r25, 0x16B8	; 0x8016b8 <uxTopReadyPriority>
    1e44:	98 17       	cp	r25, r24
    1e46:	10 f4       	brcc	.+4      	; 0x1e4c <xTaskIncrementTick+0x130>
    1e48:	80 93 b8 16 	sts	0x16B8, r24	; 0x8016b8 <uxTopReadyPriority>
    1e4c:	a8 9e       	mul	r10, r24
    1e4e:	c0 01       	movw	r24, r0
    1e50:	11 24       	eor	r1, r1
    1e52:	b8 01       	movw	r22, r16
    1e54:	86 50       	subi	r24, 0x06	; 6
    1e56:	99 4e       	sbci	r25, 0xE9	; 233
    1e58:	0e 94 bb 04 	call	0x976	; 0x976 <vListInsertEnd>
    1e5c:	e0 91 26 17 	lds	r30, 0x1726	; 0x801726 <pxCurrentTCB>
    1e60:	f0 91 27 17 	lds	r31, 0x1727	; 0x801727 <pxCurrentTCB+0x1>
    1e64:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1e66:	82 8d       	ldd	r24, Z+26	; 0x1a
    1e68:	98 17       	cp	r25, r24
    1e6a:	08 f4       	brcc	.+2      	; 0x1e6e <xTaskIncrementTick+0x152>
    1e6c:	ac cf       	rjmp	.-168    	; 0x1dc6 <xTaskIncrementTick+0xaa>
    1e6e:	b9 2c       	mov	r11, r9
    1e70:	aa cf       	rjmp	.-172    	; 0x1dc6 <xTaskIncrementTick+0xaa>
    1e72:	e0 91 26 17 	lds	r30, 0x1726	; 0x801726 <pxCurrentTCB>
    1e76:	f0 91 27 17 	lds	r31, 0x1727	; 0x801727 <pxCurrentTCB+0x1>
    1e7a:	e2 8d       	ldd	r30, Z+26	; 0x1a
    1e7c:	8b e0       	ldi	r24, 0x0B	; 11
    1e7e:	e8 9f       	mul	r30, r24
    1e80:	f0 01       	movw	r30, r0
    1e82:	11 24       	eor	r1, r1
    1e84:	e6 50       	subi	r30, 0x06	; 6
    1e86:	f9 4e       	sbci	r31, 0xE9	; 233
    1e88:	80 81       	ld	r24, Z
    1e8a:	82 30       	cpi	r24, 0x02	; 2
    1e8c:	48 f0       	brcs	.+18     	; 0x1ea0 <xTaskIncrementTick+0x184>
    1e8e:	bb 24       	eor	r11, r11
    1e90:	b3 94       	inc	r11
    1e92:	06 c0       	rjmp	.+12     	; 0x1ea0 <xTaskIncrementTick+0x184>
    1e94:	80 91 b6 16 	lds	r24, 0x16B6	; 0x8016b6 <uxPendedTicks>
    1e98:	8f 5f       	subi	r24, 0xFF	; 255
    1e9a:	80 93 b6 16 	sts	0x16B6, r24	; 0x8016b6 <uxPendedTicks>
    1e9e:	b1 2c       	mov	r11, r1
    1ea0:	80 91 b5 16 	lds	r24, 0x16B5	; 0x8016b5 <xYieldPending>
    1ea4:	88 23       	and	r24, r24
    1ea6:	11 f0       	breq	.+4      	; 0x1eac <xTaskIncrementTick+0x190>
    1ea8:	bb 24       	eor	r11, r11
    1eaa:	b3 94       	inc	r11
    1eac:	8b 2d       	mov	r24, r11
    1eae:	df 91       	pop	r29
    1eb0:	cf 91       	pop	r28
    1eb2:	1f 91       	pop	r17
    1eb4:	0f 91       	pop	r16
    1eb6:	ff 90       	pop	r15
    1eb8:	ef 90       	pop	r14
    1eba:	df 90       	pop	r13
    1ebc:	cf 90       	pop	r12
    1ebe:	bf 90       	pop	r11
    1ec0:	af 90       	pop	r10
    1ec2:	9f 90       	pop	r9
    1ec4:	08 95       	ret

00001ec6 <xTaskResumeAll>:
    1ec6:	cf 92       	push	r12
    1ec8:	df 92       	push	r13
    1eca:	ef 92       	push	r14
    1ecc:	ff 92       	push	r15
    1ece:	0f 93       	push	r16
    1ed0:	1f 93       	push	r17
    1ed2:	cf 93       	push	r28
    1ed4:	df 93       	push	r29
    1ed6:	0f b6       	in	r0, 0x3f	; 63
    1ed8:	f8 94       	cli
    1eda:	0f 92       	push	r0
    1edc:	80 91 ac 16 	lds	r24, 0x16AC	; 0x8016ac <uxSchedulerSuspended>
    1ee0:	81 50       	subi	r24, 0x01	; 1
    1ee2:	80 93 ac 16 	sts	0x16AC, r24	; 0x8016ac <uxSchedulerSuspended>
    1ee6:	80 91 ac 16 	lds	r24, 0x16AC	; 0x8016ac <uxSchedulerSuspended>
    1eea:	81 11       	cpse	r24, r1
    1eec:	5a c0       	rjmp	.+180    	; 0x1fa2 <xTaskResumeAll+0xdc>
    1eee:	80 91 bd 16 	lds	r24, 0x16BD	; 0x8016bd <uxCurrentNumberOfTasks>
    1ef2:	81 11       	cpse	r24, r1
    1ef4:	2c c0       	rjmp	.+88     	; 0x1f4e <xTaskResumeAll+0x88>
    1ef6:	58 c0       	rjmp	.+176    	; 0x1fa8 <xTaskResumeAll+0xe2>
    1ef8:	d7 01       	movw	r26, r14
    1efa:	17 96       	adiw	r26, 0x07	; 7
    1efc:	ed 91       	ld	r30, X+
    1efe:	fc 91       	ld	r31, X
    1f00:	18 97       	sbiw	r26, 0x08	; 8
    1f02:	c0 85       	ldd	r28, Z+8	; 0x08
    1f04:	d1 85       	ldd	r29, Z+9	; 0x09
    1f06:	ce 01       	movw	r24, r28
    1f08:	0e 96       	adiw	r24, 0x0e	; 14
    1f0a:	0e 94 19 05 	call	0xa32	; 0xa32 <uxListRemove>
    1f0e:	8e 01       	movw	r16, r28
    1f10:	0e 5f       	subi	r16, 0xFE	; 254
    1f12:	1f 4f       	sbci	r17, 0xFF	; 255
    1f14:	c8 01       	movw	r24, r16
    1f16:	0e 94 19 05 	call	0xa32	; 0xa32 <uxListRemove>
    1f1a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1f1c:	90 91 b8 16 	lds	r25, 0x16B8	; 0x8016b8 <uxTopReadyPriority>
    1f20:	98 17       	cp	r25, r24
    1f22:	10 f4       	brcc	.+4      	; 0x1f28 <xTaskResumeAll+0x62>
    1f24:	80 93 b8 16 	sts	0x16B8, r24	; 0x8016b8 <uxTopReadyPriority>
    1f28:	d8 9e       	mul	r13, r24
    1f2a:	c0 01       	movw	r24, r0
    1f2c:	11 24       	eor	r1, r1
    1f2e:	b8 01       	movw	r22, r16
    1f30:	86 50       	subi	r24, 0x06	; 6
    1f32:	99 4e       	sbci	r25, 0xE9	; 233
    1f34:	0e 94 bb 04 	call	0x976	; 0x976 <vListInsertEnd>
    1f38:	e0 91 26 17 	lds	r30, 0x1726	; 0x801726 <pxCurrentTCB>
    1f3c:	f0 91 27 17 	lds	r31, 0x1727	; 0x801727 <pxCurrentTCB+0x1>
    1f40:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1f42:	82 8d       	ldd	r24, Z+26	; 0x1a
    1f44:	98 17       	cp	r25, r24
    1f46:	88 f0       	brcs	.+34     	; 0x1f6a <xTaskResumeAll+0xa4>
    1f48:	c0 92 b5 16 	sts	0x16B5, r12	; 0x8016b5 <xYieldPending>
    1f4c:	0e c0       	rjmp	.+28     	; 0x1f6a <xTaskResumeAll+0xa4>
    1f4e:	c0 e0       	ldi	r28, 0x00	; 0
    1f50:	d0 e0       	ldi	r29, 0x00	; 0
    1f52:	0f 2e       	mov	r0, r31
    1f54:	f5 ed       	ldi	r31, 0xD5	; 213
    1f56:	ef 2e       	mov	r14, r31
    1f58:	f6 e1       	ldi	r31, 0x16	; 22
    1f5a:	ff 2e       	mov	r15, r31
    1f5c:	f0 2d       	mov	r31, r0
    1f5e:	0f 2e       	mov	r0, r31
    1f60:	fb e0       	ldi	r31, 0x0B	; 11
    1f62:	df 2e       	mov	r13, r31
    1f64:	f0 2d       	mov	r31, r0
    1f66:	cc 24       	eor	r12, r12
    1f68:	c3 94       	inc	r12
    1f6a:	f7 01       	movw	r30, r14
    1f6c:	80 81       	ld	r24, Z
    1f6e:	81 11       	cpse	r24, r1
    1f70:	c3 cf       	rjmp	.-122    	; 0x1ef8 <xTaskResumeAll+0x32>
    1f72:	cd 2b       	or	r28, r29
    1f74:	09 f0       	breq	.+2      	; 0x1f78 <xTaskResumeAll+0xb2>
    1f76:	c3 dc       	rcall	.-1658   	; 0x18fe <prvResetNextTaskUnblockTime>
    1f78:	c0 91 b6 16 	lds	r28, 0x16B6	; 0x8016b6 <uxPendedTicks>
    1f7c:	cc 23       	and	r28, r28
    1f7e:	49 f0       	breq	.+18     	; 0x1f92 <xTaskResumeAll+0xcc>
    1f80:	d1 e0       	ldi	r29, 0x01	; 1
    1f82:	cc de       	rcall	.-616    	; 0x1d1c <xTaskIncrementTick>
    1f84:	81 11       	cpse	r24, r1
    1f86:	d0 93 b5 16 	sts	0x16B5, r29	; 0x8016b5 <xYieldPending>
    1f8a:	c1 50       	subi	r28, 0x01	; 1
    1f8c:	d1 f7       	brne	.-12     	; 0x1f82 <xTaskResumeAll+0xbc>
    1f8e:	10 92 b6 16 	sts	0x16B6, r1	; 0x8016b6 <uxPendedTicks>
    1f92:	80 91 b5 16 	lds	r24, 0x16B5	; 0x8016b5 <xYieldPending>
    1f96:	88 23       	and	r24, r24
    1f98:	31 f0       	breq	.+12     	; 0x1fa6 <xTaskResumeAll+0xe0>
    1f9a:	0e 94 ee 05 	call	0xbdc	; 0xbdc <vPortYield>
    1f9e:	81 e0       	ldi	r24, 0x01	; 1
    1fa0:	03 c0       	rjmp	.+6      	; 0x1fa8 <xTaskResumeAll+0xe2>
    1fa2:	80 e0       	ldi	r24, 0x00	; 0
    1fa4:	01 c0       	rjmp	.+2      	; 0x1fa8 <xTaskResumeAll+0xe2>
    1fa6:	80 e0       	ldi	r24, 0x00	; 0
    1fa8:	0f 90       	pop	r0
    1faa:	0f be       	out	0x3f, r0	; 63
    1fac:	df 91       	pop	r29
    1fae:	cf 91       	pop	r28
    1fb0:	1f 91       	pop	r17
    1fb2:	0f 91       	pop	r16
    1fb4:	ff 90       	pop	r15
    1fb6:	ef 90       	pop	r14
    1fb8:	df 90       	pop	r13
    1fba:	cf 90       	pop	r12
    1fbc:	08 95       	ret

00001fbe <vTaskDelayUntil>:
    1fbe:	cf 92       	push	r12
    1fc0:	df 92       	push	r13
    1fc2:	ef 92       	push	r14
    1fc4:	ff 92       	push	r15
    1fc6:	0f 93       	push	r16
    1fc8:	1f 93       	push	r17
    1fca:	cf 93       	push	r28
    1fcc:	df 93       	push	r29
    1fce:	ec 01       	movw	r28, r24
    1fd0:	6a 01       	movw	r12, r20
    1fd2:	7b 01       	movw	r14, r22
    1fd4:	8f de       	rcall	.-738    	; 0x1cf4 <vTaskSuspendAll>
    1fd6:	00 91 b9 16 	lds	r16, 0x16B9	; 0x8016b9 <xTickCount>
    1fda:	10 91 ba 16 	lds	r17, 0x16BA	; 0x8016ba <xTickCount+0x1>
    1fde:	20 91 bb 16 	lds	r18, 0x16BB	; 0x8016bb <xTickCount+0x2>
    1fe2:	30 91 bc 16 	lds	r19, 0x16BC	; 0x8016bc <xTickCount+0x3>
    1fe6:	88 81       	ld	r24, Y
    1fe8:	99 81       	ldd	r25, Y+1	; 0x01
    1fea:	aa 81       	ldd	r26, Y+2	; 0x02
    1fec:	bb 81       	ldd	r27, Y+3	; 0x03
    1fee:	ac 01       	movw	r20, r24
    1ff0:	bd 01       	movw	r22, r26
    1ff2:	4c 0d       	add	r20, r12
    1ff4:	5d 1d       	adc	r21, r13
    1ff6:	6e 1d       	adc	r22, r14
    1ff8:	7f 1d       	adc	r23, r15
    1ffa:	08 17       	cp	r16, r24
    1ffc:	19 07       	cpc	r17, r25
    1ffe:	2a 07       	cpc	r18, r26
    2000:	3b 07       	cpc	r19, r27
    2002:	78 f4       	brcc	.+30     	; 0x2022 <vTaskDelayUntil+0x64>
    2004:	48 17       	cp	r20, r24
    2006:	59 07       	cpc	r21, r25
    2008:	6a 07       	cpc	r22, r26
    200a:	7b 07       	cpc	r23, r27
    200c:	40 f5       	brcc	.+80     	; 0x205e <vTaskDelayUntil+0xa0>
    200e:	48 83       	st	Y, r20
    2010:	59 83       	std	Y+1, r21	; 0x01
    2012:	6a 83       	std	Y+2, r22	; 0x02
    2014:	7b 83       	std	Y+3, r23	; 0x03
    2016:	04 17       	cp	r16, r20
    2018:	15 07       	cpc	r17, r21
    201a:	26 07       	cpc	r18, r22
    201c:	37 07       	cpc	r19, r23
    201e:	a0 f4       	brcc	.+40     	; 0x2048 <vTaskDelayUntil+0x8a>
    2020:	0b c0       	rjmp	.+22     	; 0x2038 <vTaskDelayUntil+0x7a>
    2022:	48 17       	cp	r20, r24
    2024:	59 07       	cpc	r21, r25
    2026:	6a 07       	cpc	r22, r26
    2028:	7b 07       	cpc	r23, r27
    202a:	a0 f0       	brcs	.+40     	; 0x2054 <vTaskDelayUntil+0x96>
    202c:	04 17       	cp	r16, r20
    202e:	15 07       	cpc	r17, r21
    2030:	26 07       	cpc	r18, r22
    2032:	37 07       	cpc	r19, r23
    2034:	78 f0       	brcs	.+30     	; 0x2054 <vTaskDelayUntil+0x96>
    2036:	13 c0       	rjmp	.+38     	; 0x205e <vTaskDelayUntil+0xa0>
    2038:	cb 01       	movw	r24, r22
    203a:	ba 01       	movw	r22, r20
    203c:	60 1b       	sub	r22, r16
    203e:	71 0b       	sbc	r23, r17
    2040:	82 0b       	sbc	r24, r18
    2042:	93 0b       	sbc	r25, r19
    2044:	40 e0       	ldi	r20, 0x00	; 0
    2046:	85 dc       	rcall	.-1782   	; 0x1952 <prvAddCurrentTaskToDelayedList>
    2048:	3e df       	rcall	.-388    	; 0x1ec6 <xTaskResumeAll>
    204a:	81 11       	cpse	r24, r1
    204c:	0d c0       	rjmp	.+26     	; 0x2068 <vTaskDelayUntil+0xaa>
    204e:	0e 94 ee 05 	call	0xbdc	; 0xbdc <vPortYield>
    2052:	0a c0       	rjmp	.+20     	; 0x2068 <vTaskDelayUntil+0xaa>
    2054:	48 83       	st	Y, r20
    2056:	59 83       	std	Y+1, r21	; 0x01
    2058:	6a 83       	std	Y+2, r22	; 0x02
    205a:	7b 83       	std	Y+3, r23	; 0x03
    205c:	ed cf       	rjmp	.-38     	; 0x2038 <vTaskDelayUntil+0x7a>
    205e:	48 83       	st	Y, r20
    2060:	59 83       	std	Y+1, r21	; 0x01
    2062:	6a 83       	std	Y+2, r22	; 0x02
    2064:	7b 83       	std	Y+3, r23	; 0x03
    2066:	f0 cf       	rjmp	.-32     	; 0x2048 <vTaskDelayUntil+0x8a>
    2068:	df 91       	pop	r29
    206a:	cf 91       	pop	r28
    206c:	1f 91       	pop	r17
    206e:	0f 91       	pop	r16
    2070:	ff 90       	pop	r15
    2072:	ef 90       	pop	r14
    2074:	df 90       	pop	r13
    2076:	cf 90       	pop	r12
    2078:	08 95       	ret

0000207a <vTaskDelay>:
    207a:	cf 92       	push	r12
    207c:	df 92       	push	r13
    207e:	ef 92       	push	r14
    2080:	ff 92       	push	r15
    2082:	6b 01       	movw	r12, r22
    2084:	7c 01       	movw	r14, r24
    2086:	67 2b       	or	r22, r23
    2088:	68 2b       	or	r22, r24
    208a:	69 2b       	or	r22, r25
    208c:	41 f0       	breq	.+16     	; 0x209e <vTaskDelay+0x24>
    208e:	32 de       	rcall	.-924    	; 0x1cf4 <vTaskSuspendAll>
    2090:	40 e0       	ldi	r20, 0x00	; 0
    2092:	c7 01       	movw	r24, r14
    2094:	b6 01       	movw	r22, r12
    2096:	5d dc       	rcall	.-1862   	; 0x1952 <prvAddCurrentTaskToDelayedList>
    2098:	16 df       	rcall	.-468    	; 0x1ec6 <xTaskResumeAll>
    209a:	81 11       	cpse	r24, r1
    209c:	02 c0       	rjmp	.+4      	; 0x20a2 <vTaskDelay+0x28>
    209e:	0e 94 ee 05 	call	0xbdc	; 0xbdc <vPortYield>
    20a2:	ff 90       	pop	r15
    20a4:	ef 90       	pop	r14
    20a6:	df 90       	pop	r13
    20a8:	cf 90       	pop	r12
    20aa:	08 95       	ret

000020ac <vTaskSetApplicationTaskTag>:
    20ac:	00 97       	sbiw	r24, 0x00	; 0
    20ae:	21 f4       	brne	.+8      	; 0x20b8 <vTaskSetApplicationTaskTag+0xc>
    20b0:	80 91 26 17 	lds	r24, 0x1726	; 0x801726 <pxCurrentTCB>
    20b4:	90 91 27 17 	lds	r25, 0x1727	; 0x801727 <pxCurrentTCB+0x1>
    20b8:	0f b6       	in	r0, 0x3f	; 63
    20ba:	f8 94       	cli
    20bc:	0f 92       	push	r0
    20be:	fc 01       	movw	r30, r24
    20c0:	72 a7       	std	Z+42, r23	; 0x2a
    20c2:	61 a7       	std	Z+41, r22	; 0x29
    20c4:	0f 90       	pop	r0
    20c6:	0f be       	out	0x3f, r0	; 63
    20c8:	08 95       	ret

000020ca <vTaskSwitchContext>:
    20ca:	80 91 ac 16 	lds	r24, 0x16AC	; 0x8016ac <uxSchedulerSuspended>
    20ce:	88 23       	and	r24, r24
    20d0:	21 f0       	breq	.+8      	; 0x20da <vTaskSwitchContext+0x10>
    20d2:	81 e0       	ldi	r24, 0x01	; 1
    20d4:	80 93 b5 16 	sts	0x16B5, r24	; 0x8016b5 <xYieldPending>
    20d8:	08 95       	ret
    20da:	10 92 b5 16 	sts	0x16B5, r1	; 0x8016b5 <xYieldPending>
    20de:	e0 91 26 17 	lds	r30, 0x1726	; 0x801726 <pxCurrentTCB>
    20e2:	f0 91 27 17 	lds	r31, 0x1727	; 0x801727 <pxCurrentTCB+0x1>
    20e6:	81 a5       	ldd	r24, Z+41	; 0x29
    20e8:	0e 94 69 03 	call	0x6d2	; 0x6d2 <task_switch_out>
    20ec:	a0 91 26 17 	lds	r26, 0x1726	; 0x801726 <pxCurrentTCB>
    20f0:	b0 91 27 17 	lds	r27, 0x1727	; 0x801727 <pxCurrentTCB+0x1>
    20f4:	e0 91 26 17 	lds	r30, 0x1726	; 0x801726 <pxCurrentTCB>
    20f8:	f0 91 27 17 	lds	r31, 0x1727	; 0x801727 <pxCurrentTCB+0x1>
    20fc:	2d 91       	ld	r18, X+
    20fe:	3c 91       	ld	r19, X
    2100:	83 8d       	ldd	r24, Z+27	; 0x1b
    2102:	94 8d       	ldd	r25, Z+28	; 0x1c
    2104:	82 17       	cp	r24, r18
    2106:	93 07       	cpc	r25, r19
    2108:	58 f0       	brcs	.+22     	; 0x2120 <vTaskSwitchContext+0x56>
    210a:	60 91 26 17 	lds	r22, 0x1726	; 0x801726 <pxCurrentTCB>
    210e:	70 91 27 17 	lds	r23, 0x1727	; 0x801727 <pxCurrentTCB+0x1>
    2112:	80 91 26 17 	lds	r24, 0x1726	; 0x801726 <pxCurrentTCB>
    2116:	90 91 27 17 	lds	r25, 0x1727	; 0x801727 <pxCurrentTCB+0x1>
    211a:	63 5e       	subi	r22, 0xE3	; 227
    211c:	7f 4f       	sbci	r23, 0xFF	; 255
    211e:	d3 d4       	rcall	.+2470   	; 0x2ac6 <vApplicationStackOverflowHook>
    2120:	80 91 b8 16 	lds	r24, 0x16B8	; 0x8016b8 <uxTopReadyPriority>
    2124:	28 2f       	mov	r18, r24
    2126:	30 e0       	ldi	r19, 0x00	; 0
    2128:	9b e0       	ldi	r25, 0x0B	; 11
    212a:	89 9f       	mul	r24, r25
    212c:	f0 01       	movw	r30, r0
    212e:	11 24       	eor	r1, r1
    2130:	e6 50       	subi	r30, 0x06	; 6
    2132:	f9 4e       	sbci	r31, 0xE9	; 233
    2134:	90 81       	ld	r25, Z
    2136:	91 11       	cpse	r25, r1
    2138:	0e c0       	rjmp	.+28     	; 0x2156 <vTaskSwitchContext+0x8c>
    213a:	4b e0       	ldi	r20, 0x0B	; 11
    213c:	81 50       	subi	r24, 0x01	; 1
    213e:	28 2f       	mov	r18, r24
    2140:	30 e0       	ldi	r19, 0x00	; 0
    2142:	42 9f       	mul	r20, r18
    2144:	f0 01       	movw	r30, r0
    2146:	43 9f       	mul	r20, r19
    2148:	f0 0d       	add	r31, r0
    214a:	11 24       	eor	r1, r1
    214c:	e6 50       	subi	r30, 0x06	; 6
    214e:	f9 4e       	sbci	r31, 0xE9	; 233
    2150:	90 81       	ld	r25, Z
    2152:	99 23       	and	r25, r25
    2154:	99 f3       	breq	.-26     	; 0x213c <vTaskSwitchContext+0x72>
    2156:	9b e0       	ldi	r25, 0x0B	; 11
    2158:	92 9f       	mul	r25, r18
    215a:	a0 01       	movw	r20, r0
    215c:	93 9f       	mul	r25, r19
    215e:	50 0d       	add	r21, r0
    2160:	11 24       	eor	r1, r1
    2162:	da 01       	movw	r26, r20
    2164:	a6 50       	subi	r26, 0x06	; 6
    2166:	b9 4e       	sbci	r27, 0xE9	; 233
    2168:	11 96       	adiw	r26, 0x01	; 1
    216a:	ed 91       	ld	r30, X+
    216c:	fc 91       	ld	r31, X
    216e:	12 97       	sbiw	r26, 0x02	; 2
    2170:	04 80       	ldd	r0, Z+4	; 0x04
    2172:	f5 81       	ldd	r31, Z+5	; 0x05
    2174:	e0 2d       	mov	r30, r0
    2176:	12 96       	adiw	r26, 0x02	; 2
    2178:	fc 93       	st	X, r31
    217a:	ee 93       	st	-X, r30
    217c:	11 97       	sbiw	r26, 0x01	; 1
    217e:	43 50       	subi	r20, 0x03	; 3
    2180:	59 4e       	sbci	r21, 0xE9	; 233
    2182:	e4 17       	cp	r30, r20
    2184:	f5 07       	cpc	r31, r21
    2186:	29 f4       	brne	.+10     	; 0x2192 <vTaskSwitchContext+0xc8>
    2188:	44 81       	ldd	r20, Z+4	; 0x04
    218a:	55 81       	ldd	r21, Z+5	; 0x05
    218c:	fd 01       	movw	r30, r26
    218e:	52 83       	std	Z+2, r21	; 0x02
    2190:	41 83       	std	Z+1, r20	; 0x01
    2192:	9b e0       	ldi	r25, 0x0B	; 11
    2194:	92 9f       	mul	r25, r18
    2196:	f0 01       	movw	r30, r0
    2198:	93 9f       	mul	r25, r19
    219a:	f0 0d       	add	r31, r0
    219c:	11 24       	eor	r1, r1
    219e:	e6 50       	subi	r30, 0x06	; 6
    21a0:	f9 4e       	sbci	r31, 0xE9	; 233
    21a2:	01 80       	ldd	r0, Z+1	; 0x01
    21a4:	f2 81       	ldd	r31, Z+2	; 0x02
    21a6:	e0 2d       	mov	r30, r0
    21a8:	20 85       	ldd	r18, Z+8	; 0x08
    21aa:	31 85       	ldd	r19, Z+9	; 0x09
    21ac:	30 93 27 17 	sts	0x1727, r19	; 0x801727 <pxCurrentTCB+0x1>
    21b0:	20 93 26 17 	sts	0x1726, r18	; 0x801726 <pxCurrentTCB>
    21b4:	80 93 b8 16 	sts	0x16B8, r24	; 0x8016b8 <uxTopReadyPriority>
    21b8:	e0 91 26 17 	lds	r30, 0x1726	; 0x801726 <pxCurrentTCB>
    21bc:	f0 91 27 17 	lds	r31, 0x1727	; 0x801727 <pxCurrentTCB+0x1>
    21c0:	81 a5       	ldd	r24, Z+41	; 0x29
    21c2:	0c 94 5f 03 	jmp	0x6be	; 0x6be <task_switch_in>
    21c6:	08 95       	ret

000021c8 <vTaskPlaceOnEventList>:
    21c8:	cf 92       	push	r12
    21ca:	df 92       	push	r13
    21cc:	ef 92       	push	r14
    21ce:	ff 92       	push	r15
    21d0:	6a 01       	movw	r12, r20
    21d2:	7b 01       	movw	r14, r22
    21d4:	60 91 26 17 	lds	r22, 0x1726	; 0x801726 <pxCurrentTCB>
    21d8:	70 91 27 17 	lds	r23, 0x1727	; 0x801727 <pxCurrentTCB+0x1>
    21dc:	62 5f       	subi	r22, 0xF2	; 242
    21de:	7f 4f       	sbci	r23, 0xFF	; 255
    21e0:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <vListInsert>
    21e4:	41 e0       	ldi	r20, 0x01	; 1
    21e6:	c7 01       	movw	r24, r14
    21e8:	b6 01       	movw	r22, r12
    21ea:	b3 db       	rcall	.-2202   	; 0x1952 <prvAddCurrentTaskToDelayedList>
    21ec:	ff 90       	pop	r15
    21ee:	ef 90       	pop	r14
    21f0:	df 90       	pop	r13
    21f2:	cf 90       	pop	r12
    21f4:	08 95       	ret

000021f6 <vTaskPlaceOnEventListRestricted>:
    21f6:	cf 92       	push	r12
    21f8:	df 92       	push	r13
    21fa:	ef 92       	push	r14
    21fc:	ff 92       	push	r15
    21fe:	cf 93       	push	r28
    2200:	6a 01       	movw	r12, r20
    2202:	7b 01       	movw	r14, r22
    2204:	c2 2f       	mov	r28, r18
    2206:	60 91 26 17 	lds	r22, 0x1726	; 0x801726 <pxCurrentTCB>
    220a:	70 91 27 17 	lds	r23, 0x1727	; 0x801727 <pxCurrentTCB+0x1>
    220e:	62 5f       	subi	r22, 0xF2	; 242
    2210:	7f 4f       	sbci	r23, 0xFF	; 255
    2212:	0e 94 bb 04 	call	0x976	; 0x976 <vListInsertEnd>
    2216:	cc 23       	and	r28, r28
    2218:	21 f0       	breq	.+8      	; 0x2222 <__stack+0x23>
    221a:	cc 24       	eor	r12, r12
    221c:	ca 94       	dec	r12
    221e:	dc 2c       	mov	r13, r12
    2220:	76 01       	movw	r14, r12
    2222:	4c 2f       	mov	r20, r28
    2224:	c7 01       	movw	r24, r14
    2226:	b6 01       	movw	r22, r12
    2228:	94 db       	rcall	.-2264   	; 0x1952 <prvAddCurrentTaskToDelayedList>
    222a:	cf 91       	pop	r28
    222c:	ff 90       	pop	r15
    222e:	ef 90       	pop	r14
    2230:	df 90       	pop	r13
    2232:	cf 90       	pop	r12
    2234:	08 95       	ret

00002236 <xTaskRemoveFromEventList>:
    2236:	0f 93       	push	r16
    2238:	1f 93       	push	r17
    223a:	cf 93       	push	r28
    223c:	df 93       	push	r29
    223e:	dc 01       	movw	r26, r24
    2240:	17 96       	adiw	r26, 0x07	; 7
    2242:	ed 91       	ld	r30, X+
    2244:	fc 91       	ld	r31, X
    2246:	18 97       	sbiw	r26, 0x08	; 8
    2248:	c0 85       	ldd	r28, Z+8	; 0x08
    224a:	d1 85       	ldd	r29, Z+9	; 0x09
    224c:	8e 01       	movw	r16, r28
    224e:	02 5f       	subi	r16, 0xF2	; 242
    2250:	1f 4f       	sbci	r17, 0xFF	; 255
    2252:	c8 01       	movw	r24, r16
    2254:	0e 94 19 05 	call	0xa32	; 0xa32 <uxListRemove>
    2258:	80 91 ac 16 	lds	r24, 0x16AC	; 0x8016ac <uxSchedulerSuspended>
    225c:	81 11       	cpse	r24, r1
    225e:	16 c0       	rjmp	.+44     	; 0x228c <xTaskRemoveFromEventList+0x56>
    2260:	0c 50       	subi	r16, 0x0C	; 12
    2262:	11 09       	sbc	r17, r1
    2264:	c8 01       	movw	r24, r16
    2266:	0e 94 19 05 	call	0xa32	; 0xa32 <uxListRemove>
    226a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    226c:	90 91 b8 16 	lds	r25, 0x16B8	; 0x8016b8 <uxTopReadyPriority>
    2270:	98 17       	cp	r25, r24
    2272:	10 f4       	brcc	.+4      	; 0x2278 <xTaskRemoveFromEventList+0x42>
    2274:	80 93 b8 16 	sts	0x16B8, r24	; 0x8016b8 <uxTopReadyPriority>
    2278:	bb e0       	ldi	r27, 0x0B	; 11
    227a:	8b 9f       	mul	r24, r27
    227c:	c0 01       	movw	r24, r0
    227e:	11 24       	eor	r1, r1
    2280:	b8 01       	movw	r22, r16
    2282:	86 50       	subi	r24, 0x06	; 6
    2284:	99 4e       	sbci	r25, 0xE9	; 233
    2286:	0e 94 bb 04 	call	0x976	; 0x976 <vListInsertEnd>
    228a:	05 c0       	rjmp	.+10     	; 0x2296 <xTaskRemoveFromEventList+0x60>
    228c:	b8 01       	movw	r22, r16
    228e:	85 ed       	ldi	r24, 0xD5	; 213
    2290:	96 e1       	ldi	r25, 0x16	; 22
    2292:	0e 94 bb 04 	call	0x976	; 0x976 <vListInsertEnd>
    2296:	e0 91 26 17 	lds	r30, 0x1726	; 0x801726 <pxCurrentTCB>
    229a:	f0 91 27 17 	lds	r31, 0x1727	; 0x801727 <pxCurrentTCB+0x1>
    229e:	9a 8d       	ldd	r25, Y+26	; 0x1a
    22a0:	82 8d       	ldd	r24, Z+26	; 0x1a
    22a2:	89 17       	cp	r24, r25
    22a4:	20 f4       	brcc	.+8      	; 0x22ae <xTaskRemoveFromEventList+0x78>
    22a6:	81 e0       	ldi	r24, 0x01	; 1
    22a8:	80 93 b5 16 	sts	0x16B5, r24	; 0x8016b5 <xYieldPending>
    22ac:	01 c0       	rjmp	.+2      	; 0x22b0 <xTaskRemoveFromEventList+0x7a>
    22ae:	80 e0       	ldi	r24, 0x00	; 0
    22b0:	df 91       	pop	r29
    22b2:	cf 91       	pop	r28
    22b4:	1f 91       	pop	r17
    22b6:	0f 91       	pop	r16
    22b8:	08 95       	ret

000022ba <vTaskSetTimeOutState>:
    22ba:	0f b6       	in	r0, 0x3f	; 63
    22bc:	f8 94       	cli
    22be:	0f 92       	push	r0
    22c0:	20 91 b4 16 	lds	r18, 0x16B4	; 0x8016b4 <xNumOfOverflows>
    22c4:	fc 01       	movw	r30, r24
    22c6:	20 83       	st	Z, r18
    22c8:	40 91 b9 16 	lds	r20, 0x16B9	; 0x8016b9 <xTickCount>
    22cc:	50 91 ba 16 	lds	r21, 0x16BA	; 0x8016ba <xTickCount+0x1>
    22d0:	60 91 bb 16 	lds	r22, 0x16BB	; 0x8016bb <xTickCount+0x2>
    22d4:	70 91 bc 16 	lds	r23, 0x16BC	; 0x8016bc <xTickCount+0x3>
    22d8:	41 83       	std	Z+1, r20	; 0x01
    22da:	52 83       	std	Z+2, r21	; 0x02
    22dc:	63 83       	std	Z+3, r22	; 0x03
    22de:	74 83       	std	Z+4, r23	; 0x04
    22e0:	0f 90       	pop	r0
    22e2:	0f be       	out	0x3f, r0	; 63
    22e4:	08 95       	ret

000022e6 <vTaskInternalSetTimeOutState>:
    22e6:	20 91 b4 16 	lds	r18, 0x16B4	; 0x8016b4 <xNumOfOverflows>
    22ea:	fc 01       	movw	r30, r24
    22ec:	20 83       	st	Z, r18
    22ee:	40 91 b9 16 	lds	r20, 0x16B9	; 0x8016b9 <xTickCount>
    22f2:	50 91 ba 16 	lds	r21, 0x16BA	; 0x8016ba <xTickCount+0x1>
    22f6:	60 91 bb 16 	lds	r22, 0x16BB	; 0x8016bb <xTickCount+0x2>
    22fa:	70 91 bc 16 	lds	r23, 0x16BC	; 0x8016bc <xTickCount+0x3>
    22fe:	41 83       	std	Z+1, r20	; 0x01
    2300:	52 83       	std	Z+2, r21	; 0x02
    2302:	63 83       	std	Z+3, r22	; 0x03
    2304:	74 83       	std	Z+4, r23	; 0x04
    2306:	08 95       	ret

00002308 <xTaskCheckForTimeOut>:
    2308:	cf 92       	push	r12
    230a:	df 92       	push	r13
    230c:	ef 92       	push	r14
    230e:	ff 92       	push	r15
    2310:	0f 93       	push	r16
    2312:	1f 93       	push	r17
    2314:	cf 93       	push	r28
    2316:	df 93       	push	r29
    2318:	fb 01       	movw	r30, r22
    231a:	0f b6       	in	r0, 0x3f	; 63
    231c:	f8 94       	cli
    231e:	0f 92       	push	r0
    2320:	40 91 b9 16 	lds	r20, 0x16B9	; 0x8016b9 <xTickCount>
    2324:	50 91 ba 16 	lds	r21, 0x16BA	; 0x8016ba <xTickCount+0x1>
    2328:	60 91 bb 16 	lds	r22, 0x16BB	; 0x8016bb <xTickCount+0x2>
    232c:	70 91 bc 16 	lds	r23, 0x16BC	; 0x8016bc <xTickCount+0x3>
    2330:	00 81       	ld	r16, Z
    2332:	11 81       	ldd	r17, Z+1	; 0x01
    2334:	22 81       	ldd	r18, Z+2	; 0x02
    2336:	33 81       	ldd	r19, Z+3	; 0x03
    2338:	0f 3f       	cpi	r16, 0xFF	; 255
    233a:	af ef       	ldi	r26, 0xFF	; 255
    233c:	1a 07       	cpc	r17, r26
    233e:	2a 07       	cpc	r18, r26
    2340:	3a 07       	cpc	r19, r26
    2342:	49 f1       	breq	.+82     	; 0x2396 <xTaskCheckForTimeOut+0x8e>
    2344:	ec 01       	movw	r28, r24
    2346:	c9 80       	ldd	r12, Y+1	; 0x01
    2348:	da 80       	ldd	r13, Y+2	; 0x02
    234a:	eb 80       	ldd	r14, Y+3	; 0x03
    234c:	fc 80       	ldd	r15, Y+4	; 0x04
    234e:	a0 91 b4 16 	lds	r26, 0x16B4	; 0x8016b4 <xNumOfOverflows>
    2352:	b8 81       	ld	r27, Y
    2354:	ba 17       	cp	r27, r26
    2356:	29 f0       	breq	.+10     	; 0x2362 <xTaskCheckForTimeOut+0x5a>
    2358:	4c 15       	cp	r20, r12
    235a:	5d 05       	cpc	r21, r13
    235c:	6e 05       	cpc	r22, r14
    235e:	7f 05       	cpc	r23, r15
    2360:	e0 f4       	brcc	.+56     	; 0x239a <xTaskCheckForTimeOut+0x92>
    2362:	4c 19       	sub	r20, r12
    2364:	5d 09       	sbc	r21, r13
    2366:	6e 09       	sbc	r22, r14
    2368:	7f 09       	sbc	r23, r15
    236a:	40 17       	cp	r20, r16
    236c:	51 07       	cpc	r21, r17
    236e:	62 07       	cpc	r22, r18
    2370:	73 07       	cpc	r23, r19
    2372:	58 f4       	brcc	.+22     	; 0x238a <xTaskCheckForTimeOut+0x82>
    2374:	04 1b       	sub	r16, r20
    2376:	15 0b       	sbc	r17, r21
    2378:	26 0b       	sbc	r18, r22
    237a:	37 0b       	sbc	r19, r23
    237c:	00 83       	st	Z, r16
    237e:	11 83       	std	Z+1, r17	; 0x01
    2380:	22 83       	std	Z+2, r18	; 0x02
    2382:	33 83       	std	Z+3, r19	; 0x03
    2384:	b0 df       	rcall	.-160    	; 0x22e6 <vTaskInternalSetTimeOutState>
    2386:	80 e0       	ldi	r24, 0x00	; 0
    2388:	09 c0       	rjmp	.+18     	; 0x239c <xTaskCheckForTimeOut+0x94>
    238a:	10 82       	st	Z, r1
    238c:	11 82       	std	Z+1, r1	; 0x01
    238e:	12 82       	std	Z+2, r1	; 0x02
    2390:	13 82       	std	Z+3, r1	; 0x03
    2392:	81 e0       	ldi	r24, 0x01	; 1
    2394:	03 c0       	rjmp	.+6      	; 0x239c <xTaskCheckForTimeOut+0x94>
    2396:	80 e0       	ldi	r24, 0x00	; 0
    2398:	01 c0       	rjmp	.+2      	; 0x239c <xTaskCheckForTimeOut+0x94>
    239a:	81 e0       	ldi	r24, 0x01	; 1
    239c:	0f 90       	pop	r0
    239e:	0f be       	out	0x3f, r0	; 63
    23a0:	df 91       	pop	r29
    23a2:	cf 91       	pop	r28
    23a4:	1f 91       	pop	r17
    23a6:	0f 91       	pop	r16
    23a8:	ff 90       	pop	r15
    23aa:	ef 90       	pop	r14
    23ac:	df 90       	pop	r13
    23ae:	cf 90       	pop	r12
    23b0:	08 95       	ret

000023b2 <vTaskMissedYield>:
    23b2:	81 e0       	ldi	r24, 0x01	; 1
    23b4:	80 93 b5 16 	sts	0x16B5, r24	; 0x8016b5 <xYieldPending>
    23b8:	08 95       	ret

000023ba <xTaskGetCurrentTaskHandle>:
    23ba:	80 91 26 17 	lds	r24, 0x1726	; 0x801726 <pxCurrentTCB>
    23be:	90 91 27 17 	lds	r25, 0x1727	; 0x801727 <pxCurrentTCB+0x1>
    23c2:	08 95       	ret

000023c4 <xTaskGetSchedulerState>:
    23c4:	80 91 b7 16 	lds	r24, 0x16B7	; 0x8016b7 <xSchedulerRunning>
    23c8:	88 23       	and	r24, r24
    23ca:	31 f0       	breq	.+12     	; 0x23d8 <xTaskGetSchedulerState+0x14>
    23cc:	80 91 ac 16 	lds	r24, 0x16AC	; 0x8016ac <uxSchedulerSuspended>
    23d0:	88 23       	and	r24, r24
    23d2:	21 f0       	breq	.+8      	; 0x23dc <xTaskGetSchedulerState+0x18>
    23d4:	80 e0       	ldi	r24, 0x00	; 0
    23d6:	08 95       	ret
    23d8:	81 e0       	ldi	r24, 0x01	; 1
    23da:	08 95       	ret
    23dc:	82 e0       	ldi	r24, 0x02	; 2
    23de:	08 95       	ret

000023e0 <xTaskPriorityDisinherit>:
    23e0:	0f 93       	push	r16
    23e2:	1f 93       	push	r17
    23e4:	cf 93       	push	r28
    23e6:	df 93       	push	r29
    23e8:	fc 01       	movw	r30, r24
    23ea:	89 2b       	or	r24, r25
    23ec:	79 f1       	breq	.+94     	; 0x244c <xTaskPriorityDisinherit+0x6c>
    23ee:	80 a5       	ldd	r24, Z+40	; 0x28
    23f0:	81 50       	subi	r24, 0x01	; 1
    23f2:	80 a7       	std	Z+40, r24	; 0x28
    23f4:	22 8d       	ldd	r18, Z+26	; 0x1a
    23f6:	97 a1       	ldd	r25, Z+39	; 0x27
    23f8:	29 17       	cp	r18, r25
    23fa:	51 f1       	breq	.+84     	; 0x2450 <xTaskPriorityDisinherit+0x70>
    23fc:	81 11       	cpse	r24, r1
    23fe:	2a c0       	rjmp	.+84     	; 0x2454 <xTaskPriorityDisinherit+0x74>
    2400:	ef 01       	movw	r28, r30
    2402:	8f 01       	movw	r16, r30
    2404:	0e 5f       	subi	r16, 0xFE	; 254
    2406:	1f 4f       	sbci	r17, 0xFF	; 255
    2408:	c8 01       	movw	r24, r16
    240a:	0e 94 19 05 	call	0xa32	; 0xa32 <uxListRemove>
    240e:	8f a1       	ldd	r24, Y+39	; 0x27
    2410:	8a 8f       	std	Y+26, r24	; 0x1a
    2412:	44 e0       	ldi	r20, 0x04	; 4
    2414:	50 e0       	ldi	r21, 0x00	; 0
    2416:	60 e0       	ldi	r22, 0x00	; 0
    2418:	70 e0       	ldi	r23, 0x00	; 0
    241a:	48 1b       	sub	r20, r24
    241c:	51 09       	sbc	r21, r1
    241e:	61 09       	sbc	r22, r1
    2420:	71 09       	sbc	r23, r1
    2422:	4e 87       	std	Y+14, r20	; 0x0e
    2424:	5f 87       	std	Y+15, r21	; 0x0f
    2426:	68 8b       	std	Y+16, r22	; 0x10
    2428:	79 8b       	std	Y+17, r23	; 0x11
    242a:	90 91 b8 16 	lds	r25, 0x16B8	; 0x8016b8 <uxTopReadyPriority>
    242e:	98 17       	cp	r25, r24
    2430:	10 f4       	brcc	.+4      	; 0x2436 <xTaskPriorityDisinherit+0x56>
    2432:	80 93 b8 16 	sts	0x16B8, r24	; 0x8016b8 <uxTopReadyPriority>
    2436:	2b e0       	ldi	r18, 0x0B	; 11
    2438:	82 9f       	mul	r24, r18
    243a:	c0 01       	movw	r24, r0
    243c:	11 24       	eor	r1, r1
    243e:	b8 01       	movw	r22, r16
    2440:	86 50       	subi	r24, 0x06	; 6
    2442:	99 4e       	sbci	r25, 0xE9	; 233
    2444:	0e 94 bb 04 	call	0x976	; 0x976 <vListInsertEnd>
    2448:	81 e0       	ldi	r24, 0x01	; 1
    244a:	05 c0       	rjmp	.+10     	; 0x2456 <xTaskPriorityDisinherit+0x76>
    244c:	80 e0       	ldi	r24, 0x00	; 0
    244e:	03 c0       	rjmp	.+6      	; 0x2456 <xTaskPriorityDisinherit+0x76>
    2450:	80 e0       	ldi	r24, 0x00	; 0
    2452:	01 c0       	rjmp	.+2      	; 0x2456 <xTaskPriorityDisinherit+0x76>
    2454:	80 e0       	ldi	r24, 0x00	; 0
    2456:	df 91       	pop	r29
    2458:	cf 91       	pop	r28
    245a:	1f 91       	pop	r17
    245c:	0f 91       	pop	r16
    245e:	08 95       	ret

00002460 <xTaskNotifyWait>:
    2460:	4f 92       	push	r4
    2462:	5f 92       	push	r5
    2464:	6f 92       	push	r6
    2466:	7f 92       	push	r7
    2468:	8f 92       	push	r8
    246a:	9f 92       	push	r9
    246c:	af 92       	push	r10
    246e:	bf 92       	push	r11
    2470:	cf 92       	push	r12
    2472:	df 92       	push	r13
    2474:	ef 92       	push	r14
    2476:	ff 92       	push	r15
    2478:	0f 93       	push	r16
    247a:	1f 93       	push	r17
    247c:	49 01       	movw	r8, r18
    247e:	5a 01       	movw	r10, r20
    2480:	0f b6       	in	r0, 0x3f	; 63
    2482:	f8 94       	cli
    2484:	0f 92       	push	r0
    2486:	e0 91 26 17 	lds	r30, 0x1726	; 0x801726 <pxCurrentTCB>
    248a:	f0 91 27 17 	lds	r31, 0x1727	; 0x801727 <pxCurrentTCB+0x1>
    248e:	27 a5       	ldd	r18, Z+47	; 0x2f
    2490:	22 30       	cpi	r18, 0x02	; 2
    2492:	39 f1       	breq	.+78     	; 0x24e2 <xTaskNotifyWait+0x82>
    2494:	e0 91 26 17 	lds	r30, 0x1726	; 0x801726 <pxCurrentTCB>
    2498:	f0 91 27 17 	lds	r31, 0x1727	; 0x801727 <pxCurrentTCB+0x1>
    249c:	43 a4       	ldd	r4, Z+43	; 0x2b
    249e:	54 a4       	ldd	r5, Z+44	; 0x2c
    24a0:	65 a4       	ldd	r6, Z+45	; 0x2d
    24a2:	76 a4       	ldd	r7, Z+46	; 0x2e
    24a4:	dc 01       	movw	r26, r24
    24a6:	cb 01       	movw	r24, r22
    24a8:	80 95       	com	r24
    24aa:	90 95       	com	r25
    24ac:	a0 95       	com	r26
    24ae:	b0 95       	com	r27
    24b0:	84 21       	and	r24, r4
    24b2:	95 21       	and	r25, r5
    24b4:	a6 21       	and	r26, r6
    24b6:	b7 21       	and	r27, r7
    24b8:	83 a7       	std	Z+43, r24	; 0x2b
    24ba:	94 a7       	std	Z+44, r25	; 0x2c
    24bc:	a5 a7       	std	Z+45, r26	; 0x2d
    24be:	b6 a7       	std	Z+46, r27	; 0x2e
    24c0:	e0 91 26 17 	lds	r30, 0x1726	; 0x801726 <pxCurrentTCB>
    24c4:	f0 91 27 17 	lds	r31, 0x1727	; 0x801727 <pxCurrentTCB+0x1>
    24c8:	81 e0       	ldi	r24, 0x01	; 1
    24ca:	87 a7       	std	Z+47, r24	; 0x2f
    24cc:	c1 14       	cp	r12, r1
    24ce:	d1 04       	cpc	r13, r1
    24d0:	e1 04       	cpc	r14, r1
    24d2:	f1 04       	cpc	r15, r1
    24d4:	31 f0       	breq	.+12     	; 0x24e2 <xTaskNotifyWait+0x82>
    24d6:	41 e0       	ldi	r20, 0x01	; 1
    24d8:	c7 01       	movw	r24, r14
    24da:	b6 01       	movw	r22, r12
    24dc:	3a da       	rcall	.-2956   	; 0x1952 <prvAddCurrentTaskToDelayedList>
    24de:	0e 94 ee 05 	call	0xbdc	; 0xbdc <vPortYield>
    24e2:	0f 90       	pop	r0
    24e4:	0f be       	out	0x3f, r0	; 63
    24e6:	0f b6       	in	r0, 0x3f	; 63
    24e8:	f8 94       	cli
    24ea:	0f 92       	push	r0
    24ec:	01 15       	cp	r16, r1
    24ee:	11 05       	cpc	r17, r1
    24f0:	69 f0       	breq	.+26     	; 0x250c <xTaskNotifyWait+0xac>
    24f2:	e0 91 26 17 	lds	r30, 0x1726	; 0x801726 <pxCurrentTCB>
    24f6:	f0 91 27 17 	lds	r31, 0x1727	; 0x801727 <pxCurrentTCB+0x1>
    24fa:	83 a5       	ldd	r24, Z+43	; 0x2b
    24fc:	94 a5       	ldd	r25, Z+44	; 0x2c
    24fe:	a5 a5       	ldd	r26, Z+45	; 0x2d
    2500:	b6 a5       	ldd	r27, Z+46	; 0x2e
    2502:	f8 01       	movw	r30, r16
    2504:	80 83       	st	Z, r24
    2506:	91 83       	std	Z+1, r25	; 0x01
    2508:	a2 83       	std	Z+2, r26	; 0x02
    250a:	b3 83       	std	Z+3, r27	; 0x03
    250c:	e0 91 26 17 	lds	r30, 0x1726	; 0x801726 <pxCurrentTCB>
    2510:	f0 91 27 17 	lds	r31, 0x1727	; 0x801727 <pxCurrentTCB+0x1>
    2514:	87 a5       	ldd	r24, Z+47	; 0x2f
    2516:	82 30       	cpi	r24, 0x02	; 2
    2518:	b1 f4       	brne	.+44     	; 0x2546 <xTaskNotifyWait+0xe6>
    251a:	e0 91 26 17 	lds	r30, 0x1726	; 0x801726 <pxCurrentTCB>
    251e:	f0 91 27 17 	lds	r31, 0x1727	; 0x801727 <pxCurrentTCB+0x1>
    2522:	83 a5       	ldd	r24, Z+43	; 0x2b
    2524:	94 a5       	ldd	r25, Z+44	; 0x2c
    2526:	a5 a5       	ldd	r26, Z+45	; 0x2d
    2528:	b6 a5       	ldd	r27, Z+46	; 0x2e
    252a:	80 94       	com	r8
    252c:	90 94       	com	r9
    252e:	a0 94       	com	r10
    2530:	b0 94       	com	r11
    2532:	88 22       	and	r8, r24
    2534:	99 22       	and	r9, r25
    2536:	aa 22       	and	r10, r26
    2538:	bb 22       	and	r11, r27
    253a:	83 a6       	std	Z+43, r8	; 0x2b
    253c:	94 a6       	std	Z+44, r9	; 0x2c
    253e:	a5 a6       	std	Z+45, r10	; 0x2d
    2540:	b6 a6       	std	Z+46, r11	; 0x2e
    2542:	81 e0       	ldi	r24, 0x01	; 1
    2544:	01 c0       	rjmp	.+2      	; 0x2548 <xTaskNotifyWait+0xe8>
    2546:	80 e0       	ldi	r24, 0x00	; 0
    2548:	e0 91 26 17 	lds	r30, 0x1726	; 0x801726 <pxCurrentTCB>
    254c:	f0 91 27 17 	lds	r31, 0x1727	; 0x801727 <pxCurrentTCB+0x1>
    2550:	17 a6       	std	Z+47, r1	; 0x2f
    2552:	0f 90       	pop	r0
    2554:	0f be       	out	0x3f, r0	; 63
    2556:	1f 91       	pop	r17
    2558:	0f 91       	pop	r16
    255a:	ff 90       	pop	r15
    255c:	ef 90       	pop	r14
    255e:	df 90       	pop	r13
    2560:	cf 90       	pop	r12
    2562:	bf 90       	pop	r11
    2564:	af 90       	pop	r10
    2566:	9f 90       	pop	r9
    2568:	8f 90       	pop	r8
    256a:	7f 90       	pop	r7
    256c:	6f 90       	pop	r6
    256e:	5f 90       	pop	r5
    2570:	4f 90       	pop	r4
    2572:	08 95       	ret

00002574 <xTaskGenericNotify>:
    2574:	0f 93       	push	r16
    2576:	1f 93       	push	r17
    2578:	cf 93       	push	r28
    257a:	df 93       	push	r29
    257c:	fc 01       	movw	r30, r24
    257e:	0f b6       	in	r0, 0x3f	; 63
    2580:	f8 94       	cli
    2582:	0f 92       	push	r0
    2584:	01 15       	cp	r16, r1
    2586:	11 05       	cpc	r17, r1
    2588:	49 f0       	breq	.+18     	; 0x259c <xTaskGenericNotify+0x28>
    258a:	83 a5       	ldd	r24, Z+43	; 0x2b
    258c:	94 a5       	ldd	r25, Z+44	; 0x2c
    258e:	a5 a5       	ldd	r26, Z+45	; 0x2d
    2590:	b6 a5       	ldd	r27, Z+46	; 0x2e
    2592:	e8 01       	movw	r28, r16
    2594:	88 83       	st	Y, r24
    2596:	99 83       	std	Y+1, r25	; 0x01
    2598:	aa 83       	std	Y+2, r26	; 0x02
    259a:	bb 83       	std	Y+3, r27	; 0x03
    259c:	87 a5       	ldd	r24, Z+47	; 0x2f
    259e:	92 e0       	ldi	r25, 0x02	; 2
    25a0:	97 a7       	std	Z+47, r25	; 0x2f
    25a2:	22 30       	cpi	r18, 0x02	; 2
    25a4:	b1 f0       	breq	.+44     	; 0x25d2 <xTaskGenericNotify+0x5e>
    25a6:	18 f4       	brcc	.+6      	; 0x25ae <xTaskGenericNotify+0x3a>
    25a8:	21 30       	cpi	r18, 0x01	; 1
    25aa:	31 f0       	breq	.+12     	; 0x25b8 <xTaskGenericNotify+0x44>
    25ac:	2a c0       	rjmp	.+84     	; 0x2602 <xTaskGenericNotify+0x8e>
    25ae:	23 30       	cpi	r18, 0x03	; 3
    25b0:	e9 f0       	breq	.+58     	; 0x25ec <xTaskGenericNotify+0x78>
    25b2:	24 30       	cpi	r18, 0x04	; 4
    25b4:	01 f1       	breq	.+64     	; 0x25f6 <xTaskGenericNotify+0x82>
    25b6:	25 c0       	rjmp	.+74     	; 0x2602 <xTaskGenericNotify+0x8e>
    25b8:	03 a5       	ldd	r16, Z+43	; 0x2b
    25ba:	14 a5       	ldd	r17, Z+44	; 0x2c
    25bc:	25 a5       	ldd	r18, Z+45	; 0x2d
    25be:	36 a5       	ldd	r19, Z+46	; 0x2e
    25c0:	40 2b       	or	r20, r16
    25c2:	51 2b       	or	r21, r17
    25c4:	62 2b       	or	r22, r18
    25c6:	73 2b       	or	r23, r19
    25c8:	43 a7       	std	Z+43, r20	; 0x2b
    25ca:	54 a7       	std	Z+44, r21	; 0x2c
    25cc:	65 a7       	std	Z+45, r22	; 0x2d
    25ce:	76 a7       	std	Z+46, r23	; 0x2e
    25d0:	18 c0       	rjmp	.+48     	; 0x2602 <xTaskGenericNotify+0x8e>
    25d2:	43 a5       	ldd	r20, Z+43	; 0x2b
    25d4:	54 a5       	ldd	r21, Z+44	; 0x2c
    25d6:	65 a5       	ldd	r22, Z+45	; 0x2d
    25d8:	76 a5       	ldd	r23, Z+46	; 0x2e
    25da:	4f 5f       	subi	r20, 0xFF	; 255
    25dc:	5f 4f       	sbci	r21, 0xFF	; 255
    25de:	6f 4f       	sbci	r22, 0xFF	; 255
    25e0:	7f 4f       	sbci	r23, 0xFF	; 255
    25e2:	43 a7       	std	Z+43, r20	; 0x2b
    25e4:	54 a7       	std	Z+44, r21	; 0x2c
    25e6:	65 a7       	std	Z+45, r22	; 0x2d
    25e8:	76 a7       	std	Z+46, r23	; 0x2e
    25ea:	0b c0       	rjmp	.+22     	; 0x2602 <xTaskGenericNotify+0x8e>
    25ec:	43 a7       	std	Z+43, r20	; 0x2b
    25ee:	54 a7       	std	Z+44, r21	; 0x2c
    25f0:	65 a7       	std	Z+45, r22	; 0x2d
    25f2:	76 a7       	std	Z+46, r23	; 0x2e
    25f4:	06 c0       	rjmp	.+12     	; 0x2602 <xTaskGenericNotify+0x8e>
    25f6:	82 30       	cpi	r24, 0x02	; 2
    25f8:	49 f1       	breq	.+82     	; 0x264c <xTaskGenericNotify+0xd8>
    25fa:	43 a7       	std	Z+43, r20	; 0x2b
    25fc:	54 a7       	std	Z+44, r21	; 0x2c
    25fe:	65 a7       	std	Z+45, r22	; 0x2d
    2600:	76 a7       	std	Z+46, r23	; 0x2e
    2602:	81 30       	cpi	r24, 0x01	; 1
    2604:	29 f5       	brne	.+74     	; 0x2650 <xTaskGenericNotify+0xdc>
    2606:	ef 01       	movw	r28, r30
    2608:	8f 01       	movw	r16, r30
    260a:	0e 5f       	subi	r16, 0xFE	; 254
    260c:	1f 4f       	sbci	r17, 0xFF	; 255
    260e:	c8 01       	movw	r24, r16
    2610:	0e 94 19 05 	call	0xa32	; 0xa32 <uxListRemove>
    2614:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2616:	90 91 b8 16 	lds	r25, 0x16B8	; 0x8016b8 <uxTopReadyPriority>
    261a:	98 17       	cp	r25, r24
    261c:	10 f4       	brcc	.+4      	; 0x2622 <xTaskGenericNotify+0xae>
    261e:	80 93 b8 16 	sts	0x16B8, r24	; 0x8016b8 <uxTopReadyPriority>
    2622:	2b e0       	ldi	r18, 0x0B	; 11
    2624:	82 9f       	mul	r24, r18
    2626:	c0 01       	movw	r24, r0
    2628:	11 24       	eor	r1, r1
    262a:	b8 01       	movw	r22, r16
    262c:	86 50       	subi	r24, 0x06	; 6
    262e:	99 4e       	sbci	r25, 0xE9	; 233
    2630:	0e 94 bb 04 	call	0x976	; 0x976 <vListInsertEnd>
    2634:	e0 91 26 17 	lds	r30, 0x1726	; 0x801726 <pxCurrentTCB>
    2638:	f0 91 27 17 	lds	r31, 0x1727	; 0x801727 <pxCurrentTCB+0x1>
    263c:	9a 8d       	ldd	r25, Y+26	; 0x1a
    263e:	82 8d       	ldd	r24, Z+26	; 0x1a
    2640:	89 17       	cp	r24, r25
    2642:	40 f4       	brcc	.+16     	; 0x2654 <xTaskGenericNotify+0xe0>
    2644:	0e 94 ee 05 	call	0xbdc	; 0xbdc <vPortYield>
    2648:	81 e0       	ldi	r24, 0x01	; 1
    264a:	05 c0       	rjmp	.+10     	; 0x2656 <xTaskGenericNotify+0xe2>
    264c:	80 e0       	ldi	r24, 0x00	; 0
    264e:	03 c0       	rjmp	.+6      	; 0x2656 <xTaskGenericNotify+0xe2>
    2650:	81 e0       	ldi	r24, 0x01	; 1
    2652:	01 c0       	rjmp	.+2      	; 0x2656 <xTaskGenericNotify+0xe2>
    2654:	81 e0       	ldi	r24, 0x01	; 1
    2656:	0f 90       	pop	r0
    2658:	0f be       	out	0x3f, r0	; 63
    265a:	df 91       	pop	r29
    265c:	cf 91       	pop	r28
    265e:	1f 91       	pop	r17
    2660:	0f 91       	pop	r16
    2662:	08 95       	ret

00002664 <xTaskGenericNotifyFromISR>:
    2664:	ef 92       	push	r14
    2666:	ff 92       	push	r15
    2668:	0f 93       	push	r16
    266a:	1f 93       	push	r17
    266c:	cf 93       	push	r28
    266e:	df 93       	push	r29
    2670:	fc 01       	movw	r30, r24
    2672:	01 15       	cp	r16, r1
    2674:	11 05       	cpc	r17, r1
    2676:	49 f0       	breq	.+18     	; 0x268a <xTaskGenericNotifyFromISR+0x26>
    2678:	83 a5       	ldd	r24, Z+43	; 0x2b
    267a:	94 a5       	ldd	r25, Z+44	; 0x2c
    267c:	a5 a5       	ldd	r26, Z+45	; 0x2d
    267e:	b6 a5       	ldd	r27, Z+46	; 0x2e
    2680:	e8 01       	movw	r28, r16
    2682:	88 83       	st	Y, r24
    2684:	99 83       	std	Y+1, r25	; 0x01
    2686:	aa 83       	std	Y+2, r26	; 0x02
    2688:	bb 83       	std	Y+3, r27	; 0x03
    268a:	87 a5       	ldd	r24, Z+47	; 0x2f
    268c:	92 e0       	ldi	r25, 0x02	; 2
    268e:	97 a7       	std	Z+47, r25	; 0x2f
    2690:	22 30       	cpi	r18, 0x02	; 2
    2692:	b1 f0       	breq	.+44     	; 0x26c0 <xTaskGenericNotifyFromISR+0x5c>
    2694:	18 f4       	brcc	.+6      	; 0x269c <xTaskGenericNotifyFromISR+0x38>
    2696:	21 30       	cpi	r18, 0x01	; 1
    2698:	31 f0       	breq	.+12     	; 0x26a6 <xTaskGenericNotifyFromISR+0x42>
    269a:	2a c0       	rjmp	.+84     	; 0x26f0 <xTaskGenericNotifyFromISR+0x8c>
    269c:	23 30       	cpi	r18, 0x03	; 3
    269e:	e9 f0       	breq	.+58     	; 0x26da <xTaskGenericNotifyFromISR+0x76>
    26a0:	24 30       	cpi	r18, 0x04	; 4
    26a2:	01 f1       	breq	.+64     	; 0x26e4 <xTaskGenericNotifyFromISR+0x80>
    26a4:	25 c0       	rjmp	.+74     	; 0x26f0 <xTaskGenericNotifyFromISR+0x8c>
    26a6:	03 a5       	ldd	r16, Z+43	; 0x2b
    26a8:	14 a5       	ldd	r17, Z+44	; 0x2c
    26aa:	25 a5       	ldd	r18, Z+45	; 0x2d
    26ac:	36 a5       	ldd	r19, Z+46	; 0x2e
    26ae:	40 2b       	or	r20, r16
    26b0:	51 2b       	or	r21, r17
    26b2:	62 2b       	or	r22, r18
    26b4:	73 2b       	or	r23, r19
    26b6:	43 a7       	std	Z+43, r20	; 0x2b
    26b8:	54 a7       	std	Z+44, r21	; 0x2c
    26ba:	65 a7       	std	Z+45, r22	; 0x2d
    26bc:	76 a7       	std	Z+46, r23	; 0x2e
    26be:	18 c0       	rjmp	.+48     	; 0x26f0 <xTaskGenericNotifyFromISR+0x8c>
    26c0:	43 a5       	ldd	r20, Z+43	; 0x2b
    26c2:	54 a5       	ldd	r21, Z+44	; 0x2c
    26c4:	65 a5       	ldd	r22, Z+45	; 0x2d
    26c6:	76 a5       	ldd	r23, Z+46	; 0x2e
    26c8:	4f 5f       	subi	r20, 0xFF	; 255
    26ca:	5f 4f       	sbci	r21, 0xFF	; 255
    26cc:	6f 4f       	sbci	r22, 0xFF	; 255
    26ce:	7f 4f       	sbci	r23, 0xFF	; 255
    26d0:	43 a7       	std	Z+43, r20	; 0x2b
    26d2:	54 a7       	std	Z+44, r21	; 0x2c
    26d4:	65 a7       	std	Z+45, r22	; 0x2d
    26d6:	76 a7       	std	Z+46, r23	; 0x2e
    26d8:	0b c0       	rjmp	.+22     	; 0x26f0 <xTaskGenericNotifyFromISR+0x8c>
    26da:	43 a7       	std	Z+43, r20	; 0x2b
    26dc:	54 a7       	std	Z+44, r21	; 0x2c
    26de:	65 a7       	std	Z+45, r22	; 0x2d
    26e0:	76 a7       	std	Z+46, r23	; 0x2e
    26e2:	06 c0       	rjmp	.+12     	; 0x26f0 <xTaskGenericNotifyFromISR+0x8c>
    26e4:	82 30       	cpi	r24, 0x02	; 2
    26e6:	d9 f1       	breq	.+118    	; 0x275e <xTaskGenericNotifyFromISR+0xfa>
    26e8:	43 a7       	std	Z+43, r20	; 0x2b
    26ea:	54 a7       	std	Z+44, r21	; 0x2c
    26ec:	65 a7       	std	Z+45, r22	; 0x2d
    26ee:	76 a7       	std	Z+46, r23	; 0x2e
    26f0:	81 30       	cpi	r24, 0x01	; 1
    26f2:	b9 f5       	brne	.+110    	; 0x2762 <xTaskGenericNotifyFromISR+0xfe>
    26f4:	ef 01       	movw	r28, r30
    26f6:	80 91 ac 16 	lds	r24, 0x16AC	; 0x8016ac <uxSchedulerSuspended>
    26fa:	81 11       	cpse	r24, r1
    26fc:	17 c0       	rjmp	.+46     	; 0x272c <xTaskGenericNotifyFromISR+0xc8>
    26fe:	8f 01       	movw	r16, r30
    2700:	0e 5f       	subi	r16, 0xFE	; 254
    2702:	1f 4f       	sbci	r17, 0xFF	; 255
    2704:	c8 01       	movw	r24, r16
    2706:	0e 94 19 05 	call	0xa32	; 0xa32 <uxListRemove>
    270a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    270c:	90 91 b8 16 	lds	r25, 0x16B8	; 0x8016b8 <uxTopReadyPriority>
    2710:	98 17       	cp	r25, r24
    2712:	10 f4       	brcc	.+4      	; 0x2718 <xTaskGenericNotifyFromISR+0xb4>
    2714:	80 93 b8 16 	sts	0x16B8, r24	; 0x8016b8 <uxTopReadyPriority>
    2718:	eb e0       	ldi	r30, 0x0B	; 11
    271a:	8e 9f       	mul	r24, r30
    271c:	c0 01       	movw	r24, r0
    271e:	11 24       	eor	r1, r1
    2720:	b8 01       	movw	r22, r16
    2722:	86 50       	subi	r24, 0x06	; 6
    2724:	99 4e       	sbci	r25, 0xE9	; 233
    2726:	0e 94 bb 04 	call	0x976	; 0x976 <vListInsertEnd>
    272a:	07 c0       	rjmp	.+14     	; 0x273a <xTaskGenericNotifyFromISR+0xd6>
    272c:	bf 01       	movw	r22, r30
    272e:	62 5f       	subi	r22, 0xF2	; 242
    2730:	7f 4f       	sbci	r23, 0xFF	; 255
    2732:	85 ed       	ldi	r24, 0xD5	; 213
    2734:	96 e1       	ldi	r25, 0x16	; 22
    2736:	0e 94 bb 04 	call	0x976	; 0x976 <vListInsertEnd>
    273a:	e0 91 26 17 	lds	r30, 0x1726	; 0x801726 <pxCurrentTCB>
    273e:	f0 91 27 17 	lds	r31, 0x1727	; 0x801727 <pxCurrentTCB+0x1>
    2742:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2744:	82 8d       	ldd	r24, Z+26	; 0x1a
    2746:	89 17       	cp	r24, r25
    2748:	70 f4       	brcc	.+28     	; 0x2766 <xTaskGenericNotifyFromISR+0x102>
    274a:	e1 14       	cp	r14, r1
    274c:	f1 04       	cpc	r15, r1
    274e:	19 f0       	breq	.+6      	; 0x2756 <xTaskGenericNotifyFromISR+0xf2>
    2750:	81 e0       	ldi	r24, 0x01	; 1
    2752:	e7 01       	movw	r28, r14
    2754:	88 83       	st	Y, r24
    2756:	81 e0       	ldi	r24, 0x01	; 1
    2758:	80 93 b5 16 	sts	0x16B5, r24	; 0x8016b5 <xYieldPending>
    275c:	05 c0       	rjmp	.+10     	; 0x2768 <xTaskGenericNotifyFromISR+0x104>
    275e:	80 e0       	ldi	r24, 0x00	; 0
    2760:	03 c0       	rjmp	.+6      	; 0x2768 <xTaskGenericNotifyFromISR+0x104>
    2762:	81 e0       	ldi	r24, 0x01	; 1
    2764:	01 c0       	rjmp	.+2      	; 0x2768 <xTaskGenericNotifyFromISR+0x104>
    2766:	81 e0       	ldi	r24, 0x01	; 1
    2768:	df 91       	pop	r29
    276a:	cf 91       	pop	r28
    276c:	1f 91       	pop	r17
    276e:	0f 91       	pop	r16
    2770:	ff 90       	pop	r15
    2772:	ef 90       	pop	r14
    2774:	08 95       	ret

00002776 <xTaskNotifyStateClear>:
    TCB_t *pxTCB;
    BaseType_t xReturn;

        /* If null is passed in here then it is the calling task that is having
        its notification state cleared. */
        pxTCB = prvGetTCBFromHandle( xTask );
    2776:	00 97       	sbiw	r24, 0x00	; 0
    2778:	21 f4       	brne	.+8      	; 0x2782 <xTaskNotifyStateClear+0xc>
    277a:	80 91 26 17 	lds	r24, 0x1726	; 0x801726 <pxCurrentTCB>
    277e:	90 91 27 17 	lds	r25, 0x1727	; 0x801727 <pxCurrentTCB+0x1>

        taskENTER_CRITICAL();
    2782:	0f b6       	in	r0, 0x3f	; 63
    2784:	f8 94       	cli
    2786:	0f 92       	push	r0
        {
            if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
    2788:	fc 01       	movw	r30, r24
    278a:	27 a5       	ldd	r18, Z+47	; 0x2f
    278c:	22 30       	cpi	r18, 0x02	; 2
    278e:	19 f4       	brne	.+6      	; 0x2796 <xTaskNotifyStateClear+0x20>
            {
                pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    2790:	17 a6       	std	Z+47, r1	; 0x2f
                xReturn = pdPASS;
    2792:	81 e0       	ldi	r24, 0x01	; 1
    2794:	01 c0       	rjmp	.+2      	; 0x2798 <xTaskNotifyStateClear+0x22>
            }
            else
            {
                xReturn = pdFAIL;
    2796:	80 e0       	ldi	r24, 0x00	; 0
            }
        }
        taskEXIT_CRITICAL();
    2798:	0f 90       	pop	r0
    279a:	0f be       	out	0x3f, r0	; 63

        return xReturn;
    }
    279c:	08 95       	ret

0000279e <prvInsertTimerInActiveList>:
    279e:	cf 92       	push	r12
    27a0:	df 92       	push	r13
    27a2:	ef 92       	push	r14
    27a4:	ff 92       	push	r15
    27a6:	0f 93       	push	r16
    27a8:	1f 93       	push	r17
    27aa:	fc 01       	movw	r30, r24
    27ac:	42 83       	std	Z+2, r20	; 0x02
    27ae:	53 83       	std	Z+3, r21	; 0x03
    27b0:	64 83       	std	Z+4, r22	; 0x04
    27b2:	75 83       	std	Z+5, r23	; 0x05
    27b4:	93 87       	std	Z+11, r25	; 0x0b
    27b6:	82 87       	std	Z+10, r24	; 0x0a
    27b8:	04 17       	cp	r16, r20
    27ba:	15 07       	cpc	r17, r21
    27bc:	26 07       	cpc	r18, r22
    27be:	37 07       	cpc	r19, r23
    27c0:	c0 f0       	brcs	.+48     	; 0x27f2 <prvInsertTimerInActiveList+0x54>
    27c2:	0c 19       	sub	r16, r12
    27c4:	1d 09       	sbc	r17, r13
    27c6:	2e 09       	sbc	r18, r14
    27c8:	3f 09       	sbc	r19, r15
    27ca:	86 85       	ldd	r24, Z+14	; 0x0e
    27cc:	97 85       	ldd	r25, Z+15	; 0x0f
    27ce:	a0 89       	ldd	r26, Z+16	; 0x10
    27d0:	b1 89       	ldd	r27, Z+17	; 0x11
    27d2:	08 17       	cp	r16, r24
    27d4:	19 07       	cpc	r17, r25
    27d6:	2a 07       	cpc	r18, r26
    27d8:	3b 07       	cpc	r19, r27
    27da:	00 f5       	brcc	.+64     	; 0x281c <prvInsertTimerInActiveList+0x7e>
    27dc:	bf 01       	movw	r22, r30
    27de:	6e 5f       	subi	r22, 0xFE	; 254
    27e0:	7f 4f       	sbci	r23, 0xFF	; 255
    27e2:	80 91 30 17 	lds	r24, 0x1730	; 0x801730 <pxOverflowTimerList>
    27e6:	90 91 31 17 	lds	r25, 0x1731	; 0x801731 <pxOverflowTimerList+0x1>
    27ea:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <vListInsert>
    27ee:	80 e0       	ldi	r24, 0x00	; 0
    27f0:	18 c0       	rjmp	.+48     	; 0x2822 <prvInsertTimerInActiveList+0x84>
    27f2:	0c 15       	cp	r16, r12
    27f4:	1d 05       	cpc	r17, r13
    27f6:	2e 05       	cpc	r18, r14
    27f8:	3f 05       	cpc	r19, r15
    27fa:	28 f4       	brcc	.+10     	; 0x2806 <prvInsertTimerInActiveList+0x68>
    27fc:	4c 15       	cp	r20, r12
    27fe:	5d 05       	cpc	r21, r13
    2800:	6e 05       	cpc	r22, r14
    2802:	7f 05       	cpc	r23, r15
    2804:	68 f4       	brcc	.+26     	; 0x2820 <prvInsertTimerInActiveList+0x82>
    2806:	bf 01       	movw	r22, r30
    2808:	6e 5f       	subi	r22, 0xFE	; 254
    280a:	7f 4f       	sbci	r23, 0xFF	; 255
    280c:	80 91 32 17 	lds	r24, 0x1732	; 0x801732 <pxCurrentTimerList>
    2810:	90 91 33 17 	lds	r25, 0x1733	; 0x801733 <pxCurrentTimerList+0x1>
    2814:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <vListInsert>
    2818:	80 e0       	ldi	r24, 0x00	; 0
    281a:	03 c0       	rjmp	.+6      	; 0x2822 <prvInsertTimerInActiveList+0x84>
    281c:	81 e0       	ldi	r24, 0x01	; 1
    281e:	01 c0       	rjmp	.+2      	; 0x2822 <prvInsertTimerInActiveList+0x84>
    2820:	81 e0       	ldi	r24, 0x01	; 1
    2822:	1f 91       	pop	r17
    2824:	0f 91       	pop	r16
    2826:	ff 90       	pop	r15
    2828:	ef 90       	pop	r14
    282a:	df 90       	pop	r13
    282c:	cf 90       	pop	r12
    282e:	08 95       	ret

00002830 <prvCheckForValidListAndQueue>:
    2830:	0f b6       	in	r0, 0x3f	; 63
    2832:	f8 94       	cli
    2834:	0f 92       	push	r0
    2836:	80 91 2e 17 	lds	r24, 0x172E	; 0x80172e <xTimerQueue>
    283a:	90 91 2f 17 	lds	r25, 0x172F	; 0x80172f <xTimerQueue+0x1>
    283e:	89 2b       	or	r24, r25
    2840:	e9 f4       	brne	.+58     	; 0x287c <prvCheckForValidListAndQueue+0x4c>
    2842:	8f e3       	ldi	r24, 0x3F	; 63
    2844:	97 e1       	ldi	r25, 0x17	; 23
    2846:	0e 94 a6 04 	call	0x94c	; 0x94c <vListInitialise>
    284a:	84 e3       	ldi	r24, 0x34	; 52
    284c:	97 e1       	ldi	r25, 0x17	; 23
    284e:	0e 94 a6 04 	call	0x94c	; 0x94c <vListInitialise>
    2852:	8f e3       	ldi	r24, 0x3F	; 63
    2854:	97 e1       	ldi	r25, 0x17	; 23
    2856:	90 93 33 17 	sts	0x1733, r25	; 0x801733 <pxCurrentTimerList+0x1>
    285a:	80 93 32 17 	sts	0x1732, r24	; 0x801732 <pxCurrentTimerList>
    285e:	84 e3       	ldi	r24, 0x34	; 52
    2860:	97 e1       	ldi	r25, 0x17	; 23
    2862:	90 93 31 17 	sts	0x1731, r25	; 0x801731 <pxOverflowTimerList+0x1>
    2866:	80 93 30 17 	sts	0x1730, r24	; 0x801730 <pxOverflowTimerList>
    286a:	40 e0       	ldi	r20, 0x00	; 0
    286c:	67 e0       	ldi	r22, 0x07	; 7
    286e:	8a e0       	ldi	r24, 0x0A	; 10
    2870:	0e 94 ca 07 	call	0xf94	; 0xf94 <xQueueGenericCreate>
    2874:	90 93 2f 17 	sts	0x172F, r25	; 0x80172f <xTimerQueue+0x1>
    2878:	80 93 2e 17 	sts	0x172E, r24	; 0x80172e <xTimerQueue>
    287c:	0f 90       	pop	r0
    287e:	0f be       	out	0x3f, r0	; 63
    2880:	08 95       	ret

00002882 <xTimerCreateTimerTask>:
    2882:	ef 92       	push	r14
    2884:	ff 92       	push	r15
    2886:	0f 93       	push	r16
    2888:	d3 df       	rcall	.-90     	; 0x2830 <prvCheckForValidListAndQueue>
    288a:	80 91 2e 17 	lds	r24, 0x172E	; 0x80172e <xTimerQueue>
    288e:	90 91 2f 17 	lds	r25, 0x172F	; 0x80172f <xTimerQueue+0x1>
    2892:	89 2b       	or	r24, r25
    2894:	89 f0       	breq	.+34     	; 0x28b8 <xTimerCreateTimerTask+0x36>
    2896:	0f 2e       	mov	r0, r31
    2898:	fc e2       	ldi	r31, 0x2C	; 44
    289a:	ef 2e       	mov	r14, r31
    289c:	f7 e1       	ldi	r31, 0x17	; 23
    289e:	ff 2e       	mov	r15, r31
    28a0:	f0 2d       	mov	r31, r0
    28a2:	03 e0       	ldi	r16, 0x03	; 3
    28a4:	20 e0       	ldi	r18, 0x00	; 0
    28a6:	30 e0       	ldi	r19, 0x00	; 0
    28a8:	45 e5       	ldi	r20, 0x55	; 85
    28aa:	50 e0       	ldi	r21, 0x00	; 0
    28ac:	6b e8       	ldi	r22, 0x8B	; 139
    28ae:	73 e0       	ldi	r23, 0x03	; 3
    28b0:	82 eb       	ldi	r24, 0xB2	; 178
    28b2:	90 e0       	ldi	r25, 0x00	; 0
    28b4:	c4 d8       	rcall	.-3704   	; 0x1a3e <xTaskCreate>
    28b6:	01 c0       	rjmp	.+2      	; 0x28ba <xTimerCreateTimerTask+0x38>
    28b8:	80 e0       	ldi	r24, 0x00	; 0
    28ba:	0f 91       	pop	r16
    28bc:	ff 90       	pop	r15
    28be:	ef 90       	pop	r14
    28c0:	08 95       	ret

000028c2 <xTimerGenericCommand>:
    }
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
    28c2:	8f 92       	push	r8
    28c4:	9f 92       	push	r9
    28c6:	af 92       	push	r10
    28c8:	bf 92       	push	r11
    28ca:	cf 92       	push	r12
    28cc:	df 92       	push	r13
    28ce:	ef 92       	push	r14
    28d0:	ff 92       	push	r15
    28d2:	0f 93       	push	r16
    28d4:	1f 93       	push	r17
    28d6:	cf 93       	push	r28
    28d8:	df 93       	push	r29
    28da:	cd b7       	in	r28, 0x3d	; 61
    28dc:	de b7       	in	r29, 0x3e	; 62
    28de:	27 97       	sbiw	r28, 0x07	; 7
    28e0:	0f b6       	in	r0, 0x3f	; 63
    28e2:	f8 94       	cli
    28e4:	de bf       	out	0x3e, r29	; 62
    28e6:	0f be       	out	0x3f, r0	; 63
    28e8:	cd bf       	out	0x3d, r28	; 61

    configASSERT( xTimer );

    /* Send a message to the timer service task to perform a particular action
    on a particular timer definition. */
    if( xTimerQueue != NULL )
    28ea:	e0 91 2e 17 	lds	r30, 0x172E	; 0x80172e <xTimerQueue>
    28ee:	f0 91 2f 17 	lds	r31, 0x172F	; 0x80172f <xTimerQueue+0x1>
    28f2:	30 97       	sbiw	r30, 0x00	; 0
    28f4:	81 f1       	breq	.+96     	; 0x2956 <xTimerGenericCommand+0x94>
    {
        /* Send a command to the timer service task to start the xTimer timer. */
        xMessage.xMessageID = xCommandID;
    28f6:	69 83       	std	Y+1, r22	; 0x01
        xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    28f8:	2a 83       	std	Y+2, r18	; 0x02
    28fa:	3b 83       	std	Y+3, r19	; 0x03
    28fc:	4c 83       	std	Y+4, r20	; 0x04
    28fe:	5d 83       	std	Y+5, r21	; 0x05
        xMessage.u.xTimerParameters.pxTimer = xTimer;
    2900:	9f 83       	std	Y+7, r25	; 0x07
    2902:	8e 83       	std	Y+6, r24	; 0x06

        if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    2904:	66 30       	cpi	r22, 0x06	; 6
    2906:	f4 f4       	brge	.+60     	; 0x2944 <xTimerGenericCommand+0x82>
        {
            if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    2908:	5d dd       	rcall	.-1350   	; 0x23c4 <xTaskGetSchedulerState>
    290a:	82 30       	cpi	r24, 0x02	; 2
    290c:	69 f4       	brne	.+26     	; 0x2928 <xTimerGenericCommand+0x66>
            {
                xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    290e:	00 e0       	ldi	r16, 0x00	; 0
    2910:	a7 01       	movw	r20, r14
    2912:	96 01       	movw	r18, r12
    2914:	be 01       	movw	r22, r28
    2916:	6f 5f       	subi	r22, 0xFF	; 255
    2918:	7f 4f       	sbci	r23, 0xFF	; 255
    291a:	80 91 2e 17 	lds	r24, 0x172E	; 0x80172e <xTimerQueue>
    291e:	90 91 2f 17 	lds	r25, 0x172F	; 0x80172f <xTimerQueue+0x1>
    2922:	0e 94 f8 07 	call	0xff0	; 0xff0 <xQueueGenericSend>
    2926:	18 c0       	rjmp	.+48     	; 0x2958 <xTimerGenericCommand+0x96>
            }
            else
            {
                xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    2928:	00 e0       	ldi	r16, 0x00	; 0
    292a:	20 e0       	ldi	r18, 0x00	; 0
    292c:	30 e0       	ldi	r19, 0x00	; 0
    292e:	a9 01       	movw	r20, r18
    2930:	be 01       	movw	r22, r28
    2932:	6f 5f       	subi	r22, 0xFF	; 255
    2934:	7f 4f       	sbci	r23, 0xFF	; 255
    2936:	80 91 2e 17 	lds	r24, 0x172E	; 0x80172e <xTimerQueue>
    293a:	90 91 2f 17 	lds	r25, 0x172F	; 0x80172f <xTimerQueue+0x1>
    293e:	0e 94 f8 07 	call	0xff0	; 0xff0 <xQueueGenericSend>
    2942:	0a c0       	rjmp	.+20     	; 0x2958 <xTimerGenericCommand+0x96>
            }
        }
        else
        {
            xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    2944:	20 e0       	ldi	r18, 0x00	; 0
    2946:	a8 01       	movw	r20, r16
    2948:	be 01       	movw	r22, r28
    294a:	6f 5f       	subi	r22, 0xFF	; 255
    294c:	7f 4f       	sbci	r23, 0xFF	; 255
    294e:	cf 01       	movw	r24, r30
    2950:	0e 94 b3 08 	call	0x1166	; 0x1166 <xQueueGenericSendFromISR>
    2954:	01 c0       	rjmp	.+2      	; 0x2958 <xTimerGenericCommand+0x96>
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
BaseType_t xReturn = pdFAIL;
    2956:	80 e0       	ldi	r24, 0x00	; 0
    {
        mtCOVERAGE_TEST_MARKER();
    }

    return xReturn;
}
    2958:	27 96       	adiw	r28, 0x07	; 7
    295a:	0f b6       	in	r0, 0x3f	; 63
    295c:	f8 94       	cli
    295e:	de bf       	out	0x3e, r29	; 62
    2960:	0f be       	out	0x3f, r0	; 63
    2962:	cd bf       	out	0x3d, r28	; 61
    2964:	df 91       	pop	r29
    2966:	cf 91       	pop	r28
    2968:	1f 91       	pop	r17
    296a:	0f 91       	pop	r16
    296c:	ff 90       	pop	r15
    296e:	ef 90       	pop	r14
    2970:	df 90       	pop	r13
    2972:	cf 90       	pop	r12
    2974:	bf 90       	pop	r11
    2976:	af 90       	pop	r10
    2978:	9f 90       	pop	r9
    297a:	8f 90       	pop	r8
    297c:	08 95       	ret

0000297e <prvSampleTimeNow>:
    return xNextExpireTime;
}
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
    297e:	2f 92       	push	r2
    2980:	3f 92       	push	r3
    2982:	4f 92       	push	r4
    2984:	5f 92       	push	r5
    2986:	6f 92       	push	r6
    2988:	7f 92       	push	r7
    298a:	8f 92       	push	r8
    298c:	9f 92       	push	r9
    298e:	af 92       	push	r10
    2990:	bf 92       	push	r11
    2992:	cf 92       	push	r12
    2994:	df 92       	push	r13
    2996:	ef 92       	push	r14
    2998:	ff 92       	push	r15
    299a:	0f 93       	push	r16
    299c:	1f 93       	push	r17
    299e:	cf 93       	push	r28
    29a0:	df 93       	push	r29
    29a2:	1c 01       	movw	r2, r24
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

    xTimeNow = xTaskGetTickCount();
    29a4:	ad d9       	rcall	.-3238   	; 0x1d00 <xTaskGetTickCount>
    29a6:	2b 01       	movw	r4, r22
    29a8:	3c 01       	movw	r6, r24

    if( xTimeNow < xLastTime )
    29aa:	80 91 28 17 	lds	r24, 0x1728	; 0x801728 <xLastTime.2432>
    29ae:	90 91 29 17 	lds	r25, 0x1729	; 0x801729 <xLastTime.2432+0x1>
    29b2:	a0 91 2a 17 	lds	r26, 0x172A	; 0x80172a <xLastTime.2432+0x2>
    29b6:	b0 91 2b 17 	lds	r27, 0x172B	; 0x80172b <xLastTime.2432+0x3>
    29ba:	48 16       	cp	r4, r24
    29bc:	59 06       	cpc	r5, r25
    29be:	6a 06       	cpc	r6, r26
    29c0:	7b 06       	cpc	r7, r27
    29c2:	08 f0       	brcs	.+2      	; 0x29c6 <prvSampleTimeNow+0x48>
    29c4:	53 c0       	rjmp	.+166    	; 0x2a6c <prvSampleTimeNow+0xee>
    29c6:	3b c0       	rjmp	.+118    	; 0x2a3e <prvSampleTimeNow+0xc0>
    If there are any timers still referenced from the current timer list
    then they must have expired and should be processed before the lists
    are switched. */
    while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    {
        xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    29c8:	07 80       	ldd	r0, Z+7	; 0x07
    29ca:	f0 85       	ldd	r31, Z+8	; 0x08
    29cc:	e0 2d       	mov	r30, r0
    29ce:	80 80       	ld	r8, Z
    29d0:	91 80       	ldd	r9, Z+1	; 0x01
    29d2:	a2 80       	ldd	r10, Z+2	; 0x02
    29d4:	b3 80       	ldd	r11, Z+3	; 0x03

        /* Remove the timer from the list. */
        pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    29d6:	c0 85       	ldd	r28, Z+8	; 0x08
    29d8:	d1 85       	ldd	r29, Z+9	; 0x09
        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    29da:	8e 01       	movw	r16, r28
    29dc:	0e 5f       	subi	r16, 0xFE	; 254
    29de:	1f 4f       	sbci	r17, 0xFF	; 255
    29e0:	c8 01       	movw	r24, r16
    29e2:	0e 94 19 05 	call	0xa32	; 0xa32 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* Execute its callback, then send a command to restart the timer if
        it is an auto-reload timer.  It cannot be restarted here as the lists
        have not yet been switched. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    29e6:	ec 89       	ldd	r30, Y+20	; 0x14
    29e8:	fd 89       	ldd	r31, Y+21	; 0x15
    29ea:	ce 01       	movw	r24, r28
    29ec:	19 95       	eicall

        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    29ee:	8f 89       	ldd	r24, Y+23	; 0x17
    29f0:	82 ff       	sbrs	r24, 2
    29f2:	25 c0       	rjmp	.+74     	; 0x2a3e <prvSampleTimeNow+0xc0>
            the timer going into the same timer list then it has already expired
            and the timer should be re-inserted into the current list so it is
            processed again within this loop.  Otherwise a command should be sent
            to restart the timer to ensure it is only inserted into a list after
            the lists have been swapped. */
            xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    29f4:	8e 85       	ldd	r24, Y+14	; 0x0e
    29f6:	9f 85       	ldd	r25, Y+15	; 0x0f
    29f8:	a8 89       	ldd	r26, Y+16	; 0x10
    29fa:	b9 89       	ldd	r27, Y+17	; 0x11
    29fc:	88 0d       	add	r24, r8
    29fe:	99 1d       	adc	r25, r9
    2a00:	aa 1d       	adc	r26, r10
    2a02:	bb 1d       	adc	r27, r11
            if( xReloadTime > xNextExpireTime )
    2a04:	88 16       	cp	r8, r24
    2a06:	99 06       	cpc	r9, r25
    2a08:	aa 06       	cpc	r10, r26
    2a0a:	bb 06       	cpc	r11, r27
    2a0c:	70 f4       	brcc	.+28     	; 0x2a2a <prvSampleTimeNow+0xac>
            {
                listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    2a0e:	8a 83       	std	Y+2, r24	; 0x02
    2a10:	9b 83       	std	Y+3, r25	; 0x03
    2a12:	ac 83       	std	Y+4, r26	; 0x04
    2a14:	bd 83       	std	Y+5, r27	; 0x05
                listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    2a16:	db 87       	std	Y+11, r29	; 0x0b
    2a18:	ca 87       	std	Y+10, r28	; 0x0a
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    2a1a:	b8 01       	movw	r22, r16
    2a1c:	80 91 32 17 	lds	r24, 0x1732	; 0x801732 <pxCurrentTimerList>
    2a20:	90 91 33 17 	lds	r25, 0x1733	; 0x801733 <pxCurrentTimerList+0x1>
    2a24:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <vListInsert>
    2a28:	0a c0       	rjmp	.+20     	; 0x2a3e <prvSampleTimeNow+0xc0>
            }
            else
            {
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    2a2a:	c1 2c       	mov	r12, r1
    2a2c:	d1 2c       	mov	r13, r1
    2a2e:	76 01       	movw	r14, r12
    2a30:	00 e0       	ldi	r16, 0x00	; 0
    2a32:	10 e0       	ldi	r17, 0x00	; 0
    2a34:	a5 01       	movw	r20, r10
    2a36:	94 01       	movw	r18, r8
    2a38:	60 e0       	ldi	r22, 0x00	; 0
    2a3a:	ce 01       	movw	r24, r28
    2a3c:	42 df       	rcall	.-380    	; 0x28c2 <xTimerGenericCommand>

    /* The tick count has overflowed.  The timer lists must be switched.
    If there are any timers still referenced from the current timer list
    then they must have expired and should be processed before the lists
    are switched. */
    while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    2a3e:	e0 91 32 17 	lds	r30, 0x1732	; 0x801732 <pxCurrentTimerList>
    2a42:	f0 91 33 17 	lds	r31, 0x1733	; 0x801733 <pxCurrentTimerList+0x1>
    2a46:	80 81       	ld	r24, Z
    2a48:	81 11       	cpse	r24, r1
    2a4a:	be cf       	rjmp	.-132    	; 0x29c8 <prvSampleTimeNow+0x4a>
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxTemp = pxCurrentTimerList;
    pxCurrentTimerList = pxOverflowTimerList;
    2a4c:	80 91 30 17 	lds	r24, 0x1730	; 0x801730 <pxOverflowTimerList>
    2a50:	90 91 31 17 	lds	r25, 0x1731	; 0x801731 <pxOverflowTimerList+0x1>
    2a54:	90 93 33 17 	sts	0x1733, r25	; 0x801733 <pxCurrentTimerList+0x1>
    2a58:	80 93 32 17 	sts	0x1732, r24	; 0x801732 <pxCurrentTimerList>
    pxOverflowTimerList = pxTemp;
    2a5c:	f0 93 31 17 	sts	0x1731, r31	; 0x801731 <pxOverflowTimerList+0x1>
    2a60:	e0 93 30 17 	sts	0x1730, r30	; 0x801730 <pxOverflowTimerList>
    xTimeNow = xTaskGetTickCount();

    if( xTimeNow < xLastTime )
    {
        prvSwitchTimerLists();
        *pxTimerListsWereSwitched = pdTRUE;
    2a64:	81 e0       	ldi	r24, 0x01	; 1
    2a66:	f1 01       	movw	r30, r2
    2a68:	80 83       	st	Z, r24
    2a6a:	02 c0       	rjmp	.+4      	; 0x2a70 <prvSampleTimeNow+0xf2>
    }
    else
    {
        *pxTimerListsWereSwitched = pdFALSE;
    2a6c:	f1 01       	movw	r30, r2
    2a6e:	10 82       	st	Z, r1
    }

    xLastTime = xTimeNow;
    2a70:	40 92 28 17 	sts	0x1728, r4	; 0x801728 <xLastTime.2432>
    2a74:	50 92 29 17 	sts	0x1729, r5	; 0x801729 <xLastTime.2432+0x1>
    2a78:	60 92 2a 17 	sts	0x172A, r6	; 0x80172a <xLastTime.2432+0x2>
    2a7c:	70 92 2b 17 	sts	0x172B, r7	; 0x80172b <xLastTime.2432+0x3>

    return xTimeNow;
}
    2a80:	c3 01       	movw	r24, r6
    2a82:	b2 01       	movw	r22, r4
    2a84:	df 91       	pop	r29
    2a86:	cf 91       	pop	r28
    2a88:	1f 91       	pop	r17
    2a8a:	0f 91       	pop	r16
    2a8c:	ff 90       	pop	r15
    2a8e:	ef 90       	pop	r14
    2a90:	df 90       	pop	r13
    2a92:	cf 90       	pop	r12
    2a94:	bf 90       	pop	r11
    2a96:	af 90       	pop	r10
    2a98:	9f 90       	pop	r9
    2a9a:	8f 90       	pop	r8
    2a9c:	7f 90       	pop	r7
    2a9e:	6f 90       	pop	r6
    2aa0:	5f 90       	pop	r5
    2aa2:	4f 90       	pop	r4
    2aa4:	3f 90       	pop	r3
    2aa6:	2f 90       	pop	r2
    2aa8:	08 95       	ret

00002aaa <vApplicationIdleHook>:
 *
 */
void vApplicationIdleHook( void ) __attribute__((weak));

void vApplicationIdleHook( void )
{
    2aaa:	08 95       	ret

00002aac <vApplicationMallocFailedHook>:
void vApplicationMallocFailedHook( void ) __attribute__((weak));

void vApplicationMallocFailedHook( void )
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__) // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    2aac:	27 9a       	sbi	0x04, 7	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    2aae:	2f 9a       	sbi	0x05, 7	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2ab0:	2f ef       	ldi	r18, 0xFF	; 255
    2ab2:	80 e7       	ldi	r24, 0x70	; 112
    2ab4:	92 e0       	ldi	r25, 0x02	; 2
    2ab6:	21 50       	subi	r18, 0x01	; 1
    2ab8:	80 40       	sbci	r24, 0x00	; 0
    2aba:	90 40       	sbci	r25, 0x00	; 0
    2abc:	e1 f7       	brne	.-8      	; 0x2ab6 <vApplicationMallocFailedHook+0xa>
    2abe:	00 c0       	rjmp	.+0      	; 0x2ac0 <vApplicationMallocFailedHook+0x14>
    2ac0:	00 00       	nop
    for(;;)
    {
        _delay_ms(50);

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle. Main LED fast blink.
    2ac2:	1f 9a       	sbi	0x03, 7	; 3
    2ac4:	f5 cf       	rjmp	.-22     	; 0x2ab0 <vApplicationMallocFailedHook+0x4>

00002ac6 <vApplicationStackOverflowHook>:
void vApplicationStackOverflowHook( TaskHandle_t xTask, portCHAR *pcTaskName ) __attribute__((weak));

void vApplicationStackOverflowHook( TaskHandle_t xTask __attribute__((unused)), portCHAR *pcTaskName __attribute__((unused))  )
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    2ac6:	27 9a       	sbi	0x04, 7	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    2ac8:	2f 9a       	sbi	0x05, 7	; 5
    2aca:	2f ef       	ldi	r18, 0xFF	; 255
    2acc:	87 ea       	ldi	r24, 0xA7	; 167
    2ace:	91 e6       	ldi	r25, 0x61	; 97
    2ad0:	21 50       	subi	r18, 0x01	; 1
    2ad2:	80 40       	sbci	r24, 0x00	; 0
    2ad4:	90 40       	sbci	r25, 0x00	; 0
    2ad6:	e1 f7       	brne	.-8      	; 0x2ad0 <vApplicationStackOverflowHook+0xa>
    2ad8:	00 c0       	rjmp	.+0      	; 0x2ada <vApplicationStackOverflowHook+0x14>
    2ada:	00 00       	nop
    for(;;)
    {
        _delay_ms(2000);

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Arduino Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle. Main LED slow blink.
    2adc:	1f 9a       	sbi	0x03, 7	; 3
    2ade:	f5 cf       	rjmp	.-22     	; 0x2aca <vApplicationStackOverflowHook+0x4>

00002ae0 <task1>:
	,  NULL );
}

/*-----------------------------------------------------------*/
void task1( void *pvParameters )
{
    2ae0:	cf 93       	push	r28
    2ae2:	df 93       	push	r29
    2ae4:	00 d0       	rcall	.+0      	; 0x2ae6 <task1+0x6>
    2ae6:	1f 92       	push	r1
    2ae8:	cd b7       	in	r28, 0x3d	; 61
    2aea:	de b7       	in	r29, 0x3e	; 62
	#if (configUSE_APPLICATION_TASK_TAG == 1)
	// Set task no to be used for tracing with R2R-Network
	vTaskSetApplicationTaskTag( NULL, ( void * ) 1 );
    2aec:	61 e0       	ldi	r22, 0x01	; 1
    2aee:	70 e0       	ldi	r23, 0x00	; 0
    2af0:	80 e0       	ldi	r24, 0x00	; 0
    2af2:	90 e0       	ldi	r25, 0x00	; 0
    2af4:	db da       	rcall	.-2634   	; 0x20ac <vTaskSetApplicationTaskTag>

	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 500/portTICK_PERIOD_MS; // 500 ms

	// Initialize the xLastWakeTime variable with the current time.
	xLastWakeTime = xTaskGetTickCount();
    2af6:	04 d9       	rcall	.-3576   	; 0x1d00 <xTaskGetTickCount>
    2af8:	69 83       	std	Y+1, r22	; 0x01
    2afa:	7a 83       	std	Y+2, r23	; 0x02
    2afc:	8b 83       	std	Y+3, r24	; 0x03
    2afe:	9c 83       	std	Y+4, r25	; 0x04
    2b00:	11 e0       	ldi	r17, 0x01	; 1

	for(;;)
	{
		vTaskDelayUntil( &xLastWakeTime, xFrequency );
		puts("Task1"); // stdio functions are not reentrant - Should normally be protected by MUTEX
		PORTA ^= _BV(PA0);
    2b02:	4f e1       	ldi	r20, 0x1F	; 31
	// Initialize the xLastWakeTime variable with the current time.
	xLastWakeTime = xTaskGetTickCount();

	for(;;)
	{
		vTaskDelayUntil( &xLastWakeTime, xFrequency );
    2b04:	50 e0       	ldi	r21, 0x00	; 0
    2b06:	60 e0       	ldi	r22, 0x00	; 0
    2b08:	70 e0       	ldi	r23, 0x00	; 0
    2b0a:	ce 01       	movw	r24, r28
    2b0c:	01 96       	adiw	r24, 0x01	; 1
    2b0e:	57 da       	rcall	.-2898   	; 0x1fbe <vTaskDelayUntil>
    2b10:	83 e9       	ldi	r24, 0x93	; 147
		puts("Task1"); // stdio functions are not reentrant - Should normally be protected by MUTEX
    2b12:	93 e0       	ldi	r25, 0x03	; 3
    2b14:	0e 94 2a 24 	call	0x4854	; 0x4854 <puts>
    2b18:	82 b1       	in	r24, 0x02	; 2
		PORTA ^= _BV(PA0);
    2b1a:	81 27       	eor	r24, r17
    2b1c:	82 b9       	out	0x02, r24	; 2
    2b1e:	f1 cf       	rjmp	.-30     	; 0x2b02 <task1+0x22>

00002b20 <task2>:
    2b20:	cf 93       	push	r28
	}
}

/*-----------------------------------------------------------*/
void task2( void *pvParameters )
{
    2b22:	df 93       	push	r29
    2b24:	00 d0       	rcall	.+0      	; 0x2b26 <task2+0x6>
    2b26:	1f 92       	push	r1
    2b28:	cd b7       	in	r28, 0x3d	; 61
    2b2a:	de b7       	in	r29, 0x3e	; 62
	#if (configUSE_APPLICATION_TASK_TAG == 1)
	// Set task no to be used for tracing with R2R-Network
	vTaskSetApplicationTaskTag( NULL, ( void * ) 2 );
    2b2c:	62 e0       	ldi	r22, 0x02	; 2
    2b2e:	70 e0       	ldi	r23, 0x00	; 0
    2b30:	80 e0       	ldi	r24, 0x00	; 0
    2b32:	90 e0       	ldi	r25, 0x00	; 0
    2b34:	bb da       	rcall	.-2698   	; 0x20ac <vTaskSetApplicationTaskTag>

	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 1000/portTICK_PERIOD_MS; // 1000 ms

	// Initialize the xLastWakeTime variable with the current time.
	xLastWakeTime = xTaskGetTickCount();
    2b36:	e4 d8       	rcall	.-3640   	; 0x1d00 <xTaskGetTickCount>
    2b38:	69 83       	std	Y+1, r22	; 0x01
    2b3a:	7a 83       	std	Y+2, r23	; 0x02
    2b3c:	8b 83       	std	Y+3, r24	; 0x03
    2b3e:	9c 83       	std	Y+4, r25	; 0x04
    2b40:	4e e3       	ldi	r20, 0x3E	; 62

	for(;;)
	{
		vTaskDelayUntil( &xLastWakeTime, xFrequency );
    2b42:	50 e0       	ldi	r21, 0x00	; 0
    2b44:	60 e0       	ldi	r22, 0x00	; 0
    2b46:	70 e0       	ldi	r23, 0x00	; 0
    2b48:	ce 01       	movw	r24, r28
    2b4a:	01 96       	adiw	r24, 0x01	; 1
    2b4c:	38 da       	rcall	.-2960   	; 0x1fbe <vTaskDelayUntil>
    2b4e:	89 e9       	ldi	r24, 0x99	; 153
		puts("Task2"); // stdio functions are not reentrant - Should normally be protected by MUTEX
    2b50:	93 e0       	ldi	r25, 0x03	; 3
    2b52:	0e 94 2a 24 	call	0x4854	; 0x4854 <puts>
    2b56:	82 b1       	in	r24, 0x02	; 2
		PORTA ^= _BV(PA7);
    2b58:	80 58       	subi	r24, 0x80	; 128
    2b5a:	82 b9       	out	0x02, r24	; 2
    2b5c:	f1 cf       	rjmp	.-30     	; 0x2b40 <task2+0x20>

00002b5e <create_tasks_and_semaphores>:
    2b5e:	ef 92       	push	r14
// Prototype for LoRaWAN handler
void lora_handler_create(UBaseType_t lora_handler_task_priority);

/*-----------------------------------------------------------*/
void create_tasks_and_semaphores(void)
{
    2b60:	ff 92       	push	r15
    2b62:	0f 93       	push	r16
	// Semaphores are useful to stop a Task proceeding, where it should be paused to wait,
	// because it is sharing a resource, such as the Serial port.
	// Semaphores should only be used whilst the scheduler is running, but we can set it up here.
	if ( xTestSemaphore == NULL )  // Check to confirm that the Semaphore has not already been created.
    2b64:	80 91 89 18 	lds	r24, 0x1889	; 0x801889 <xTestSemaphore>
    2b68:	90 91 8a 18 	lds	r25, 0x188A	; 0x80188a <xTestSemaphore+0x1>
    2b6c:	89 2b       	or	r24, r25
    2b6e:	89 f4       	brne	.+34     	; 0x2b92 <create_tasks_and_semaphores+0x34>
	{
		xTestSemaphore = xSemaphoreCreateMutex();  // Create a mutex semaphore.
    2b70:	81 e0       	ldi	r24, 0x01	; 1
    2b72:	0e 94 98 08 	call	0x1130	; 0x1130 <xQueueCreateMutex>
    2b76:	90 93 8a 18 	sts	0x188A, r25	; 0x80188a <xTestSemaphore+0x1>
    2b7a:	80 93 89 18 	sts	0x1889, r24	; 0x801889 <xTestSemaphore>
		if ( ( xTestSemaphore ) != NULL )
    2b7e:	00 97       	sbiw	r24, 0x00	; 0
    2b80:	41 f0       	breq	.+16     	; 0x2b92 <create_tasks_and_semaphores+0x34>
		{
			xSemaphoreGive( ( xTestSemaphore ) );  // Make the mutex available for use, by initially "Giving" the Semaphore.
    2b82:	00 e0       	ldi	r16, 0x00	; 0
    2b84:	20 e0       	ldi	r18, 0x00	; 0
    2b86:	30 e0       	ldi	r19, 0x00	; 0
    2b88:	a9 01       	movw	r20, r18
    2b8a:	60 e0       	ldi	r22, 0x00	; 0
    2b8c:	70 e0       	ldi	r23, 0x00	; 0
    2b8e:	0e 94 f8 07 	call	0xff0	; 0xff0 <xQueueGenericSend>
		}
	}

	xTaskCreate(
    2b92:	e1 2c       	mov	r14, r1
    2b94:	f1 2c       	mov	r15, r1
    2b96:	02 e0       	ldi	r16, 0x02	; 2
    2b98:	20 e0       	ldi	r18, 0x00	; 0
    2b9a:	30 e0       	ldi	r19, 0x00	; 0
    2b9c:	40 ec       	ldi	r20, 0xC0	; 192
    2b9e:	50 e0       	ldi	r21, 0x00	; 0
    2ba0:	63 e9       	ldi	r22, 0x93	; 147
    2ba2:	73 e0       	ldi	r23, 0x03	; 3
    2ba4:	80 e7       	ldi	r24, 0x70	; 112
    2ba6:	95 e1       	ldi	r25, 0x15	; 21
    2ba8:	0e 94 1f 0d 	call	0x1a3e	; 0x1a3e <xTaskCreate>
	,  configMINIMAL_STACK_SIZE  // This stack size can be checked & adjusted by reading the Stack Highwater
	,  NULL
	,  2  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );

	xTaskCreate(
    2bac:	01 e0       	ldi	r16, 0x01	; 1
    2bae:	20 e0       	ldi	r18, 0x00	; 0
    2bb0:	30 e0       	ldi	r19, 0x00	; 0
    2bb2:	40 ec       	ldi	r20, 0xC0	; 192
    2bb4:	50 e0       	ldi	r21, 0x00	; 0
    2bb6:	69 e9       	ldi	r22, 0x99	; 153
    2bb8:	73 e0       	ldi	r23, 0x03	; 3
    2bba:	80 e9       	ldi	r24, 0x90	; 144
    2bbc:	95 e1       	ldi	r25, 0x15	; 21
    2bbe:	0e 94 1f 0d 	call	0x1a3e	; 0x1a3e <xTaskCreate>
	,  (const portCHAR *)"Task2"  // A name just for humans
	,  configMINIMAL_STACK_SIZE  // This stack size can be checked & adjusted by reading the Stack Highwater
	,  NULL
	,  1  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
}
    2bc2:	0f 91       	pop	r16
    2bc4:	ff 90       	pop	r15
    2bc6:	ef 90       	pop	r14
    2bc8:	08 95       	ret

00002bca <initialiseSystem>:

/*-----------------------------------------------------------*/
void initialiseSystem()
{
	// Set output ports for leds used in the example
	DDRA |= _BV(DDA0) | _BV(DDA7);
    2bca:	81 b1       	in	r24, 0x01	; 1
    2bcc:	81 68       	ori	r24, 0x81	; 129
    2bce:	81 b9       	out	0x01, r24	; 1
	// Initialise the trace-driver to be used together with the R2R-Network
	trace_init();
    2bd0:	0e 94 59 03 	call	0x6b2	; 0x6b2 <trace_init>
	// Make it possible to use stdio on COM port 0 (USB) on Arduino board - Setting 57600,8,N,1
	stdio_create(ser_USART0);
    2bd4:	80 e0       	ldi	r24, 0x00	; 0
    2bd6:	0e 94 8e 1e 	call	0x3d1c	; 0x3d1c <stdio_create>
	// Let's create some tasks
	create_tasks_and_semaphores();
    2bda:	c1 df       	rcall	.-126    	; 0x2b5e <create_tasks_and_semaphores>

	// vvvvvvvvvvvvvvvvv BELOW IS LoRaWAN initialisation vvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
	// Initialise the HAL layer and use 5 for LED driver priority
	hal_create(5);
    2bdc:	85 e0       	ldi	r24, 0x05	; 5
    2bde:	0f d0       	rcall	.+30     	; 0x2bfe <hal_create>
	// Initialise the LoRaWAN driver without down-link buffer
	lora_driver_create(1, NULL);
    2be0:	60 e0       	ldi	r22, 0x00	; 0
    2be2:	70 e0       	ldi	r23, 0x00	; 0
    2be4:	81 e0       	ldi	r24, 0x01	; 1
    2be6:	5b d1       	rcall	.+694    	; 0x2e9e <lora_driver_create>
	// Create LoRaWAN task and start it up with priority 3
	lora_handler_create(3);
    2be8:	83 e0       	ldi	r24, 0x03	; 3
    2bea:	0c 94 45 03 	jmp	0x68a	; 0x68a <lora_handler_create>
    2bee:	08 95       	ret

00002bf0 <main>:
}

/*-----------------------------------------------------------*/
int main(void)
{
	initialiseSystem(); // Must be done as the very first thing!!
    2bf0:	ec df       	rcall	.-40     	; 0x2bca <initialiseSystem>
	printf("Program Started!!\n");
    2bf2:	8f e9       	ldi	r24, 0x9F	; 159
    2bf4:	93 e0       	ldi	r25, 0x03	; 3
    2bf6:	0e 94 2a 24 	call	0x4854	; 0x4854 <puts>
	vTaskStartScheduler(); // Initialise and run the freeRTOS scheduler. Execution should never return from here.
    2bfa:	40 d8       	rcall	.-3968   	; 0x1c7c <vTaskStartScheduler>
    2bfc:	ff cf       	rjmp	.-2      	; 0x2bfc <main+0xc>

00002bfe <hal_create>:
    2bfe:	eb e8       	ldi	r30, 0x8B	; 139
    2c00:	f8 e1       	ldi	r31, 0x18	; 24
    2c02:	24 ea       	ldi	r18, 0xA4	; 164
    2c04:	3a e1       	ldi	r19, 0x1A	; 26
    2c06:	31 83       	std	Z+1, r19	; 0x01
    2c08:	20 83       	st	Z, r18
    2c0a:	27 ea       	ldi	r18, 0xA7	; 167
    2c0c:	3a e1       	ldi	r19, 0x1A	; 26
    2c0e:	33 83       	std	Z+3, r19	; 0x03
    2c10:	22 83       	std	Z+2, r18	; 0x02
    2c12:	22 eb       	ldi	r18, 0xB2	; 178
    2c14:	3a e1       	ldi	r19, 0x1A	; 26
    2c16:	35 83       	std	Z+5, r19	; 0x05
    2c18:	24 83       	std	Z+4, r18	; 0x04
    2c1a:	26 eb       	ldi	r18, 0xB6	; 182
    2c1c:	3a e1       	ldi	r19, 0x1A	; 26
    2c1e:	37 83       	std	Z+7, r19	; 0x07
    2c20:	26 83       	std	Z+6, r18	; 0x06
    2c22:	2c eb       	ldi	r18, 0xBC	; 188
    2c24:	3a e1       	ldi	r19, 0x1A	; 26
    2c26:	31 87       	std	Z+9, r19	; 0x09
    2c28:	20 87       	std	Z+8, r18	; 0x08
    2c2a:	28 ec       	ldi	r18, 0xC8	; 200
    2c2c:	3a e1       	ldi	r19, 0x1A	; 26
    2c2e:	33 87       	std	Z+11, r19	; 0x0b
    2c30:	22 87       	std	Z+10, r18	; 0x0a
    2c32:	2d ec       	ldi	r18, 0xCD	; 205
    2c34:	3a e1       	ldi	r19, 0x1A	; 26
    2c36:	35 87       	std	Z+13, r19	; 0x0d
    2c38:	24 87       	std	Z+12, r18	; 0x0c
    2c3a:	29 ed       	ldi	r18, 0xD9	; 217
    2c3c:	3a e1       	ldi	r19, 0x1A	; 26
    2c3e:	37 87       	std	Z+15, r19	; 0x0f
    2c40:	26 87       	std	Z+14, r18	; 0x0e
    2c42:	29 eb       	ldi	r18, 0xB9	; 185
    2c44:	3a e1       	ldi	r19, 0x1A	; 26
    2c46:	31 8b       	std	Z+17, r19	; 0x11
    2c48:	20 8b       	std	Z+16, r18	; 0x10
    2c4a:	2e ed       	ldi	r18, 0xDE	; 222
    2c4c:	3a e1       	ldi	r19, 0x1A	; 26
    2c4e:	33 8b       	std	Z+19, r19	; 0x13
    2c50:	22 8b       	std	Z+18, r18	; 0x12
    2c52:	2b ee       	ldi	r18, 0xEB	; 235
    2c54:	3a e1       	ldi	r19, 0x1A	; 26
    2c56:	35 8b       	std	Z+21, r19	; 0x15
    2c58:	24 8b       	std	Z+20, r18	; 0x14
    2c5a:	0c 94 95 1f 	jmp	0x3f2a	; 0x3f2a <status_leds_create>
    2c5e:	08 95       	ret

00002c60 <_serialCallBack>:
    2c60:	0f 93       	push	r16
    2c62:	1f 93       	push	r17
    2c64:	cf 93       	push	r28
    2c66:	df 93       	push	r29
    2c68:	1f 92       	push	r1
    2c6a:	1f 92       	push	r1
    2c6c:	cd b7       	in	r28, 0x3d	; 61
    2c6e:	de b7       	in	r29, 0x3e	; 62
    2c70:	8c 01       	movw	r16, r24
    2c72:	19 82       	std	Y+1, r1	; 0x01
    2c74:	2d c0       	rjmp	.+90     	; 0x2cd0 <_serialCallBack+0x70>
    2c76:	e0 91 ae 17 	lds	r30, 0x17AE	; 0x8017ae <rec_buf_inp.2947>
    2c7a:	ec 32       	cpi	r30, 0x2C	; 44
    2c7c:	50 f4       	brcc	.+20     	; 0x2c92 <_serialCallBack+0x32>
    2c7e:	81 e0       	ldi	r24, 0x01	; 1
    2c80:	8e 0f       	add	r24, r30
    2c82:	80 93 ae 17 	sts	0x17AE, r24	; 0x8017ae <rec_buf_inp.2947>
    2c86:	f0 e0       	ldi	r31, 0x00	; 0
    2c88:	e0 52       	subi	r30, 0x20	; 32
    2c8a:	f8 4e       	sbci	r31, 0xE8	; 232
    2c8c:	8a 81       	ldd	r24, Y+2	; 0x02
    2c8e:	80 83       	st	Z, r24
    2c90:	02 c0       	rjmp	.+4      	; 0x2c96 <_serialCallBack+0x36>
    2c92:	10 92 ae 17 	sts	0x17AE, r1	; 0x8017ae <rec_buf_inp.2947>
    2c96:	8a 81       	ldd	r24, Y+2	; 0x02
    2c98:	8a 30       	cpi	r24, 0x0A	; 10
    2c9a:	d1 f4       	brne	.+52     	; 0x2cd0 <_serialCallBack+0x70>
    2c9c:	40 91 ae 17 	lds	r20, 0x17AE	; 0x8017ae <rec_buf_inp.2947>
    2ca0:	50 e0       	ldi	r21, 0x00	; 0
    2ca2:	fa 01       	movw	r30, r20
    2ca4:	e2 52       	subi	r30, 0x22	; 34
    2ca6:	f8 4e       	sbci	r31, 0xE8	; 232
    2ca8:	10 82       	st	Z, r1
    2caa:	41 50       	subi	r20, 0x01	; 1
    2cac:	51 09       	sbc	r21, r1
    2cae:	9e 01       	movw	r18, r28
    2cb0:	2f 5f       	subi	r18, 0xFF	; 255
    2cb2:	3f 4f       	sbci	r19, 0xFF	; 255
    2cb4:	60 ee       	ldi	r22, 0xE0	; 224
    2cb6:	77 e1       	ldi	r23, 0x17	; 23
    2cb8:	80 91 b1 17 	lds	r24, 0x17B1	; 0x8017b1 <_serialReplyBufferHandle>
    2cbc:	90 91 b2 17 	lds	r25, 0x17B2	; 0x8017b2 <_serialReplyBufferHandle+0x1>
    2cc0:	0e 94 9c 0b 	call	0x1738	; 0x1738 <xStreamBufferSendFromISR>
    2cc4:	89 81       	ldd	r24, Y+1	; 0x01
    2cc6:	81 11       	cpse	r24, r1
    2cc8:	0e 94 ee 05 	call	0xbdc	; 0xbdc <vPortYield>
    2ccc:	10 92 ae 17 	sts	0x17AE, r1	; 0x8017ae <rec_buf_inp.2947>
    2cd0:	be 01       	movw	r22, r28
    2cd2:	6e 5f       	subi	r22, 0xFE	; 254
    2cd4:	7f 4f       	sbci	r23, 0xFF	; 255
    2cd6:	c8 01       	movw	r24, r16
    2cd8:	8f d5       	rcall	.+2846   	; 0x37f8 <serial_getByte>
    2cda:	88 23       	and	r24, r24
    2cdc:	61 f2       	breq	.-104    	; 0x2c76 <_serialCallBack+0x16>
    2cde:	0f 90       	pop	r0
    2ce0:	0f 90       	pop	r0
    2ce2:	df 91       	pop	r29
    2ce4:	cf 91       	pop	r28
    2ce6:	1f 91       	pop	r17
    2ce8:	0f 91       	pop	r16
    2cea:	08 95       	ret

00002cec <_uploadMessage>:
    2cec:	0f 93       	push	r16
    2cee:	1f 93       	push	r17
    2cf0:	cf 93       	push	r28
    2cf2:	df 93       	push	r29
    2cf4:	8c 01       	movw	r16, r24
    2cf6:	eb 01       	movw	r28, r22
    2cf8:	80 91 b1 17 	lds	r24, 0x17B1	; 0x8017b1 <_serialReplyBufferHandle>
    2cfc:	90 91 b2 17 	lds	r25, 0x17B2	; 0x8017b2 <_serialReplyBufferHandle+0x1>
    2d00:	0e 94 b4 0a 	call	0x1568	; 0x1568 <xStreamBufferReset>
    2d04:	b8 01       	movw	r22, r16
    2d06:	8a e4       	ldi	r24, 0x4A	; 74
    2d08:	97 e1       	ldi	r25, 0x17	; 23
    2d0a:	0e 94 f8 23 	call	0x47f0	; 0x47f0 <strcpy>
    2d0e:	20 97       	sbiw	r28, 0x00	; 0
    2d10:	79 f0       	breq	.+30     	; 0x2d30 <_uploadMessage+0x44>
    2d12:	ea e4       	ldi	r30, 0x4A	; 74
    2d14:	f7 e1       	ldi	r31, 0x17	; 23
    2d16:	01 90       	ld	r0, Z+
    2d18:	00 20       	and	r0, r0
    2d1a:	e9 f7       	brne	.-6      	; 0x2d16 <_uploadMessage+0x2a>
    2d1c:	31 97       	sbiw	r30, 0x01	; 1
    2d1e:	80 e2       	ldi	r24, 0x20	; 32
    2d20:	90 e0       	ldi	r25, 0x00	; 0
    2d22:	91 83       	std	Z+1, r25	; 0x01
    2d24:	80 83       	st	Z, r24
    2d26:	be 01       	movw	r22, r28
    2d28:	8a e4       	ldi	r24, 0x4A	; 74
    2d2a:	97 e1       	ldi	r25, 0x17	; 23
    2d2c:	0e 94 ed 23 	call	0x47da	; 0x47da <strcat>
    2d30:	ea e4       	ldi	r30, 0x4A	; 74
    2d32:	f7 e1       	ldi	r31, 0x17	; 23
    2d34:	df 01       	movw	r26, r30
    2d36:	0d 90       	ld	r0, X+
    2d38:	00 20       	and	r0, r0
    2d3a:	e9 f7       	brne	.-6      	; 0x2d36 <_uploadMessage+0x4a>
    2d3c:	11 97       	sbiw	r26, 0x01	; 1
    2d3e:	8d e0       	ldi	r24, 0x0D	; 13
    2d40:	9a e0       	ldi	r25, 0x0A	; 10
    2d42:	11 96       	adiw	r26, 0x01	; 1
    2d44:	9c 93       	st	X, r25
    2d46:	8e 93       	st	-X, r24
    2d48:	12 96       	adiw	r26, 0x02	; 2
    2d4a:	1c 92       	st	X, r1
    2d4c:	01 90       	ld	r0, Z+
    2d4e:	00 20       	and	r0, r0
    2d50:	e9 f7       	brne	.-6      	; 0x2d4c <_uploadMessage+0x60>
    2d52:	31 97       	sbiw	r30, 0x01	; 1
    2d54:	ea 54       	subi	r30, 0x4A	; 74
    2d56:	f7 41       	sbci	r31, 0x17	; 23
    2d58:	ae 2f       	mov	r26, r30
    2d5a:	8a e4       	ldi	r24, 0x4A	; 74
    2d5c:	97 e1       	ldi	r25, 0x17	; 23
    2d5e:	ac 01       	movw	r20, r24
    2d60:	6a 2f       	mov	r22, r26
    2d62:	80 91 b3 17 	lds	r24, 0x17B3	; 0x8017b3 <_rn2483_serial>
    2d66:	90 91 b4 17 	lds	r25, 0x17B4	; 0x8017b4 <_rn2483_serial+0x1>
    2d6a:	f6 d4       	rcall	.+2540   	; 0x3758 <serial_sendBytes>
    2d6c:	81 11       	cpse	r24, r1
    2d6e:	11 c0       	rjmp	.+34     	; 0x2d92 <_uploadMessage+0xa6>
    2d70:	08 e2       	ldi	r16, 0x28	; 40
    2d72:	15 e0       	ldi	r17, 0x05	; 5
    2d74:	20 e0       	ldi	r18, 0x00	; 0
    2d76:	30 e0       	ldi	r19, 0x00	; 0
    2d78:	4d e2       	ldi	r20, 0x2D	; 45
    2d7a:	50 e0       	ldi	r21, 0x00	; 0
    2d7c:	6a e3       	ldi	r22, 0x3A	; 58
    2d7e:	78 e1       	ldi	r23, 0x18	; 24
    2d80:	80 91 b1 17 	lds	r24, 0x17B1	; 0x8017b1 <_serialReplyBufferHandle>
    2d84:	90 91 b2 17 	lds	r25, 0x17B2	; 0x8017b2 <_serialReplyBufferHandle+0x1>
    2d88:	0e 94 de 0b 	call	0x17bc	; 0x17bc <xStreamBufferReceive>
    2d8c:	8a e3       	ldi	r24, 0x3A	; 58
    2d8e:	98 e1       	ldi	r25, 0x18	; 24
    2d90:	02 c0       	rjmp	.+4      	; 0x2d96 <_uploadMessage+0xaa>
    2d92:	80 e0       	ldi	r24, 0x00	; 0
    2d94:	90 e0       	ldi	r25, 0x00	; 0
    2d96:	df 91       	pop	r29
    2d98:	cf 91       	pop	r28
    2d9a:	1f 91       	pop	r17
    2d9c:	0f 91       	pop	r16
    2d9e:	08 95       	ret

00002da0 <_reply2ReturnCode>:
    2da0:	2f 92       	push	r2
    2da2:	3f 92       	push	r3
    2da4:	4f 92       	push	r4
    2da6:	5f 92       	push	r5
    2da8:	6f 92       	push	r6
    2daa:	7f 92       	push	r7
    2dac:	8f 92       	push	r8
    2dae:	9f 92       	push	r9
    2db0:	af 92       	push	r10
    2db2:	bf 92       	push	r11
    2db4:	cf 92       	push	r12
    2db6:	df 92       	push	r13
    2db8:	ef 92       	push	r14
    2dba:	ff 92       	push	r15
    2dbc:	0f 93       	push	r16
    2dbe:	1f 93       	push	r17
    2dc0:	cf 93       	push	r28
    2dc2:	df 93       	push	r29
    2dc4:	5c 01       	movw	r10, r24
    2dc6:	fc 01       	movw	r30, r24
    2dc8:	01 90       	ld	r0, Z+
    2dca:	00 20       	and	r0, r0
    2dcc:	e9 f7       	brne	.-6      	; 0x2dc8 <_reply2ReturnCode+0x28>
    2dce:	31 97       	sbiw	r30, 0x01	; 1
    2dd0:	6f 01       	movw	r12, r30
    2dd2:	c8 1a       	sub	r12, r24
    2dd4:	d9 0a       	sbc	r13, r25
    2dd6:	5c 2c       	mov	r5, r12
    2dd8:	0f 2e       	mov	r0, r31
    2dda:	fa e4       	ldi	r31, 0x4A	; 74
    2ddc:	8f 2e       	mov	r8, r31
    2dde:	f6 e0       	ldi	r31, 0x06	; 6
    2de0:	9f 2e       	mov	r9, r31
    2de2:	f0 2d       	mov	r31, r0
    2de4:	e1 2c       	mov	r14, r1
    2de6:	f1 2c       	mov	r15, r1
    2de8:	4c 2c       	mov	r4, r12
    2dea:	37 01       	movw	r6, r14
    2dec:	f4 01       	movw	r30, r8
    2dee:	01 81       	ldd	r16, Z+1	; 0x01
    2df0:	12 81       	ldd	r17, Z+2	; 0x02
    2df2:	e8 01       	movw	r28, r16
    2df4:	09 90       	ld	r0, Y+
    2df6:	00 20       	and	r0, r0
    2df8:	e9 f7       	brne	.-6      	; 0x2df4 <_reply2ReturnCode+0x54>
    2dfa:	21 97       	sbiw	r28, 0x01	; 1
    2dfc:	c0 1b       	sub	r28, r16
    2dfe:	d1 0b       	sbc	r29, r17
    2e00:	3c 2e       	mov	r3, r28
    2e02:	f9 e0       	ldi	r31, 0x09	; 9
    2e04:	cf 16       	cp	r12, r31
    2e06:	d1 04       	cpc	r13, r1
    2e08:	58 f0       	brcs	.+22     	; 0x2e20 <_reply2ReturnCode+0x80>
    2e0a:	f4 01       	movw	r30, r8
    2e0c:	20 80       	ld	r2, Z
    2e0e:	fe e0       	ldi	r31, 0x0E	; 14
    2e10:	2f 12       	cpse	r2, r31
    2e12:	06 c0       	rjmp	.+12     	; 0x2e20 <_reply2ReturnCode+0x80>
    2e14:	b8 01       	movw	r22, r16
    2e16:	c5 01       	movw	r24, r10
    2e18:	0e 94 c8 23 	call	0x4790	; 0x4790 <strcasestr>
    2e1c:	89 2b       	or	r24, r25
    2e1e:	09 f5       	brne	.+66     	; 0x2e62 <_reply2ReturnCode+0xc2>
    2e20:	44 2d       	mov	r20, r4
    2e22:	35 14       	cp	r3, r5
    2e24:	08 f4       	brcc	.+2      	; 0x2e28 <_reply2ReturnCode+0x88>
    2e26:	4c 2f       	mov	r20, r28
    2e28:	50 e0       	ldi	r21, 0x00	; 0
    2e2a:	b8 01       	movw	r22, r16
    2e2c:	c5 01       	movw	r24, r10
    2e2e:	0e 94 ff 23 	call	0x47fe	; 0x47fe <strncasecmp>
    2e32:	89 2b       	or	r24, r25
    2e34:	49 f4       	brne	.+18     	; 0x2e48 <_reply2ReturnCode+0xa8>
    2e36:	f3 01       	movw	r30, r6
    2e38:	ee 0f       	add	r30, r30
    2e3a:	ff 1f       	adc	r31, r31
    2e3c:	e6 0d       	add	r30, r6
    2e3e:	f7 1d       	adc	r31, r7
    2e40:	e6 5b       	subi	r30, 0xB6	; 182
    2e42:	f9 4f       	sbci	r31, 0xF9	; 249
    2e44:	20 80       	ld	r2, Z
    2e46:	0d c0       	rjmp	.+26     	; 0x2e62 <_reply2ReturnCode+0xc2>
    2e48:	8f ef       	ldi	r24, 0xFF	; 255
    2e4a:	e8 1a       	sub	r14, r24
    2e4c:	f8 0a       	sbc	r15, r24
    2e4e:	e3 e0       	ldi	r30, 0x03	; 3
    2e50:	8e 0e       	add	r8, r30
    2e52:	91 1c       	adc	r9, r1
    2e54:	f1 e1       	ldi	r31, 0x11	; 17
    2e56:	ef 16       	cp	r14, r31
    2e58:	f1 04       	cpc	r15, r1
    2e5a:	39 f6       	brne	.-114    	; 0x2dea <_reply2ReturnCode+0x4a>
    2e5c:	68 94       	set
    2e5e:	22 24       	eor	r2, r2
    2e60:	24 f8       	bld	r2, 4
    2e62:	82 2d       	mov	r24, r2
    2e64:	df 91       	pop	r29
    2e66:	cf 91       	pop	r28
    2e68:	1f 91       	pop	r17
    2e6a:	0f 91       	pop	r16
    2e6c:	ff 90       	pop	r15
    2e6e:	ef 90       	pop	r14
    2e70:	df 90       	pop	r13
    2e72:	cf 90       	pop	r12
    2e74:	bf 90       	pop	r11
    2e76:	af 90       	pop	r10
    2e78:	9f 90       	pop	r9
    2e7a:	8f 90       	pop	r8
    2e7c:	7f 90       	pop	r7
    2e7e:	6f 90       	pop	r6
    2e80:	5f 90       	pop	r5
    2e82:	4f 90       	pop	r4
    2e84:	3f 90       	pop	r3
    2e86:	2f 90       	pop	r2
    2e88:	08 95       	ret

00002e8a <_uploadMessageRc>:
    2e8a:	30 df       	rcall	.-416    	; 0x2cec <_uploadMessage>
    2e8c:	89 cf       	rjmp	.-238    	; 0x2da0 <_reply2ReturnCode>
    2e8e:	08 95       	ret

00002e90 <lora_driver_flushBuffers>:
    2e90:	80 91 b1 17 	lds	r24, 0x17B1	; 0x8017b1 <_serialReplyBufferHandle>
    2e94:	90 91 b2 17 	lds	r25, 0x17B2	; 0x8017b2 <_serialReplyBufferHandle+0x1>
    2e98:	0c 94 b4 0a 	jmp	0x1568	; 0x1568 <xStreamBufferReset>
    2e9c:	08 95       	ret

00002e9e <lora_driver_create>:
    2e9e:	8f 92       	push	r8
    2ea0:	9f 92       	push	r9
    2ea2:	af 92       	push	r10
    2ea4:	cf 92       	push	r12
    2ea6:	ef 92       	push	r14
    2ea8:	0f 93       	push	r16
    2eaa:	1f 93       	push	r17
    2eac:	cf 93       	push	r28
    2eae:	c8 2f       	mov	r28, r24
    2eb0:	8b 01       	movw	r16, r22
    2eb2:	41 e0       	ldi	r20, 0x01	; 1
    2eb4:	60 e0       	ldi	r22, 0x00	; 0
    2eb6:	70 e0       	ldi	r23, 0x00	; 0
    2eb8:	88 ec       	ldi	r24, 0xC8	; 200
    2eba:	90 e0       	ldi	r25, 0x00	; 0
    2ebc:	0e 94 88 0a 	call	0x1510	; 0x1510 <xStreamBufferGenericCreate>
    2ec0:	90 93 b2 17 	sts	0x17B2, r25	; 0x8017b2 <_serialReplyBufferHandle+0x1>
    2ec4:	80 93 b1 17 	sts	0x17B1, r24	; 0x8017b1 <_serialReplyBufferHandle>
    2ec8:	10 93 b0 17 	sts	0x17B0, r17	; 0x8017b0 <_downlinkMessageBuffer+0x1>
    2ecc:	00 93 af 17 	sts	0x17AF, r16	; 0x8017af <_downlinkMessageBuffer>
    2ed0:	0f 2e       	mov	r0, r31
    2ed2:	f0 e3       	ldi	r31, 0x30	; 48
    2ed4:	8f 2e       	mov	r8, r31
    2ed6:	f6 e1       	ldi	r31, 0x16	; 22
    2ed8:	9f 2e       	mov	r9, r31
    2eda:	f0 2d       	mov	r31, r0
    2edc:	68 94       	set
    2ede:	aa 24       	eor	r10, r10
    2ee0:	a6 f8       	bld	r10, 6
    2ee2:	68 94       	set
    2ee4:	cc 24       	eor	r12, r12
    2ee6:	c6 f8       	bld	r12, 6
    2ee8:	e1 2c       	mov	r14, r1
    2eea:	00 e0       	ldi	r16, 0x00	; 0
    2eec:	23 e0       	ldi	r18, 0x03	; 3
    2eee:	40 e0       	ldi	r20, 0x00	; 0
    2ef0:	51 ee       	ldi	r21, 0xE1	; 225
    2ef2:	60 e0       	ldi	r22, 0x00	; 0
    2ef4:	70 e0       	ldi	r23, 0x00	; 0
    2ef6:	8c 2f       	mov	r24, r28
    2ef8:	74 d3       	rcall	.+1768   	; 0x35e2 <serial_create>
    2efa:	90 93 b4 17 	sts	0x17B4, r25	; 0x8017b4 <_rn2483_serial+0x1>
    2efe:	80 93 b3 17 	sts	0x17B3, r24	; 0x8017b3 <_rn2483_serial>
    2f02:	e0 91 93 18 	lds	r30, 0x1893	; 0x801893 <register_access+0x8>
    2f06:	f0 91 94 18 	lds	r31, 0x1894	; 0x801894 <register_access+0x9>
    2f0a:	64 e0       	ldi	r22, 0x04	; 4
    2f0c:	87 e0       	ldi	r24, 0x07	; 7
    2f0e:	91 e0       	ldi	r25, 0x01	; 1
    2f10:	19 95       	eicall
    2f12:	cf 91       	pop	r28
    2f14:	1f 91       	pop	r17
    2f16:	0f 91       	pop	r16
    2f18:	ef 90       	pop	r14
    2f1a:	cf 90       	pop	r12
    2f1c:	af 90       	pop	r10
    2f1e:	9f 90       	pop	r9
    2f20:	8f 90       	pop	r8
    2f22:	08 95       	ret

00002f24 <lora_driver_resetRn2483>:
    2f24:	88 23       	and	r24, r24
    2f26:	49 f0       	breq	.+18     	; 0x2f3a <lora_driver_resetRn2483+0x16>
    2f28:	e0 91 9d 18 	lds	r30, 0x189D	; 0x80189d <register_access+0x12>
    2f2c:	f0 91 9e 18 	lds	r31, 0x189E	; 0x80189e <register_access+0x13>
    2f30:	64 e0       	ldi	r22, 0x04	; 4
    2f32:	88 e0       	ldi	r24, 0x08	; 8
    2f34:	91 e0       	ldi	r25, 0x01	; 1
    2f36:	19 95       	eicall
    2f38:	08 95       	ret
    2f3a:	e0 91 93 18 	lds	r30, 0x1893	; 0x801893 <register_access+0x8>
    2f3e:	f0 91 94 18 	lds	r31, 0x1894	; 0x801894 <register_access+0x9>
    2f42:	64 e0       	ldi	r22, 0x04	; 4
    2f44:	88 e0       	ldi	r24, 0x08	; 8
    2f46:	91 e0       	ldi	r25, 0x01	; 1
    2f48:	19 95       	eicall
    2f4a:	08 95       	ret

00002f4c <lora_driver_rn2483FactoryReset>:
    2f4c:	60 e0       	ldi	r22, 0x00	; 0
    2f4e:	70 e0       	ldi	r23, 0x00	; 0
    2f50:	80 ed       	ldi	r24, 0xD0	; 208
    2f52:	93 e0       	ldi	r25, 0x03	; 3
    2f54:	cb de       	rcall	.-618    	; 0x2cec <_uploadMessage>
    2f56:	ea e3       	ldi	r30, 0x3A	; 58
    2f58:	f8 e1       	ldi	r31, 0x18	; 24
    2f5a:	01 90       	ld	r0, Z+
    2f5c:	00 20       	and	r0, r0
    2f5e:	e9 f7       	brne	.-6      	; 0x2f5a <lora_driver_rn2483FactoryReset+0xe>
    2f60:	31 97       	sbiw	r30, 0x01	; 1
    2f62:	ea 53       	subi	r30, 0x3A	; 58
    2f64:	f8 41       	sbci	r31, 0x18	; 24
    2f66:	81 e0       	ldi	r24, 0x01	; 1
    2f68:	75 97       	sbiw	r30, 0x15	; 21
    2f6a:	08 f0       	brcs	.+2      	; 0x2f6e <lora_driver_rn2483FactoryReset+0x22>
    2f6c:	80 e0       	ldi	r24, 0x00	; 0
    2f6e:	08 95       	ret

00002f70 <lora_driver_getRn2483Hweui>:
    2f70:	cf 93       	push	r28
    2f72:	df 93       	push	r29
    2f74:	ec 01       	movw	r28, r24
    2f76:	60 e0       	ldi	r22, 0x00	; 0
    2f78:	70 e0       	ldi	r23, 0x00	; 0
    2f7a:	81 ee       	ldi	r24, 0xE1	; 225
    2f7c:	93 e0       	ldi	r25, 0x03	; 3
    2f7e:	b6 de       	rcall	.-660    	; 0x2cec <_uploadMessage>
    2f80:	ea e3       	ldi	r30, 0x3A	; 58
    2f82:	f8 e1       	ldi	r31, 0x18	; 24
    2f84:	01 90       	ld	r0, Z+
    2f86:	00 20       	and	r0, r0
    2f88:	e9 f7       	brne	.-6      	; 0x2f84 <lora_driver_getRn2483Hweui+0x14>
    2f8a:	eb 54       	subi	r30, 0x4B	; 75
    2f8c:	f8 41       	sbci	r31, 0x18	; 24
    2f8e:	39 f4       	brne	.+14     	; 0x2f9e <lora_driver_getRn2483Hweui+0x2e>
    2f90:	6a e3       	ldi	r22, 0x3A	; 58
    2f92:	78 e1       	ldi	r23, 0x18	; 24
    2f94:	ce 01       	movw	r24, r28
    2f96:	0e 94 f8 23 	call	0x47f0	; 0x47f0 <strcpy>
    2f9a:	80 e0       	ldi	r24, 0x00	; 0
    2f9c:	02 c0       	rjmp	.+4      	; 0x2fa2 <lora_driver_getRn2483Hweui+0x32>
    2f9e:	18 82       	st	Y, r1
    2fa0:	81 e0       	ldi	r24, 0x01	; 1
    2fa2:	df 91       	pop	r29
    2fa4:	cf 91       	pop	r28
    2fa6:	08 95       	ret

00002fa8 <lora_driver_setDeviceIdentifier>:
    2fa8:	fc 01       	movw	r30, r24
    2faa:	01 90       	ld	r0, Z+
    2fac:	00 20       	and	r0, r0
    2fae:	e9 f7       	brne	.-6      	; 0x2faa <lora_driver_setDeviceIdentifier+0x2>
    2fb0:	9f 01       	movw	r18, r30
    2fb2:	21 51       	subi	r18, 0x11	; 17
    2fb4:	31 09       	sbc	r19, r1
    2fb6:	28 17       	cp	r18, r24
    2fb8:	39 07       	cpc	r19, r25
    2fba:	29 f4       	brne	.+10     	; 0x2fc6 <lora_driver_setDeviceIdentifier+0x1e>
    2fbc:	bc 01       	movw	r22, r24
    2fbe:	8f e0       	ldi	r24, 0x0F	; 15
    2fc0:	94 e0       	ldi	r25, 0x04	; 4
    2fc2:	63 cf       	rjmp	.-314    	; 0x2e8a <_uploadMessageRc>
    2fc4:	08 95       	ret
    2fc6:	89 e0       	ldi	r24, 0x09	; 9
    2fc8:	08 95       	ret

00002fca <lora_driver_setApplicationIdentifier>:
    2fca:	fc 01       	movw	r30, r24
    2fcc:	01 90       	ld	r0, Z+
    2fce:	00 20       	and	r0, r0
    2fd0:	e9 f7       	brne	.-6      	; 0x2fcc <lora_driver_setApplicationIdentifier+0x2>
    2fd2:	9f 01       	movw	r18, r30
    2fd4:	21 51       	subi	r18, 0x11	; 17
    2fd6:	31 09       	sbc	r19, r1
    2fd8:	28 17       	cp	r18, r24
    2fda:	39 07       	cpc	r19, r25
    2fdc:	29 f4       	brne	.+10     	; 0x2fe8 <lora_driver_setApplicationIdentifier+0x1e>
    2fde:	bc 01       	movw	r22, r24
    2fe0:	8e e1       	ldi	r24, 0x1E	; 30
    2fe2:	94 e0       	ldi	r25, 0x04	; 4
    2fe4:	52 cf       	rjmp	.-348    	; 0x2e8a <_uploadMessageRc>
    2fe6:	08 95       	ret
    2fe8:	89 e0       	ldi	r24, 0x09	; 9
    2fea:	08 95       	ret

00002fec <lora_driver_setApplicationKey>:
    2fec:	fc 01       	movw	r30, r24
    2fee:	01 90       	ld	r0, Z+
    2ff0:	00 20       	and	r0, r0
    2ff2:	e9 f7       	brne	.-6      	; 0x2fee <lora_driver_setApplicationKey+0x2>
    2ff4:	9f 01       	movw	r18, r30
    2ff6:	21 52       	subi	r18, 0x21	; 33
    2ff8:	31 09       	sbc	r19, r1
    2ffa:	28 17       	cp	r18, r24
    2ffc:	39 07       	cpc	r19, r25
    2ffe:	29 f4       	brne	.+10     	; 0x300a <lora_driver_setApplicationKey+0x1e>
    3000:	bc 01       	movw	r22, r24
    3002:	8d e2       	ldi	r24, 0x2D	; 45
    3004:	94 e0       	ldi	r25, 0x04	; 4
    3006:	41 cf       	rjmp	.-382    	; 0x2e8a <_uploadMessageRc>
    3008:	08 95       	ret
    300a:	89 e0       	ldi	r24, 0x09	; 9
    300c:	08 95       	ret

0000300e <lora_driver_saveMac>:
    300e:	60 e0       	ldi	r22, 0x00	; 0
    3010:	70 e0       	ldi	r23, 0x00	; 0
    3012:	8c e6       	ldi	r24, 0x6C	; 108
    3014:	94 e0       	ldi	r25, 0x04	; 4
    3016:	39 cf       	rjmp	.-398    	; 0x2e8a <_uploadMessageRc>
    3018:	08 95       	ret

0000301a <lora_driver_join>:
    301a:	0f 93       	push	r16
    301c:	1f 93       	push	r17
    301e:	e8 2f       	mov	r30, r24
    3020:	f0 e0       	ldi	r31, 0x00	; 0
    3022:	ee 0f       	add	r30, r30
    3024:	ff 1f       	adc	r31, r31
    3026:	ea 5b       	subi	r30, 0xBA	; 186
    3028:	f9 4f       	sbci	r31, 0xF9	; 249
    302a:	60 81       	ld	r22, Z
    302c:	71 81       	ldd	r23, Z+1	; 0x01
    302e:	85 e7       	ldi	r24, 0x75	; 117
    3030:	94 e0       	ldi	r25, 0x04	; 4
    3032:	2b df       	rcall	.-426    	; 0x2e8a <_uploadMessageRc>
    3034:	81 11       	cpse	r24, r1
    3036:	14 c0       	rjmp	.+40     	; 0x3060 <lora_driver_join+0x46>
    3038:	08 e2       	ldi	r16, 0x28	; 40
    303a:	15 e0       	ldi	r17, 0x05	; 5
    303c:	20 e0       	ldi	r18, 0x00	; 0
    303e:	30 e0       	ldi	r19, 0x00	; 0
    3040:	4d e2       	ldi	r20, 0x2D	; 45
    3042:	50 e0       	ldi	r21, 0x00	; 0
    3044:	6a e3       	ldi	r22, 0x3A	; 58
    3046:	78 e1       	ldi	r23, 0x18	; 24
    3048:	80 91 b1 17 	lds	r24, 0x17B1	; 0x8017b1 <_serialReplyBufferHandle>
    304c:	90 91 b2 17 	lds	r25, 0x17B2	; 0x8017b2 <_serialReplyBufferHandle+0x1>
    3050:	0e 94 de 0b 	call	0x17bc	; 0x17bc <xStreamBufferReceive>
    3054:	88 23       	and	r24, r24
    3056:	21 f0       	breq	.+8      	; 0x3060 <lora_driver_join+0x46>
    3058:	8a e3       	ldi	r24, 0x3A	; 58
    305a:	98 e1       	ldi	r25, 0x18	; 24
    305c:	a1 de       	rcall	.-702    	; 0x2da0 <_reply2ReturnCode>
    305e:	03 c0       	rjmp	.+6      	; 0x3066 <lora_driver_join+0x4c>
    3060:	8a e3       	ldi	r24, 0x3A	; 58
    3062:	98 e1       	ldi	r25, 0x18	; 24
    3064:	9d de       	rcall	.-710    	; 0x2da0 <_reply2ReturnCode>
    3066:	1f 91       	pop	r17
    3068:	0f 91       	pop	r16
    306a:	08 95       	ret

0000306c <lora_driver_sendUploadMessage>:
    306c:	0f 93       	push	r16
    306e:	1f 93       	push	r17
    3070:	cf 93       	push	r28
    3072:	df 93       	push	r29
    3074:	1f 92       	push	r1
    3076:	cd b7       	in	r28, 0x3d	; 61
    3078:	de b7       	in	r29, 0x3e	; 62
    307a:	db 01       	movw	r26, r22
    307c:	11 96       	adiw	r26, 0x01	; 1
    307e:	9c 91       	ld	r25, X
    3080:	11 97       	sbiw	r26, 0x01	; 1
    3082:	95 31       	cpi	r25, 0x15	; 21
    3084:	08 f0       	brcs	.+2      	; 0x3088 <lora_driver_sendUploadMessage+0x1c>
    3086:	b4 c0       	rjmp	.+360    	; 0x31f0 <lora_driver_sendUploadMessage+0x184>
    3088:	99 23       	and	r25, r25
    308a:	81 f1       	breq	.+96     	; 0x30ec <lora_driver_sendUploadMessage+0x80>
    308c:	60 e0       	ldi	r22, 0x00	; 0
    308e:	70 e0       	ldi	r23, 0x00	; 0
    3090:	27 2f       	mov	r18, r23
    3092:	30 e0       	ldi	r19, 0x00	; 0
    3094:	46 2f       	mov	r20, r22
    3096:	50 e0       	ldi	r21, 0x00	; 0
    3098:	fd 01       	movw	r30, r26
    309a:	e4 0f       	add	r30, r20
    309c:	f5 1f       	adc	r31, r21
    309e:	92 81       	ldd	r25, Z+2	; 0x02
    30a0:	92 95       	swap	r25
    30a2:	9f 70       	andi	r25, 0x0F	; 15
    30a4:	9a 30       	cpi	r25, 0x0A	; 10
    30a6:	10 f0       	brcs	.+4      	; 0x30ac <lora_driver_sendUploadMessage+0x40>
    30a8:	99 5c       	subi	r25, 0xC9	; 201
    30aa:	01 c0       	rjmp	.+2      	; 0x30ae <lora_driver_sendUploadMessage+0x42>
    30ac:	90 5d       	subi	r25, 0xD0	; 208
    30ae:	f9 01       	movw	r30, r18
    30b0:	e5 53       	subi	r30, 0x35	; 53
    30b2:	f8 4e       	sbci	r31, 0xE8	; 232
    30b4:	90 83       	st	Z, r25
    30b6:	2f 5f       	subi	r18, 0xFF	; 255
    30b8:	3f 4f       	sbci	r19, 0xFF	; 255
    30ba:	fd 01       	movw	r30, r26
    30bc:	e4 0f       	add	r30, r20
    30be:	f5 1f       	adc	r31, r21
    30c0:	92 81       	ldd	r25, Z+2	; 0x02
    30c2:	9f 70       	andi	r25, 0x0F	; 15
    30c4:	49 2f       	mov	r20, r25
    30c6:	50 e0       	ldi	r21, 0x00	; 0
    30c8:	4a 30       	cpi	r20, 0x0A	; 10
    30ca:	51 05       	cpc	r21, r1
    30cc:	14 f0       	brlt	.+4      	; 0x30d2 <lora_driver_sendUploadMessage+0x66>
    30ce:	99 5c       	subi	r25, 0xC9	; 201
    30d0:	01 c0       	rjmp	.+2      	; 0x30d4 <lora_driver_sendUploadMessage+0x68>
    30d2:	90 5d       	subi	r25, 0xD0	; 208
    30d4:	f9 01       	movw	r30, r18
    30d6:	e5 53       	subi	r30, 0x35	; 53
    30d8:	f8 4e       	sbci	r31, 0xE8	; 232
    30da:	90 83       	st	Z, r25
    30dc:	7e 5f       	subi	r23, 0xFE	; 254
    30de:	6f 5f       	subi	r22, 0xFF	; 255
    30e0:	11 96       	adiw	r26, 0x01	; 1
    30e2:	9c 91       	ld	r25, X
    30e4:	11 97       	sbiw	r26, 0x01	; 1
    30e6:	69 17       	cp	r22, r25
    30e8:	98 f2       	brcs	.-90     	; 0x3090 <lora_driver_sendUploadMessage+0x24>
    30ea:	01 c0       	rjmp	.+2      	; 0x30ee <lora_driver_sendUploadMessage+0x82>
    30ec:	70 e0       	ldi	r23, 0x00	; 0
    30ee:	e7 2f       	mov	r30, r23
    30f0:	f0 e0       	ldi	r31, 0x00	; 0
    30f2:	e5 53       	subi	r30, 0x35	; 53
    30f4:	f8 4e       	sbci	r31, 0xE8	; 232
    30f6:	10 82       	st	Z, r1
    30f8:	4c 91       	ld	r20, X
    30fa:	81 11       	cpse	r24, r1
    30fc:	03 c0       	rjmp	.+6      	; 0x3104 <lora_driver_sendUploadMessage+0x98>
    30fe:	8e e7       	ldi	r24, 0x7E	; 126
    3100:	94 e0       	ldi	r25, 0x04	; 4
    3102:	02 c0       	rjmp	.+4      	; 0x3108 <lora_driver_sendUploadMessage+0x9c>
    3104:	80 e8       	ldi	r24, 0x80	; 128
    3106:	94 e0       	ldi	r25, 0x04	; 4
    3108:	2b ec       	ldi	r18, 0xCB	; 203
    310a:	37 e1       	ldi	r19, 0x17	; 23
    310c:	3f 93       	push	r19
    310e:	2f 93       	push	r18
    3110:	1f 92       	push	r1
    3112:	4f 93       	push	r20
    3114:	9f 93       	push	r25
    3116:	8f 93       	push	r24
    3118:	84 e8       	ldi	r24, 0x84	; 132
    311a:	94 e0       	ldi	r25, 0x04	; 4
    311c:	9f 93       	push	r25
    311e:	8f 93       	push	r24
    3120:	8d e0       	ldi	r24, 0x0D	; 13
    3122:	98 e1       	ldi	r25, 0x18	; 24
    3124:	9f 93       	push	r25
    3126:	8f 93       	push	r24
    3128:	0e 94 5a 24 	call	0x48b4	; 0x48b4 <sprintf>
    312c:	60 e0       	ldi	r22, 0x00	; 0
    312e:	70 e0       	ldi	r23, 0x00	; 0
    3130:	8d e0       	ldi	r24, 0x0D	; 13
    3132:	98 e1       	ldi	r25, 0x18	; 24
    3134:	aa de       	rcall	.-684    	; 0x2e8a <_uploadMessageRc>
    3136:	0f b6       	in	r0, 0x3f	; 63
    3138:	f8 94       	cli
    313a:	de bf       	out	0x3e, r29	; 62
    313c:	0f be       	out	0x3f, r0	; 63
    313e:	cd bf       	out	0x3d, r28	; 61
    3140:	81 11       	cpse	r24, r1
    3142:	59 c0       	rjmp	.+178    	; 0x31f6 <lora_driver_sendUploadMessage+0x18a>
    3144:	08 e2       	ldi	r16, 0x28	; 40
    3146:	15 e0       	ldi	r17, 0x05	; 5
    3148:	20 e0       	ldi	r18, 0x00	; 0
    314a:	30 e0       	ldi	r19, 0x00	; 0
    314c:	4d e2       	ldi	r20, 0x2D	; 45
    314e:	50 e0       	ldi	r21, 0x00	; 0
    3150:	6a e3       	ldi	r22, 0x3A	; 58
    3152:	78 e1       	ldi	r23, 0x18	; 24
    3154:	80 91 b1 17 	lds	r24, 0x17B1	; 0x8017b1 <_serialReplyBufferHandle>
    3158:	90 91 b2 17 	lds	r25, 0x17B2	; 0x8017b2 <_serialReplyBufferHandle+0x1>
    315c:	0e 94 de 0b 	call	0x17bc	; 0x17bc <xStreamBufferReceive>
    3160:	88 23       	and	r24, r24
    3162:	09 f4       	brne	.+2      	; 0x3166 <lora_driver_sendUploadMessage+0xfa>
    3164:	47 c0       	rjmp	.+142    	; 0x31f4 <lora_driver_sendUploadMessage+0x188>
    3166:	8a e3       	ldi	r24, 0x3A	; 58
    3168:	98 e1       	ldi	r25, 0x18	; 24
    316a:	1a de       	rcall	.-972    	; 0x2da0 <_reply2ReturnCode>
    316c:	8e 30       	cpi	r24, 0x0E	; 14
    316e:	09 f0       	breq	.+2      	; 0x3172 <lora_driver_sendUploadMessage+0x106>
    3170:	42 c0       	rjmp	.+132    	; 0x31f6 <lora_driver_sendUploadMessage+0x18a>
    3172:	87 e0       	ldi	r24, 0x07	; 7
    3174:	89 83       	std	Y+1, r24	; 0x01
    3176:	80 91 af 17 	lds	r24, 0x17AF	; 0x8017af <_downlinkMessageBuffer>
    317a:	90 91 b0 17 	lds	r25, 0x17B0	; 0x8017b0 <_downlinkMessageBuffer+0x1>
    317e:	89 2b       	or	r24, r25
    3180:	a9 f1       	breq	.+106    	; 0x31ec <lora_driver_sendUploadMessage+0x180>
    3182:	be 01       	movw	r22, r28
    3184:	6f 5f       	subi	r22, 0xFF	; 255
    3186:	7f 4f       	sbci	r23, 0xFF	; 255
    3188:	8a e3       	ldi	r24, 0x3A	; 58
    318a:	98 e1       	ldi	r25, 0x18	; 24
    318c:	68 d1       	rcall	.+720    	; 0x345e <decode_port_no>
    318e:	80 93 b5 17 	sts	0x17B5, r24	; 0x8017b5 <_downlinkPayload>
    3192:	e9 81       	ldd	r30, Y+1	; 0x01
    3194:	f0 e0       	ldi	r31, 0x00	; 0
    3196:	e6 5c       	subi	r30, 0xC6	; 198
    3198:	f7 4e       	sbci	r31, 0xE7	; 231
    319a:	df 01       	movw	r26, r30
    319c:	0d 90       	ld	r0, X+
    319e:	00 20       	and	r0, r0
    31a0:	e9 f7       	brne	.-6      	; 0x319c <lora_driver_sendUploadMessage+0x130>
    31a2:	11 97       	sbiw	r26, 0x01	; 1
    31a4:	ae 1b       	sub	r26, r30
    31a6:	bf 0b       	sbc	r27, r31
    31a8:	aa 23       	and	r26, r26
    31aa:	91 f0       	breq	.+36     	; 0x31d0 <lora_driver_sendUploadMessage+0x164>
    31ac:	bb 27       	eor	r27, r27
    31ae:	cd 01       	movw	r24, r26
    31b0:	01 97       	sbiw	r24, 0x01	; 1
    31b2:	9c 01       	movw	r18, r24
    31b4:	12 f4       	brpl	.+4      	; 0x31ba <lora_driver_sendUploadMessage+0x14e>
    31b6:	2f 5f       	subi	r18, 0xFF	; 255
    31b8:	3f 4f       	sbci	r19, 0xFF	; 255
    31ba:	35 95       	asr	r19
    31bc:	27 95       	ror	r18
    31be:	20 93 b6 17 	sts	0x17B6, r18	; 0x8017b6 <_downlinkPayload+0x1>
    31c2:	af 01       	movw	r20, r30
    31c4:	4f 5f       	subi	r20, 0xFF	; 255
    31c6:	5f 4f       	sbci	r21, 0xFF	; 255
    31c8:	64 e1       	ldi	r22, 0x14	; 20
    31ca:	87 eb       	ldi	r24, 0xB7	; 183
    31cc:	97 e1       	ldi	r25, 0x17	; 23
    31ce:	73 d1       	rcall	.+742    	; 0x34b6 <decode_hexadecimal_string_bytes>
    31d0:	01 e0       	ldi	r16, 0x01	; 1
    31d2:	10 e0       	ldi	r17, 0x00	; 0
    31d4:	20 e0       	ldi	r18, 0x00	; 0
    31d6:	30 e0       	ldi	r19, 0x00	; 0
    31d8:	46 e1       	ldi	r20, 0x16	; 22
    31da:	50 e0       	ldi	r21, 0x00	; 0
    31dc:	65 eb       	ldi	r22, 0xB5	; 181
    31de:	77 e1       	ldi	r23, 0x17	; 23
    31e0:	80 91 af 17 	lds	r24, 0x17AF	; 0x8017af <_downlinkMessageBuffer>
    31e4:	90 91 b0 17 	lds	r25, 0x17B0	; 0x8017b0 <_downlinkMessageBuffer+0x1>
    31e8:	0e 94 f3 0a 	call	0x15e6	; 0x15e6 <xStreamBufferSend>
    31ec:	8e e0       	ldi	r24, 0x0E	; 14
    31ee:	03 c0       	rjmp	.+6      	; 0x31f6 <lora_driver_sendUploadMessage+0x18a>
    31f0:	84 e1       	ldi	r24, 0x14	; 20
    31f2:	01 c0       	rjmp	.+2      	; 0x31f6 <lora_driver_sendUploadMessage+0x18a>
    31f4:	80 e0       	ldi	r24, 0x00	; 0
    31f6:	0f 90       	pop	r0
    31f8:	df 91       	pop	r29
    31fa:	cf 91       	pop	r28
    31fc:	1f 91       	pop	r17
    31fe:	0f 91       	pop	r16
    3200:	08 95       	ret

00003202 <lora_driver_setAdaptiveDataRate>:
    3202:	81 30       	cpi	r24, 0x01	; 1
    3204:	19 f0       	breq	.+6      	; 0x320c <lora_driver_setAdaptiveDataRate+0xa>
    3206:	64 e9       	ldi	r22, 0x94	; 148
    3208:	74 e0       	ldi	r23, 0x04	; 4
    320a:	02 c0       	rjmp	.+4      	; 0x3210 <lora_driver_setAdaptiveDataRate+0xe>
    320c:	6d e6       	ldi	r22, 0x6D	; 109
    320e:	75 e0       	ldi	r23, 0x05	; 5
    3210:	88 e9       	ldi	r24, 0x98	; 152
    3212:	94 e0       	ldi	r25, 0x04	; 4
    3214:	3a ce       	rjmp	.-908    	; 0x2e8a <_uploadMessageRc>
    3216:	08 95       	ret

00003218 <lora_driver_setReceiveDelay>:
    3218:	9f 93       	push	r25
    321a:	8f 93       	push	r24
    321c:	89 ec       	ldi	r24, 0xC9	; 201
    321e:	94 e0       	ldi	r25, 0x04	; 4
    3220:	9f 93       	push	r25
    3222:	8f 93       	push	r24
    3224:	8d e0       	ldi	r24, 0x0D	; 13
    3226:	98 e1       	ldi	r25, 0x18	; 24
    3228:	9f 93       	push	r25
    322a:	8f 93       	push	r24
    322c:	0e 94 5a 24 	call	0x48b4	; 0x48b4 <sprintf>
    3230:	60 e0       	ldi	r22, 0x00	; 0
    3232:	70 e0       	ldi	r23, 0x00	; 0
    3234:	8d e0       	ldi	r24, 0x0D	; 13
    3236:	98 e1       	ldi	r25, 0x18	; 24
    3238:	28 de       	rcall	.-944    	; 0x2e8a <_uploadMessageRc>
    323a:	0f 90       	pop	r0
    323c:	0f 90       	pop	r0
    323e:	0f 90       	pop	r0
    3240:	0f 90       	pop	r0
    3242:	0f 90       	pop	r0
    3244:	0f 90       	pop	r0
    3246:	08 95       	ret

00003248 <lora_driver_configureToEu868>:
    3248:	2f 92       	push	r2
    324a:	3f 92       	push	r3
    324c:	4f 92       	push	r4
    324e:	5f 92       	push	r5
    3250:	6f 92       	push	r6
    3252:	7f 92       	push	r7
    3254:	8f 92       	push	r8
    3256:	9f 92       	push	r9
    3258:	af 92       	push	r10
    325a:	bf 92       	push	r11
    325c:	cf 92       	push	r12
    325e:	df 92       	push	r13
    3260:	ef 92       	push	r14
    3262:	ff 92       	push	r15
    3264:	0f 93       	push	r16
    3266:	1f 93       	push	r17
    3268:	cf 93       	push	r28
    326a:	df 93       	push	r29
    326c:	cd b7       	in	r28, 0x3d	; 61
    326e:	de b7       	in	r29, 0x3e	; 62
    3270:	a0 97       	sbiw	r28, 0x20	; 32
    3272:	0f b6       	in	r0, 0x3f	; 63
    3274:	f8 94       	cli
    3276:	de bf       	out	0x3e, r29	; 62
    3278:	0f be       	out	0x3f, r0	; 63
    327a:	cd bf       	out	0x3d, r28	; 61
    327c:	66 ef       	ldi	r22, 0xF6	; 246
    327e:	74 e0       	ldi	r23, 0x04	; 4
    3280:	82 e0       	ldi	r24, 0x02	; 2
    3282:	95 e0       	ldi	r25, 0x05	; 5
    3284:	33 dd       	rcall	.-1434   	; 0x2cec <_uploadMessage>
    3286:	8c dd       	rcall	.-1256   	; 0x2da0 <_reply2ReturnCode>
    3288:	81 11       	cpse	r24, r1
    328a:	a3 c0       	rjmp	.+326    	; 0x33d2 <lora_driver_configureToEu868+0x18a>
    328c:	80 e2       	ldi	r24, 0x20	; 32
    328e:	ec e1       	ldi	r30, 0x1C	; 28
    3290:	f2 e0       	ldi	r31, 0x02	; 2
    3292:	de 01       	movw	r26, r28
    3294:	11 96       	adiw	r26, 0x01	; 1
    3296:	01 90       	ld	r0, Z+
    3298:	0d 92       	st	X+, r0
    329a:	8a 95       	dec	r24
    329c:	e1 f7       	brne	.-8      	; 0x3296 <lora_driver_configureToEu868+0x4e>
    329e:	9e 01       	movw	r18, r28
    32a0:	2f 5f       	subi	r18, 0xFF	; 255
    32a2:	3f 4f       	sbci	r19, 0xFF	; 255
    32a4:	69 01       	movw	r12, r18
    32a6:	e1 2c       	mov	r14, r1
    32a8:	f1 2c       	mov	r15, r1
    32aa:	0f 2e       	mov	r0, r31
    32ac:	fe e0       	ldi	r31, 0x0E	; 14
    32ae:	af 2e       	mov	r10, r31
    32b0:	f5 e0       	ldi	r31, 0x05	; 5
    32b2:	bf 2e       	mov	r11, r31
    32b4:	f0 2d       	mov	r31, r0
    32b6:	0d e0       	ldi	r16, 0x0D	; 13
    32b8:	18 e1       	ldi	r17, 0x18	; 24
    32ba:	0f 2e       	mov	r0, r31
    32bc:	f7 e2       	ldi	r31, 0x27	; 39
    32be:	4f 2e       	mov	r4, r31
    32c0:	f5 e0       	ldi	r31, 0x05	; 5
    32c2:	5f 2e       	mov	r5, r31
    32c4:	f0 2d       	mov	r31, r0
    32c6:	0f 2e       	mov	r0, r31
    32c8:	fe e3       	ldi	r31, 0x3E	; 62
    32ca:	8f 2e       	mov	r8, r31
    32cc:	f5 e0       	ldi	r31, 0x05	; 5
    32ce:	9f 2e       	mov	r9, r31
    32d0:	f0 2d       	mov	r31, r0
    32d2:	0f 2e       	mov	r0, r31
    32d4:	f8 e5       	ldi	r31, 0x58	; 88
    32d6:	6f 2e       	mov	r6, r31
    32d8:	f5 e0       	ldi	r31, 0x05	; 5
    32da:	7f 2e       	mov	r7, r31
    32dc:	f0 2d       	mov	r31, r0
    32de:	3e 2c       	mov	r3, r14
    32e0:	2f 2c       	mov	r2, r15
    32e2:	ff 92       	push	r15
    32e4:	ef 92       	push	r14
    32e6:	bf 92       	push	r11
    32e8:	af 92       	push	r10
    32ea:	1f 93       	push	r17
    32ec:	0f 93       	push	r16
    32ee:	0e 94 5a 24 	call	0x48b4	; 0x48b4 <sprintf>
    32f2:	60 e0       	ldi	r22, 0x00	; 0
    32f4:	70 e0       	ldi	r23, 0x00	; 0
    32f6:	c8 01       	movw	r24, r16
    32f8:	f9 dc       	rcall	.-1550   	; 0x2cec <_uploadMessage>
    32fa:	52 dd       	rcall	.-1372   	; 0x2da0 <_reply2ReturnCode>
    32fc:	0f 90       	pop	r0
    32fe:	0f 90       	pop	r0
    3300:	0f 90       	pop	r0
    3302:	0f 90       	pop	r0
    3304:	0f 90       	pop	r0
    3306:	0f 90       	pop	r0
    3308:	81 11       	cpse	r24, r1
    330a:	63 c0       	rjmp	.+198    	; 0x33d2 <lora_driver_configureToEu868+0x18a>
    330c:	32 e0       	ldi	r19, 0x02	; 2
    330e:	3e 15       	cp	r19, r14
    3310:	e8 f4       	brcc	.+58     	; 0x334c <lora_driver_configureToEu868+0x104>
    3312:	f6 01       	movw	r30, r12
    3314:	83 81       	ldd	r24, Z+3	; 0x03
    3316:	8f 93       	push	r24
    3318:	82 81       	ldd	r24, Z+2	; 0x02
    331a:	8f 93       	push	r24
    331c:	81 81       	ldd	r24, Z+1	; 0x01
    331e:	8f 93       	push	r24
    3320:	80 81       	ld	r24, Z
    3322:	8f 93       	push	r24
    3324:	ff 92       	push	r15
    3326:	ef 92       	push	r14
    3328:	5f 92       	push	r5
    332a:	4f 92       	push	r4
    332c:	1f 93       	push	r17
    332e:	0f 93       	push	r16
    3330:	0e 94 5a 24 	call	0x48b4	; 0x48b4 <sprintf>
    3334:	60 e0       	ldi	r22, 0x00	; 0
    3336:	70 e0       	ldi	r23, 0x00	; 0
    3338:	c8 01       	movw	r24, r16
    333a:	d8 dc       	rcall	.-1616   	; 0x2cec <_uploadMessage>
    333c:	31 dd       	rcall	.-1438   	; 0x2da0 <_reply2ReturnCode>
    333e:	0f b6       	in	r0, 0x3f	; 63
    3340:	f8 94       	cli
    3342:	de bf       	out	0x3e, r29	; 62
    3344:	0f be       	out	0x3f, r0	; 63
    3346:	cd bf       	out	0x3d, r28	; 61
    3348:	81 11       	cpse	r24, r1
    334a:	43 c0       	rjmp	.+134    	; 0x33d2 <lora_driver_configureToEu868+0x18a>
    334c:	2f 92       	push	r2
    334e:	3f 92       	push	r3
    3350:	9f 92       	push	r9
    3352:	8f 92       	push	r8
    3354:	1f 93       	push	r17
    3356:	0f 93       	push	r16
    3358:	0e 94 5a 24 	call	0x48b4	; 0x48b4 <sprintf>
    335c:	60 e0       	ldi	r22, 0x00	; 0
    335e:	70 e0       	ldi	r23, 0x00	; 0
    3360:	c8 01       	movw	r24, r16
    3362:	c4 dc       	rcall	.-1656   	; 0x2cec <_uploadMessage>
    3364:	1d dd       	rcall	.-1478   	; 0x2da0 <_reply2ReturnCode>
    3366:	0f 90       	pop	r0
    3368:	0f 90       	pop	r0
    336a:	0f 90       	pop	r0
    336c:	0f 90       	pop	r0
    336e:	0f 90       	pop	r0
    3370:	0f 90       	pop	r0
    3372:	81 11       	cpse	r24, r1
    3374:	2e c0       	rjmp	.+92     	; 0x33d2 <lora_driver_configureToEu868+0x18a>
    3376:	2f 92       	push	r2
    3378:	3f 92       	push	r3
    337a:	7f 92       	push	r7
    337c:	6f 92       	push	r6
    337e:	1f 93       	push	r17
    3380:	0f 93       	push	r16
    3382:	0e 94 5a 24 	call	0x48b4	; 0x48b4 <sprintf>
    3386:	60 e0       	ldi	r22, 0x00	; 0
    3388:	70 e0       	ldi	r23, 0x00	; 0
    338a:	c8 01       	movw	r24, r16
    338c:	af dc       	rcall	.-1698   	; 0x2cec <_uploadMessage>
    338e:	08 dd       	rcall	.-1520   	; 0x2da0 <_reply2ReturnCode>
    3390:	0f 90       	pop	r0
    3392:	0f 90       	pop	r0
    3394:	0f 90       	pop	r0
    3396:	0f 90       	pop	r0
    3398:	0f 90       	pop	r0
    339a:	0f 90       	pop	r0
    339c:	81 11       	cpse	r24, r1
    339e:	19 c0       	rjmp	.+50     	; 0x33d2 <lora_driver_configureToEu868+0x18a>
    33a0:	3f ef       	ldi	r19, 0xFF	; 255
    33a2:	e3 1a       	sub	r14, r19
    33a4:	f3 0a       	sbc	r15, r19
    33a6:	84 e0       	ldi	r24, 0x04	; 4
    33a8:	c8 0e       	add	r12, r24
    33aa:	d1 1c       	adc	r13, r1
    33ac:	98 e0       	ldi	r25, 0x08	; 8
    33ae:	e9 16       	cp	r14, r25
    33b0:	f1 04       	cpc	r15, r1
    33b2:	09 f0       	breq	.+2      	; 0x33b6 <lora_driver_configureToEu868+0x16e>
    33b4:	94 cf       	rjmp	.-216    	; 0x32de <lora_driver_configureToEu868+0x96>
    33b6:	60 e0       	ldi	r22, 0x00	; 0
    33b8:	70 e0       	ldi	r23, 0x00	; 0
    33ba:	80 e7       	ldi	r24, 0x70	; 112
    33bc:	95 e0       	ldi	r25, 0x05	; 5
    33be:	96 dc       	rcall	.-1748   	; 0x2cec <_uploadMessage>
    33c0:	ef dc       	rcall	.-1570   	; 0x2da0 <_reply2ReturnCode>
    33c2:	81 11       	cpse	r24, r1
    33c4:	06 c0       	rjmp	.+12     	; 0x33d2 <lora_driver_configureToEu868+0x18a>
    33c6:	60 e0       	ldi	r22, 0x00	; 0
    33c8:	70 e0       	ldi	r23, 0x00	; 0
    33ca:	81 e8       	ldi	r24, 0x81	; 129
    33cc:	95 e0       	ldi	r25, 0x05	; 5
    33ce:	8e dc       	rcall	.-1764   	; 0x2cec <_uploadMessage>
    33d0:	e7 dc       	rcall	.-1586   	; 0x2da0 <_reply2ReturnCode>
    33d2:	a0 96       	adiw	r28, 0x20	; 32
    33d4:	0f b6       	in	r0, 0x3f	; 63
    33d6:	f8 94       	cli
    33d8:	de bf       	out	0x3e, r29	; 62
    33da:	0f be       	out	0x3f, r0	; 63
    33dc:	cd bf       	out	0x3d, r28	; 61
    33de:	df 91       	pop	r29
    33e0:	cf 91       	pop	r28
    33e2:	1f 91       	pop	r17
    33e4:	0f 91       	pop	r16
    33e6:	ff 90       	pop	r15
    33e8:	ef 90       	pop	r14
    33ea:	df 90       	pop	r13
    33ec:	cf 90       	pop	r12
    33ee:	bf 90       	pop	r11
    33f0:	af 90       	pop	r10
    33f2:	9f 90       	pop	r9
    33f4:	8f 90       	pop	r8
    33f6:	7f 90       	pop	r7
    33f8:	6f 90       	pop	r6
    33fa:	5f 90       	pop	r5
    33fc:	4f 90       	pop	r4
    33fe:	3f 90       	pop	r3
    3400:	2f 90       	pop	r2
    3402:	08 95       	ret

00003404 <lora_driver_setOtaaIdentity>:
    3404:	ef 92       	push	r14
    3406:	ff 92       	push	r15
    3408:	0f 93       	push	r16
    340a:	1f 93       	push	r17
    340c:	cf 93       	push	r28
    340e:	df 93       	push	r29
    3410:	ec 01       	movw	r28, r24
    3412:	8b 01       	movw	r16, r22
    3414:	7a 01       	movw	r14, r20
    3416:	81 e0       	ldi	r24, 0x01	; 1
    3418:	f4 de       	rcall	.-536    	; 0x3202 <lora_driver_setAdaptiveDataRate>
    341a:	81 11       	cpse	r24, r1
    341c:	0d c0       	rjmp	.+26     	; 0x3438 <lora_driver_setOtaaIdentity+0x34>
    341e:	ce 01       	movw	r24, r28
    3420:	d4 dd       	rcall	.-1112   	; 0x2fca <lora_driver_setApplicationIdentifier>
    3422:	81 11       	cpse	r24, r1
    3424:	09 c0       	rjmp	.+18     	; 0x3438 <lora_driver_setOtaaIdentity+0x34>
    3426:	c8 01       	movw	r24, r16
    3428:	e1 dd       	rcall	.-1086   	; 0x2fec <lora_driver_setApplicationKey>
    342a:	81 11       	cpse	r24, r1
    342c:	05 c0       	rjmp	.+10     	; 0x3438 <lora_driver_setOtaaIdentity+0x34>
    342e:	c7 01       	movw	r24, r14
    3430:	bb dd       	rcall	.-1162   	; 0x2fa8 <lora_driver_setDeviceIdentifier>
    3432:	81 11       	cpse	r24, r1
    3434:	01 c0       	rjmp	.+2      	; 0x3438 <lora_driver_setOtaaIdentity+0x34>
    3436:	eb dd       	rcall	.-1066   	; 0x300e <lora_driver_saveMac>
    3438:	df 91       	pop	r29
    343a:	cf 91       	pop	r28
    343c:	1f 91       	pop	r17
    343e:	0f 91       	pop	r16
    3440:	ff 90       	pop	r15
    3442:	ef 90       	pop	r14
    3444:	08 95       	ret

00003446 <lora_driver_mapReturnCodeToText>:
    3446:	90 e0       	ldi	r25, 0x00	; 0
    3448:	fc 01       	movw	r30, r24
    344a:	ee 0f       	add	r30, r30
    344c:	ff 1f       	adc	r31, r31
    344e:	8e 0f       	add	r24, r30
    3450:	9f 1f       	adc	r25, r31
    3452:	fc 01       	movw	r30, r24
    3454:	e6 5b       	subi	r30, 0xB6	; 182
    3456:	f9 4f       	sbci	r31, 0xF9	; 249
    3458:	81 81       	ldd	r24, Z+1	; 0x01
    345a:	92 81       	ldd	r25, Z+2	; 0x02
    345c:	08 95       	ret

0000345e <decode_port_no>:
    345e:	dc 01       	movw	r26, r24
    3460:	00 97       	sbiw	r24, 0x00	; 0
    3462:	29 f1       	breq	.+74     	; 0x34ae <decode_port_no+0x50>
    3464:	fb 01       	movw	r30, r22
    3466:	20 81       	ld	r18, Z
    3468:	fc 01       	movw	r30, r24
    346a:	01 90       	ld	r0, Z+
    346c:	00 20       	and	r0, r0
    346e:	e9 f7       	brne	.-6      	; 0x346a <decode_port_no+0xc>
    3470:	31 97       	sbiw	r30, 0x01	; 1
    3472:	e8 1b       	sub	r30, r24
    3474:	f9 0b       	sbc	r31, r25
    3476:	82 2f       	mov	r24, r18
    3478:	90 e0       	ldi	r25, 0x00	; 0
    347a:	e8 17       	cp	r30, r24
    347c:	f9 07       	cpc	r31, r25
    347e:	c8 f0       	brcs	.+50     	; 0x34b2 <decode_port_no+0x54>
    3480:	80 e0       	ldi	r24, 0x00	; 0
    3482:	08 c0       	rjmp	.+16     	; 0x3494 <decode_port_no+0x36>
    3484:	88 0f       	add	r24, r24
    3486:	38 2f       	mov	r19, r24
    3488:	33 0f       	add	r19, r19
    348a:	33 0f       	add	r19, r19
    348c:	83 0f       	add	r24, r19
    348e:	80 53       	subi	r24, 0x30	; 48
    3490:	89 0f       	add	r24, r25
    3492:	2f 5f       	subi	r18, 0xFF	; 255
    3494:	fd 01       	movw	r30, r26
    3496:	e2 0f       	add	r30, r18
    3498:	f1 1d       	adc	r31, r1
    349a:	90 81       	ld	r25, Z
    349c:	30 ed       	ldi	r19, 0xD0	; 208
    349e:	39 0f       	add	r19, r25
    34a0:	3a 30       	cpi	r19, 0x0A	; 10
    34a2:	10 f4       	brcc	.+4      	; 0x34a8 <decode_port_no+0x4a>
    34a4:	91 11       	cpse	r25, r1
    34a6:	ee cf       	rjmp	.-36     	; 0x3484 <decode_port_no+0x26>
    34a8:	fb 01       	movw	r30, r22
    34aa:	20 83       	st	Z, r18
    34ac:	08 95       	ret
    34ae:	80 e0       	ldi	r24, 0x00	; 0
    34b0:	08 95       	ret
    34b2:	80 e0       	ldi	r24, 0x00	; 0
    34b4:	08 95       	ret

000034b6 <decode_hexadecimal_string_bytes>:
    34b6:	0f 93       	push	r16
    34b8:	1f 93       	push	r17
    34ba:	cf 93       	push	r28
    34bc:	df 93       	push	r29
    34be:	dc 01       	movw	r26, r24
    34c0:	ea 01       	movw	r28, r20
    34c2:	20 97       	sbiw	r28, 0x00	; 0
    34c4:	e1 f1       	breq	.+120    	; 0x353e <decode_hexadecimal_string_bytes+0x88>
    34c6:	fa 01       	movw	r30, r20
    34c8:	01 90       	ld	r0, Z+
    34ca:	00 20       	and	r0, r0
    34cc:	e9 f7       	brne	.-6      	; 0x34c8 <decode_hexadecimal_string_bytes+0x12>
    34ce:	31 97       	sbiw	r30, 0x01	; 1
    34d0:	e4 1b       	sub	r30, r20
    34d2:	f5 0b       	sbc	r31, r21
    34d4:	32 97       	sbiw	r30, 0x02	; 2
    34d6:	10 f5       	brcc	.+68     	; 0x351c <decode_hexadecimal_string_bytes+0x66>
    34d8:	32 c0       	rjmp	.+100    	; 0x353e <decode_hexadecimal_string_bytes+0x88>
    34da:	8d 01       	movw	r16, r26
    34dc:	04 0f       	add	r16, r20
    34de:	15 1f       	adc	r17, r21
    34e0:	30 e0       	ldi	r19, 0x00	; 0
    34e2:	ae 01       	movw	r20, r28
    34e4:	42 0f       	add	r20, r18
    34e6:	53 1f       	adc	r21, r19
    34e8:	fa 01       	movw	r30, r20
    34ea:	90 81       	ld	r25, Z
    34ec:	91 34       	cpi	r25, 0x41	; 65
    34ee:	28 f0       	brcs	.+10     	; 0x34fa <decode_hexadecimal_string_bytes+0x44>
    34f0:	97 53       	subi	r25, 0x37	; 55
    34f2:	59 2f       	mov	r21, r25
    34f4:	52 95       	swap	r21
    34f6:	50 7f       	andi	r21, 0xF0	; 240
    34f8:	03 c0       	rjmp	.+6      	; 0x3500 <decode_hexadecimal_string_bytes+0x4a>
    34fa:	59 2f       	mov	r21, r25
    34fc:	52 95       	swap	r21
    34fe:	50 7f       	andi	r21, 0xF0	; 240
    3500:	2c 0f       	add	r18, r28
    3502:	3d 1f       	adc	r19, r29
    3504:	f9 01       	movw	r30, r18
    3506:	91 81       	ldd	r25, Z+1	; 0x01
    3508:	91 34       	cpi	r25, 0x41	; 65
    350a:	10 f0       	brcs	.+4      	; 0x3510 <decode_hexadecimal_string_bytes+0x5a>
    350c:	97 53       	subi	r25, 0x37	; 55
    350e:	01 c0       	rjmp	.+2      	; 0x3512 <decode_hexadecimal_string_bytes+0x5c>
    3510:	90 53       	subi	r25, 0x30	; 48
    3512:	95 0f       	add	r25, r21
    3514:	f8 01       	movw	r30, r16
    3516:	90 83       	st	Z, r25
    3518:	8f 5f       	subi	r24, 0xFF	; 255
    351a:	01 c0       	rjmp	.+2      	; 0x351e <decode_hexadecimal_string_bytes+0x68>
    351c:	80 e0       	ldi	r24, 0x00	; 0
    351e:	28 2f       	mov	r18, r24
    3520:	22 0f       	add	r18, r18
    3522:	48 2f       	mov	r20, r24
    3524:	50 e0       	ldi	r21, 0x00	; 0
    3526:	fe 01       	movw	r30, r28
    3528:	01 90       	ld	r0, Z+
    352a:	00 20       	and	r0, r0
    352c:	e9 f7       	brne	.-6      	; 0x3528 <decode_hexadecimal_string_bytes+0x72>
    352e:	31 97       	sbiw	r30, 0x01	; 1
    3530:	ec 1b       	sub	r30, r28
    3532:	fd 0b       	sbc	r31, r29
    3534:	4e 17       	cp	r20, r30
    3536:	5f 07       	cpc	r21, r31
    3538:	10 f4       	brcc	.+4      	; 0x353e <decode_hexadecimal_string_bytes+0x88>
    353a:	86 13       	cpse	r24, r22
    353c:	ce cf       	rjmp	.-100    	; 0x34da <decode_hexadecimal_string_bytes+0x24>
    353e:	df 91       	pop	r29
    3540:	cf 91       	pop	r28
    3542:	1f 91       	pop	r17
    3544:	0f 91       	pop	r16
    3546:	08 95       	ret

00003548 <register_access_readRegister>:
    3548:	fc 01       	movw	r30, r24
    354a:	80 81       	ld	r24, Z
    354c:	08 95       	ret

0000354e <register_access_readBit>:
    354e:	fc 01       	movw	r30, r24
    3550:	20 81       	ld	r18, Z
    3552:	81 e0       	ldi	r24, 0x01	; 1
    3554:	90 e0       	ldi	r25, 0x00	; 0
    3556:	02 c0       	rjmp	.+4      	; 0x355c <register_access_readBit+0xe>
    3558:	88 0f       	add	r24, r24
    355a:	99 1f       	adc	r25, r25
    355c:	6a 95       	dec	r22
    355e:	e2 f7       	brpl	.-8      	; 0x3558 <register_access_readBit+0xa>
    3560:	82 23       	and	r24, r18
    3562:	08 95       	ret

00003564 <register_access_readBits>:
    3564:	fc 01       	movw	r30, r24
    3566:	80 81       	ld	r24, Z
    3568:	86 23       	and	r24, r22
    356a:	08 95       	ret

0000356c <register_access_setRegister>:
    356c:	fc 01       	movw	r30, r24
    356e:	60 83       	st	Z, r22
    3570:	08 95       	ret

00003572 <register_access_clearRegister>:
    3572:	fc 01       	movw	r30, r24
    3574:	10 82       	st	Z, r1
    3576:	08 95       	ret

00003578 <register_access_setBit>:
    3578:	fc 01       	movw	r30, r24
    357a:	40 81       	ld	r20, Z
    357c:	21 e0       	ldi	r18, 0x01	; 1
    357e:	30 e0       	ldi	r19, 0x00	; 0
    3580:	02 c0       	rjmp	.+4      	; 0x3586 <register_access_setBit+0xe>
    3582:	22 0f       	add	r18, r18
    3584:	33 1f       	adc	r19, r19
    3586:	6a 95       	dec	r22
    3588:	e2 f7       	brpl	.-8      	; 0x3582 <register_access_setBit+0xa>
    358a:	24 2b       	or	r18, r20
    358c:	20 83       	st	Z, r18
    358e:	08 95       	ret

00003590 <register_access_setBits>:
    3590:	fc 01       	movw	r30, r24
    3592:	20 81       	ld	r18, Z
    3594:	62 2b       	or	r22, r18
    3596:	60 83       	st	Z, r22
    3598:	08 95       	ret

0000359a <register_access_toggleBit>:
    359a:	fc 01       	movw	r30, r24
    359c:	40 81       	ld	r20, Z
    359e:	21 e0       	ldi	r18, 0x01	; 1
    35a0:	30 e0       	ldi	r19, 0x00	; 0
    35a2:	02 c0       	rjmp	.+4      	; 0x35a8 <register_access_toggleBit+0xe>
    35a4:	22 0f       	add	r18, r18
    35a6:	33 1f       	adc	r19, r19
    35a8:	6a 95       	dec	r22
    35aa:	e2 f7       	brpl	.-8      	; 0x35a4 <register_access_toggleBit+0xa>
    35ac:	24 27       	eor	r18, r20
    35ae:	20 83       	st	Z, r18
    35b0:	08 95       	ret

000035b2 <register_access_toggleBits>:
    35b2:	fc 01       	movw	r30, r24
    35b4:	20 81       	ld	r18, Z
    35b6:	62 27       	eor	r22, r18
    35b8:	60 83       	st	Z, r22
    35ba:	08 95       	ret

000035bc <register_access_clearBit>:
    35bc:	fc 01       	movw	r30, r24
    35be:	90 81       	ld	r25, Z
    35c0:	21 e0       	ldi	r18, 0x01	; 1
    35c2:	30 e0       	ldi	r19, 0x00	; 0
    35c4:	02 c0       	rjmp	.+4      	; 0x35ca <register_access_clearBit+0xe>
    35c6:	22 0f       	add	r18, r18
    35c8:	33 1f       	adc	r19, r19
    35ca:	6a 95       	dec	r22
    35cc:	e2 f7       	brpl	.-8      	; 0x35c6 <register_access_clearBit+0xa>
    35ce:	20 95       	com	r18
    35d0:	29 23       	and	r18, r25
    35d2:	20 83       	st	Z, r18
    35d4:	08 95       	ret

000035d6 <register_access_clearBits>:
    35d6:	fc 01       	movw	r30, r24
    35d8:	90 81       	ld	r25, Z
    35da:	60 95       	com	r22
    35dc:	69 23       	and	r22, r25
    35de:	60 83       	st	Z, r22
    35e0:	08 95       	ret

000035e2 <serial_create>:
    35e2:	2f 92       	push	r2
    35e4:	3f 92       	push	r3
    35e6:	4f 92       	push	r4
    35e8:	5f 92       	push	r5
    35ea:	6f 92       	push	r6
    35ec:	7f 92       	push	r7
    35ee:	8f 92       	push	r8
    35f0:	9f 92       	push	r9
    35f2:	af 92       	push	r10
    35f4:	cf 92       	push	r12
    35f6:	ef 92       	push	r14
    35f8:	ff 92       	push	r15
    35fa:	0f 93       	push	r16
    35fc:	1f 93       	push	r17
    35fe:	cf 93       	push	r28
    3600:	df 93       	push	r29
    3602:	cd b7       	in	r28, 0x3d	; 61
    3604:	de b7       	in	r29, 0x3e	; 62
    3606:	f8 2e       	mov	r15, r24
    3608:	2a 01       	movw	r4, r20
    360a:	3b 01       	movw	r6, r22
    360c:	88 e0       	ldi	r24, 0x08	; 8
    360e:	90 e0       	ldi	r25, 0x00	; 0
    3610:	8a d7       	rcall	.+3860   	; 0x4526 <malloc>
    3612:	8c 01       	movw	r16, r24
    3614:	8f 2d       	mov	r24, r15
    3616:	90 e0       	ldi	r25, 0x00	; 0
    3618:	88 0f       	add	r24, r24
    361a:	99 1f       	adc	r25, r25
    361c:	fc 01       	movw	r30, r24
    361e:	e9 59       	subi	r30, 0x99	; 153
    3620:	f7 4e       	sbci	r31, 0xE7	; 231
    3622:	11 83       	std	Z+1, r17	; 0x01
    3624:	00 83       	st	Z, r16
    3626:	fc 01       	movw	r30, r24
    3628:	ea 5f       	subi	r30, 0xFA	; 250
    362a:	fd 4f       	sbci	r31, 0xFD	; 253
    362c:	80 81       	ld	r24, Z
    362e:	91 81       	ldd	r25, Z+1	; 0x01
    3630:	d8 01       	movw	r26, r16
    3632:	8d 93       	st	X+, r24
    3634:	9c 93       	st	X, r25
    3636:	6c 2d       	mov	r22, r12
    3638:	70 e0       	ldi	r23, 0x00	; 0
    363a:	84 e0       	ldi	r24, 0x04	; 4
    363c:	90 e0       	ldi	r25, 0x00	; 0
    363e:	59 d7       	rcall	.+3762   	; 0x44f2 <calloc>
    3640:	1c 01       	movw	r2, r24
    3642:	61 e0       	ldi	r22, 0x01	; 1
    3644:	70 e0       	ldi	r23, 0x00	; 0
    3646:	86 e0       	ldi	r24, 0x06	; 6
    3648:	90 e0       	ldi	r25, 0x00	; 0
    364a:	53 d7       	rcall	.+3750   	; 0x44f2 <calloc>
    364c:	7c 01       	movw	r14, r24
    364e:	4c 2d       	mov	r20, r12
    3650:	b1 01       	movw	r22, r2
    3652:	41 d5       	rcall	.+2690   	; 0x40d6 <fifo_init>
    3654:	f8 01       	movw	r30, r16
    3656:	f5 82       	std	Z+5, r15	; 0x05
    3658:	e4 82       	std	Z+4, r14	; 0x04
    365a:	6a 2d       	mov	r22, r10
    365c:	70 e0       	ldi	r23, 0x00	; 0
    365e:	84 e0       	ldi	r24, 0x04	; 4
    3660:	90 e0       	ldi	r25, 0x00	; 0
    3662:	47 d7       	rcall	.+3726   	; 0x44f2 <calloc>
    3664:	1c 01       	movw	r2, r24
    3666:	61 e0       	ldi	r22, 0x01	; 1
    3668:	70 e0       	ldi	r23, 0x00	; 0
    366a:	86 e0       	ldi	r24, 0x06	; 6
    366c:	90 e0       	ldi	r25, 0x00	; 0
    366e:	41 d7       	rcall	.+3714   	; 0x44f2 <calloc>
    3670:	7c 01       	movw	r14, r24
    3672:	4a 2d       	mov	r20, r10
    3674:	b1 01       	movw	r22, r2
    3676:	2f d5       	rcall	.+2654   	; 0x40d6 <fifo_init>
    3678:	d8 01       	movw	r26, r16
    367a:	13 96       	adiw	r26, 0x03	; 3
    367c:	fc 92       	st	X, r15
    367e:	ee 92       	st	-X, r14
    3680:	12 97       	sbiw	r26, 0x02	; 2
    3682:	17 96       	adiw	r26, 0x07	; 7
    3684:	9c 92       	st	X, r9
    3686:	8e 92       	st	-X, r8
    3688:	16 97       	sbiw	r26, 0x06	; 6
    368a:	ff b6       	in	r15, 0x3f	; 63
    368c:	f8 94       	cli
    368e:	ed 91       	ld	r30, X+
    3690:	fc 91       	ld	r31, X
    3692:	11 97       	sbiw	r26, 0x01	; 1
    3694:	36 97       	sbiw	r30, 0x06	; 6
    3696:	80 81       	ld	r24, Z
    3698:	82 60       	ori	r24, 0x02	; 2
    369a:	80 83       	st	Z, r24
    369c:	8d 90       	ld	r8, X+
    369e:	9c 90       	ld	r9, X
    36a0:	c3 01       	movw	r24, r6
    36a2:	b2 01       	movw	r22, r4
    36a4:	2d d6       	rcall	.+3162   	; 0x4300 <__floatunsisf>
    36a6:	20 e0       	ldi	r18, 0x00	; 0
    36a8:	30 e0       	ldi	r19, 0x00	; 0
    36aa:	40 e0       	ldi	r20, 0x00	; 0
    36ac:	51 e4       	ldi	r21, 0x41	; 65
    36ae:	b6 d6       	rcall	.+3436   	; 0x441c <__mulsf3>
    36b0:	9b 01       	movw	r18, r22
    36b2:	ac 01       	movw	r20, r24
    36b4:	60 e0       	ldi	r22, 0x00	; 0
    36b6:	74 e2       	ldi	r23, 0x24	; 36
    36b8:	84 e7       	ldi	r24, 0x74	; 116
    36ba:	9b e4       	ldi	r25, 0x4B	; 75
    36bc:	8d d5       	rcall	.+2842   	; 0x41d8 <__divsf3>
    36be:	20 e0       	ldi	r18, 0x00	; 0
    36c0:	30 e0       	ldi	r19, 0x00	; 0
    36c2:	40 e8       	ldi	r20, 0x80	; 128
    36c4:	5f e3       	ldi	r21, 0x3F	; 63
    36c6:	23 d5       	rcall	.+2630   	; 0x410e <__subsf3>
    36c8:	ef d5       	rcall	.+3038   	; 0x42a8 <__fixunssfsi>
    36ca:	f4 01       	movw	r30, r8
    36cc:	32 97       	sbiw	r30, 0x02	; 2
    36ce:	60 83       	st	Z, r22
    36d0:	d8 01       	movw	r26, r16
    36d2:	ed 91       	ld	r30, X+
    36d4:	fc 91       	ld	r31, X
    36d6:	11 97       	sbiw	r26, 0x01	; 1
    36d8:	35 97       	sbiw	r30, 0x05	; 5
    36da:	88 e9       	ldi	r24, 0x98	; 152
    36dc:	80 83       	st	Z, r24
    36de:	ed 91       	ld	r30, X+
    36e0:	fc 91       	ld	r31, X
    36e2:	34 97       	sbiw	r30, 0x04	; 4
    36e4:	86 e0       	ldi	r24, 0x06	; 6
    36e6:	80 83       	st	Z, r24
    36e8:	ff be       	out	0x3f, r15	; 63
    36ea:	c8 01       	movw	r24, r16
    36ec:	df 91       	pop	r29
    36ee:	cf 91       	pop	r28
    36f0:	1f 91       	pop	r17
    36f2:	0f 91       	pop	r16
    36f4:	ff 90       	pop	r15
    36f6:	ef 90       	pop	r14
    36f8:	cf 90       	pop	r12
    36fa:	af 90       	pop	r10
    36fc:	9f 90       	pop	r9
    36fe:	8f 90       	pop	r8
    3700:	7f 90       	pop	r7
    3702:	6f 90       	pop	r6
    3704:	5f 90       	pop	r5
    3706:	4f 90       	pop	r4
    3708:	3f 90       	pop	r3
    370a:	2f 90       	pop	r2
    370c:	08 95       	ret

0000370e <serial_sendByte>:
    370e:	cf 93       	push	r28
    3710:	df 93       	push	r29
    3712:	ec 01       	movw	r28, r24
    3714:	ea 81       	ldd	r30, Y+2	; 0x02
    3716:	fb 81       	ldd	r31, Y+3	; 0x03
    3718:	93 81       	ldd	r25, Z+3	; 0x03
    371a:	82 81       	ldd	r24, Z+2	; 0x02
    371c:	25 81       	ldd	r18, Z+5	; 0x05
    371e:	98 1b       	sub	r25, r24
    3720:	92 23       	and	r25, r18
    3722:	84 81       	ldd	r24, Z+4	; 0x04
    3724:	98 17       	cp	r25, r24
    3726:	a1 f0       	breq	.+40     	; 0x3750 <serial_sendByte+0x42>
    3728:	93 81       	ldd	r25, Z+3	; 0x03
    372a:	26 95       	lsr	r18
    372c:	29 23       	and	r18, r25
    372e:	a0 81       	ld	r26, Z
    3730:	b1 81       	ldd	r27, Z+1	; 0x01
    3732:	a2 0f       	add	r26, r18
    3734:	b1 1d       	adc	r27, r1
    3736:	6c 93       	st	X, r22
    3738:	9f 5f       	subi	r25, 0xFF	; 255
    373a:	25 81       	ldd	r18, Z+5	; 0x05
    373c:	92 23       	and	r25, r18
    373e:	93 83       	std	Z+3, r25	; 0x03
    3740:	e8 81       	ld	r30, Y
    3742:	f9 81       	ldd	r31, Y+1	; 0x01
    3744:	35 97       	sbiw	r30, 0x05	; 5
    3746:	80 81       	ld	r24, Z
    3748:	80 62       	ori	r24, 0x20	; 32
    374a:	80 83       	st	Z, r24
    374c:	80 e0       	ldi	r24, 0x00	; 0
    374e:	01 c0       	rjmp	.+2      	; 0x3752 <serial_sendByte+0x44>
    3750:	82 e0       	ldi	r24, 0x02	; 2
    3752:	df 91       	pop	r29
    3754:	cf 91       	pop	r28
    3756:	08 95       	ret

00003758 <serial_sendBytes>:
    3758:	ef 92       	push	r14
    375a:	ff 92       	push	r15
    375c:	0f 93       	push	r16
    375e:	1f 93       	push	r17
    3760:	cf 93       	push	r28
    3762:	df 93       	push	r29
    3764:	7c 01       	movw	r14, r24
    3766:	dc 01       	movw	r26, r24
    3768:	12 96       	adiw	r26, 0x02	; 2
    376a:	ed 91       	ld	r30, X+
    376c:	fc 91       	ld	r31, X
    376e:	13 97       	sbiw	r26, 0x03	; 3
    3770:	93 81       	ldd	r25, Z+3	; 0x03
    3772:	82 81       	ldd	r24, Z+2	; 0x02
    3774:	98 1b       	sub	r25, r24
    3776:	85 81       	ldd	r24, Z+5	; 0x05
    3778:	98 23       	and	r25, r24
    377a:	84 81       	ldd	r24, Z+4	; 0x04
    377c:	89 1b       	sub	r24, r25
    377e:	86 17       	cp	r24, r22
    3780:	98 f1       	brcs	.+102    	; 0x37e8 <serial_sendBytes+0x90>
    3782:	66 23       	and	r22, r22
    3784:	41 f1       	breq	.+80     	; 0x37d6 <serial_sendBytes+0x7e>
    3786:	84 2f       	mov	r24, r20
    3788:	95 2f       	mov	r25, r21
    378a:	dc 01       	movw	r26, r24
    378c:	61 50       	subi	r22, 0x01	; 1
    378e:	46 2f       	mov	r20, r22
    3790:	50 e0       	ldi	r21, 0x00	; 0
    3792:	4f 5f       	subi	r20, 0xFF	; 255
    3794:	5f 4f       	sbci	r21, 0xFF	; 255
    3796:	48 0f       	add	r20, r24
    3798:	59 1f       	adc	r21, r25
    379a:	e7 01       	movw	r28, r14
    379c:	ea 81       	ldd	r30, Y+2	; 0x02
    379e:	fb 81       	ldd	r31, Y+3	; 0x03
    37a0:	93 81       	ldd	r25, Z+3	; 0x03
    37a2:	82 81       	ldd	r24, Z+2	; 0x02
    37a4:	25 81       	ldd	r18, Z+5	; 0x05
    37a6:	98 1b       	sub	r25, r24
    37a8:	92 23       	and	r25, r18
    37aa:	84 81       	ldd	r24, Z+4	; 0x04
    37ac:	98 17       	cp	r25, r24
    37ae:	79 f0       	breq	.+30     	; 0x37ce <serial_sendBytes+0x76>
    37b0:	8c 91       	ld	r24, X
    37b2:	93 81       	ldd	r25, Z+3	; 0x03
    37b4:	26 95       	lsr	r18
    37b6:	29 23       	and	r18, r25
    37b8:	60 81       	ld	r22, Z
    37ba:	71 81       	ldd	r23, Z+1	; 0x01
    37bc:	8b 01       	movw	r16, r22
    37be:	02 0f       	add	r16, r18
    37c0:	11 1d       	adc	r17, r1
    37c2:	e8 01       	movw	r28, r16
    37c4:	88 83       	st	Y, r24
    37c6:	9f 5f       	subi	r25, 0xFF	; 255
    37c8:	85 81       	ldd	r24, Z+5	; 0x05
    37ca:	98 23       	and	r25, r24
    37cc:	93 83       	std	Z+3, r25	; 0x03
    37ce:	11 96       	adiw	r26, 0x01	; 1
    37d0:	a4 17       	cp	r26, r20
    37d2:	b5 07       	cpc	r27, r21
    37d4:	11 f7       	brne	.-60     	; 0x379a <serial_sendBytes+0x42>
    37d6:	d7 01       	movw	r26, r14
    37d8:	ed 91       	ld	r30, X+
    37da:	fc 91       	ld	r31, X
    37dc:	35 97       	sbiw	r30, 0x05	; 5
    37de:	80 81       	ld	r24, Z
    37e0:	80 62       	ori	r24, 0x20	; 32
    37e2:	80 83       	st	Z, r24
    37e4:	80 e0       	ldi	r24, 0x00	; 0
    37e6:	01 c0       	rjmp	.+2      	; 0x37ea <serial_sendBytes+0x92>
    37e8:	82 e0       	ldi	r24, 0x02	; 2
    37ea:	df 91       	pop	r29
    37ec:	cf 91       	pop	r28
    37ee:	1f 91       	pop	r17
    37f0:	0f 91       	pop	r16
    37f2:	ff 90       	pop	r15
    37f4:	ef 90       	pop	r14
    37f6:	08 95       	ret

000037f8 <serial_getByte>:
    37f8:	dc 01       	movw	r26, r24
    37fa:	14 96       	adiw	r26, 0x04	; 4
    37fc:	ed 91       	ld	r30, X+
    37fe:	fc 91       	ld	r31, X
    3800:	15 97       	sbiw	r26, 0x05	; 5
    3802:	93 81       	ldd	r25, Z+3	; 0x03
    3804:	82 81       	ldd	r24, Z+2	; 0x02
    3806:	98 17       	cp	r25, r24
    3808:	89 f0       	breq	.+34     	; 0x382c <serial_getByte+0x34>
    380a:	92 81       	ldd	r25, Z+2	; 0x02
    380c:	85 81       	ldd	r24, Z+5	; 0x05
    380e:	86 95       	lsr	r24
    3810:	89 23       	and	r24, r25
    3812:	a0 81       	ld	r26, Z
    3814:	b1 81       	ldd	r27, Z+1	; 0x01
    3816:	a8 0f       	add	r26, r24
    3818:	b1 1d       	adc	r27, r1
    381a:	8c 91       	ld	r24, X
    381c:	db 01       	movw	r26, r22
    381e:	8c 93       	st	X, r24
    3820:	9f 5f       	subi	r25, 0xFF	; 255
    3822:	85 81       	ldd	r24, Z+5	; 0x05
    3824:	98 23       	and	r25, r24
    3826:	92 83       	std	Z+2, r25	; 0x02
    3828:	80 e0       	ldi	r24, 0x00	; 0
    382a:	08 95       	ret
    382c:	83 e0       	ldi	r24, 0x03	; 3
    382e:	08 95       	ret

00003830 <__vector_25>:
    3830:	1f 92       	push	r1
    3832:	0f 92       	push	r0
    3834:	0f b6       	in	r0, 0x3f	; 63
    3836:	0f 92       	push	r0
    3838:	11 24       	eor	r1, r1
    383a:	0b b6       	in	r0, 0x3b	; 59
    383c:	0f 92       	push	r0
    383e:	2f 93       	push	r18
    3840:	3f 93       	push	r19
    3842:	4f 93       	push	r20
    3844:	5f 93       	push	r21
    3846:	6f 93       	push	r22
    3848:	7f 93       	push	r23
    384a:	8f 93       	push	r24
    384c:	9f 93       	push	r25
    384e:	af 93       	push	r26
    3850:	bf 93       	push	r27
    3852:	cf 93       	push	r28
    3854:	df 93       	push	r29
    3856:	ef 93       	push	r30
    3858:	ff 93       	push	r31
    385a:	a0 91 67 18 	lds	r26, 0x1867	; 0x801867 <_ser_handle>
    385e:	b0 91 68 18 	lds	r27, 0x1868	; 0x801868 <_ser_handle+0x1>
    3862:	10 97       	sbiw	r26, 0x00	; 0
    3864:	11 f1       	breq	.+68     	; 0x38aa <__vector_25+0x7a>
    3866:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    386a:	14 96       	adiw	r26, 0x04	; 4
    386c:	ed 91       	ld	r30, X+
    386e:	fc 91       	ld	r31, X
    3870:	15 97       	sbiw	r26, 0x05	; 5
    3872:	93 81       	ldd	r25, Z+3	; 0x03
    3874:	82 81       	ldd	r24, Z+2	; 0x02
    3876:	25 81       	ldd	r18, Z+5	; 0x05
    3878:	98 1b       	sub	r25, r24
    387a:	92 23       	and	r25, r18
    387c:	84 81       	ldd	r24, Z+4	; 0x04
    387e:	98 17       	cp	r25, r24
    3880:	61 f0       	breq	.+24     	; 0x389a <__vector_25+0x6a>
    3882:	83 81       	ldd	r24, Z+3	; 0x03
    3884:	26 95       	lsr	r18
    3886:	28 23       	and	r18, r24
    3888:	c0 81       	ld	r28, Z
    388a:	d1 81       	ldd	r29, Z+1	; 0x01
    388c:	c2 0f       	add	r28, r18
    388e:	d1 1d       	adc	r29, r1
    3890:	68 83       	st	Y, r22
    3892:	8f 5f       	subi	r24, 0xFF	; 255
    3894:	95 81       	ldd	r25, Z+5	; 0x05
    3896:	89 23       	and	r24, r25
    3898:	83 83       	std	Z+3, r24	; 0x03
    389a:	16 96       	adiw	r26, 0x06	; 6
    389c:	ed 91       	ld	r30, X+
    389e:	fc 91       	ld	r31, X
    38a0:	17 97       	sbiw	r26, 0x07	; 7
    38a2:	30 97       	sbiw	r30, 0x00	; 0
    38a4:	11 f0       	breq	.+4      	; 0x38aa <__vector_25+0x7a>
    38a6:	cd 01       	movw	r24, r26
    38a8:	19 95       	eicall
    38aa:	ff 91       	pop	r31
    38ac:	ef 91       	pop	r30
    38ae:	df 91       	pop	r29
    38b0:	cf 91       	pop	r28
    38b2:	bf 91       	pop	r27
    38b4:	af 91       	pop	r26
    38b6:	9f 91       	pop	r25
    38b8:	8f 91       	pop	r24
    38ba:	7f 91       	pop	r23
    38bc:	6f 91       	pop	r22
    38be:	5f 91       	pop	r21
    38c0:	4f 91       	pop	r20
    38c2:	3f 91       	pop	r19
    38c4:	2f 91       	pop	r18
    38c6:	0f 90       	pop	r0
    38c8:	0b be       	out	0x3b, r0	; 59
    38ca:	0f 90       	pop	r0
    38cc:	0f be       	out	0x3f, r0	; 63
    38ce:	0f 90       	pop	r0
    38d0:	1f 90       	pop	r1
    38d2:	18 95       	reti

000038d4 <__vector_26>:
    38d4:	1f 92       	push	r1
    38d6:	0f 92       	push	r0
    38d8:	0f b6       	in	r0, 0x3f	; 63
    38da:	0f 92       	push	r0
    38dc:	11 24       	eor	r1, r1
    38de:	0b b6       	in	r0, 0x3b	; 59
    38e0:	0f 92       	push	r0
    38e2:	2f 93       	push	r18
    38e4:	8f 93       	push	r24
    38e6:	9f 93       	push	r25
    38e8:	af 93       	push	r26
    38ea:	bf 93       	push	r27
    38ec:	ef 93       	push	r30
    38ee:	ff 93       	push	r31
    38f0:	e0 91 67 18 	lds	r30, 0x1867	; 0x801867 <_ser_handle>
    38f4:	f0 91 68 18 	lds	r31, 0x1868	; 0x801868 <_ser_handle+0x1>
    38f8:	30 97       	sbiw	r30, 0x00	; 0
    38fa:	b9 f0       	breq	.+46     	; 0x392a <__vector_26+0x56>
    38fc:	02 80       	ldd	r0, Z+2	; 0x02
    38fe:	f3 81       	ldd	r31, Z+3	; 0x03
    3900:	e0 2d       	mov	r30, r0
    3902:	93 81       	ldd	r25, Z+3	; 0x03
    3904:	82 81       	ldd	r24, Z+2	; 0x02
    3906:	98 17       	cp	r25, r24
    3908:	b1 f0       	breq	.+44     	; 0x3936 <__vector_26+0x62>
    390a:	92 81       	ldd	r25, Z+2	; 0x02
    390c:	85 81       	ldd	r24, Z+5	; 0x05
    390e:	28 2f       	mov	r18, r24
    3910:	26 95       	lsr	r18
    3912:	29 23       	and	r18, r25
    3914:	a0 81       	ld	r26, Z
    3916:	b1 81       	ldd	r27, Z+1	; 0x01
    3918:	a2 0f       	add	r26, r18
    391a:	b1 1d       	adc	r27, r1
    391c:	2c 91       	ld	r18, X
    391e:	9f 5f       	subi	r25, 0xFF	; 255
    3920:	89 23       	and	r24, r25
    3922:	82 83       	std	Z+2, r24	; 0x02
    3924:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    3928:	0b c0       	rjmp	.+22     	; 0x3940 <__vector_26+0x6c>
    392a:	e1 ec       	ldi	r30, 0xC1	; 193
    392c:	f0 e0       	ldi	r31, 0x00	; 0
    392e:	80 81       	ld	r24, Z
    3930:	8f 7d       	andi	r24, 0xDF	; 223
    3932:	80 83       	st	Z, r24
    3934:	05 c0       	rjmp	.+10     	; 0x3940 <__vector_26+0x6c>
    3936:	e1 ec       	ldi	r30, 0xC1	; 193
    3938:	f0 e0       	ldi	r31, 0x00	; 0
    393a:	80 81       	ld	r24, Z
    393c:	8f 7d       	andi	r24, 0xDF	; 223
    393e:	80 83       	st	Z, r24
    3940:	ff 91       	pop	r31
    3942:	ef 91       	pop	r30
    3944:	bf 91       	pop	r27
    3946:	af 91       	pop	r26
    3948:	9f 91       	pop	r25
    394a:	8f 91       	pop	r24
    394c:	2f 91       	pop	r18
    394e:	0f 90       	pop	r0
    3950:	0b be       	out	0x3b, r0	; 59
    3952:	0f 90       	pop	r0
    3954:	0f be       	out	0x3f, r0	; 63
    3956:	0f 90       	pop	r0
    3958:	1f 90       	pop	r1
    395a:	18 95       	reti

0000395c <__vector_36>:
    395c:	1f 92       	push	r1
    395e:	0f 92       	push	r0
    3960:	0f b6       	in	r0, 0x3f	; 63
    3962:	0f 92       	push	r0
    3964:	11 24       	eor	r1, r1
    3966:	0b b6       	in	r0, 0x3b	; 59
    3968:	0f 92       	push	r0
    396a:	2f 93       	push	r18
    396c:	3f 93       	push	r19
    396e:	4f 93       	push	r20
    3970:	5f 93       	push	r21
    3972:	6f 93       	push	r22
    3974:	7f 93       	push	r23
    3976:	8f 93       	push	r24
    3978:	9f 93       	push	r25
    397a:	af 93       	push	r26
    397c:	bf 93       	push	r27
    397e:	cf 93       	push	r28
    3980:	df 93       	push	r29
    3982:	ef 93       	push	r30
    3984:	ff 93       	push	r31
    3986:	a0 91 69 18 	lds	r26, 0x1869	; 0x801869 <_ser_handle+0x2>
    398a:	b0 91 6a 18 	lds	r27, 0x186A	; 0x80186a <_ser_handle+0x3>
    398e:	10 97       	sbiw	r26, 0x00	; 0
    3990:	11 f1       	breq	.+68     	; 0x39d6 <__vector_36+0x7a>
    3992:	60 91 ce 00 	lds	r22, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    3996:	14 96       	adiw	r26, 0x04	; 4
    3998:	ed 91       	ld	r30, X+
    399a:	fc 91       	ld	r31, X
    399c:	15 97       	sbiw	r26, 0x05	; 5
    399e:	93 81       	ldd	r25, Z+3	; 0x03
    39a0:	82 81       	ldd	r24, Z+2	; 0x02
    39a2:	25 81       	ldd	r18, Z+5	; 0x05
    39a4:	98 1b       	sub	r25, r24
    39a6:	92 23       	and	r25, r18
    39a8:	84 81       	ldd	r24, Z+4	; 0x04
    39aa:	98 17       	cp	r25, r24
    39ac:	61 f0       	breq	.+24     	; 0x39c6 <__vector_36+0x6a>
    39ae:	83 81       	ldd	r24, Z+3	; 0x03
    39b0:	26 95       	lsr	r18
    39b2:	28 23       	and	r18, r24
    39b4:	c0 81       	ld	r28, Z
    39b6:	d1 81       	ldd	r29, Z+1	; 0x01
    39b8:	c2 0f       	add	r28, r18
    39ba:	d1 1d       	adc	r29, r1
    39bc:	68 83       	st	Y, r22
    39be:	8f 5f       	subi	r24, 0xFF	; 255
    39c0:	95 81       	ldd	r25, Z+5	; 0x05
    39c2:	89 23       	and	r24, r25
    39c4:	83 83       	std	Z+3, r24	; 0x03
    39c6:	16 96       	adiw	r26, 0x06	; 6
    39c8:	ed 91       	ld	r30, X+
    39ca:	fc 91       	ld	r31, X
    39cc:	17 97       	sbiw	r26, 0x07	; 7
    39ce:	30 97       	sbiw	r30, 0x00	; 0
    39d0:	11 f0       	breq	.+4      	; 0x39d6 <__vector_36+0x7a>
    39d2:	cd 01       	movw	r24, r26
    39d4:	19 95       	eicall
    39d6:	ff 91       	pop	r31
    39d8:	ef 91       	pop	r30
    39da:	df 91       	pop	r29
    39dc:	cf 91       	pop	r28
    39de:	bf 91       	pop	r27
    39e0:	af 91       	pop	r26
    39e2:	9f 91       	pop	r25
    39e4:	8f 91       	pop	r24
    39e6:	7f 91       	pop	r23
    39e8:	6f 91       	pop	r22
    39ea:	5f 91       	pop	r21
    39ec:	4f 91       	pop	r20
    39ee:	3f 91       	pop	r19
    39f0:	2f 91       	pop	r18
    39f2:	0f 90       	pop	r0
    39f4:	0b be       	out	0x3b, r0	; 59
    39f6:	0f 90       	pop	r0
    39f8:	0f be       	out	0x3f, r0	; 63
    39fa:	0f 90       	pop	r0
    39fc:	1f 90       	pop	r1
    39fe:	18 95       	reti

00003a00 <__vector_37>:
    3a00:	1f 92       	push	r1
    3a02:	0f 92       	push	r0
    3a04:	0f b6       	in	r0, 0x3f	; 63
    3a06:	0f 92       	push	r0
    3a08:	11 24       	eor	r1, r1
    3a0a:	0b b6       	in	r0, 0x3b	; 59
    3a0c:	0f 92       	push	r0
    3a0e:	2f 93       	push	r18
    3a10:	8f 93       	push	r24
    3a12:	9f 93       	push	r25
    3a14:	af 93       	push	r26
    3a16:	bf 93       	push	r27
    3a18:	ef 93       	push	r30
    3a1a:	ff 93       	push	r31
    3a1c:	e0 91 69 18 	lds	r30, 0x1869	; 0x801869 <_ser_handle+0x2>
    3a20:	f0 91 6a 18 	lds	r31, 0x186A	; 0x80186a <_ser_handle+0x3>
    3a24:	30 97       	sbiw	r30, 0x00	; 0
    3a26:	b9 f0       	breq	.+46     	; 0x3a56 <__vector_37+0x56>
    3a28:	02 80       	ldd	r0, Z+2	; 0x02
    3a2a:	f3 81       	ldd	r31, Z+3	; 0x03
    3a2c:	e0 2d       	mov	r30, r0
    3a2e:	93 81       	ldd	r25, Z+3	; 0x03
    3a30:	82 81       	ldd	r24, Z+2	; 0x02
    3a32:	98 17       	cp	r25, r24
    3a34:	b1 f0       	breq	.+44     	; 0x3a62 <__vector_37+0x62>
    3a36:	92 81       	ldd	r25, Z+2	; 0x02
    3a38:	85 81       	ldd	r24, Z+5	; 0x05
    3a3a:	28 2f       	mov	r18, r24
    3a3c:	26 95       	lsr	r18
    3a3e:	29 23       	and	r18, r25
    3a40:	a0 81       	ld	r26, Z
    3a42:	b1 81       	ldd	r27, Z+1	; 0x01
    3a44:	a2 0f       	add	r26, r18
    3a46:	b1 1d       	adc	r27, r1
    3a48:	2c 91       	ld	r18, X
    3a4a:	9f 5f       	subi	r25, 0xFF	; 255
    3a4c:	89 23       	and	r24, r25
    3a4e:	82 83       	std	Z+2, r24	; 0x02
    3a50:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    3a54:	0b c0       	rjmp	.+22     	; 0x3a6c <__vector_37+0x6c>
    3a56:	e9 ec       	ldi	r30, 0xC9	; 201
    3a58:	f0 e0       	ldi	r31, 0x00	; 0
    3a5a:	80 81       	ld	r24, Z
    3a5c:	8f 7d       	andi	r24, 0xDF	; 223
    3a5e:	80 83       	st	Z, r24
    3a60:	05 c0       	rjmp	.+10     	; 0x3a6c <__vector_37+0x6c>
    3a62:	e9 ec       	ldi	r30, 0xC9	; 201
    3a64:	f0 e0       	ldi	r31, 0x00	; 0
    3a66:	80 81       	ld	r24, Z
    3a68:	8f 7d       	andi	r24, 0xDF	; 223
    3a6a:	80 83       	st	Z, r24
    3a6c:	ff 91       	pop	r31
    3a6e:	ef 91       	pop	r30
    3a70:	bf 91       	pop	r27
    3a72:	af 91       	pop	r26
    3a74:	9f 91       	pop	r25
    3a76:	8f 91       	pop	r24
    3a78:	2f 91       	pop	r18
    3a7a:	0f 90       	pop	r0
    3a7c:	0b be       	out	0x3b, r0	; 59
    3a7e:	0f 90       	pop	r0
    3a80:	0f be       	out	0x3f, r0	; 63
    3a82:	0f 90       	pop	r0
    3a84:	1f 90       	pop	r1
    3a86:	18 95       	reti

00003a88 <__vector_51>:
    3a88:	1f 92       	push	r1
    3a8a:	0f 92       	push	r0
    3a8c:	0f b6       	in	r0, 0x3f	; 63
    3a8e:	0f 92       	push	r0
    3a90:	11 24       	eor	r1, r1
    3a92:	0b b6       	in	r0, 0x3b	; 59
    3a94:	0f 92       	push	r0
    3a96:	2f 93       	push	r18
    3a98:	3f 93       	push	r19
    3a9a:	4f 93       	push	r20
    3a9c:	5f 93       	push	r21
    3a9e:	6f 93       	push	r22
    3aa0:	7f 93       	push	r23
    3aa2:	8f 93       	push	r24
    3aa4:	9f 93       	push	r25
    3aa6:	af 93       	push	r26
    3aa8:	bf 93       	push	r27
    3aaa:	cf 93       	push	r28
    3aac:	df 93       	push	r29
    3aae:	ef 93       	push	r30
    3ab0:	ff 93       	push	r31
    3ab2:	a0 91 6b 18 	lds	r26, 0x186B	; 0x80186b <_ser_handle+0x4>
    3ab6:	b0 91 6c 18 	lds	r27, 0x186C	; 0x80186c <_ser_handle+0x5>
    3aba:	10 97       	sbiw	r26, 0x00	; 0
    3abc:	11 f1       	breq	.+68     	; 0x3b02 <__vector_51+0x7a>
    3abe:	60 91 d6 00 	lds	r22, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    3ac2:	14 96       	adiw	r26, 0x04	; 4
    3ac4:	ed 91       	ld	r30, X+
    3ac6:	fc 91       	ld	r31, X
    3ac8:	15 97       	sbiw	r26, 0x05	; 5
    3aca:	93 81       	ldd	r25, Z+3	; 0x03
    3acc:	82 81       	ldd	r24, Z+2	; 0x02
    3ace:	25 81       	ldd	r18, Z+5	; 0x05
    3ad0:	98 1b       	sub	r25, r24
    3ad2:	92 23       	and	r25, r18
    3ad4:	84 81       	ldd	r24, Z+4	; 0x04
    3ad6:	98 17       	cp	r25, r24
    3ad8:	61 f0       	breq	.+24     	; 0x3af2 <__vector_51+0x6a>
    3ada:	83 81       	ldd	r24, Z+3	; 0x03
    3adc:	26 95       	lsr	r18
    3ade:	28 23       	and	r18, r24
    3ae0:	c0 81       	ld	r28, Z
    3ae2:	d1 81       	ldd	r29, Z+1	; 0x01
    3ae4:	c2 0f       	add	r28, r18
    3ae6:	d1 1d       	adc	r29, r1
    3ae8:	68 83       	st	Y, r22
    3aea:	8f 5f       	subi	r24, 0xFF	; 255
    3aec:	95 81       	ldd	r25, Z+5	; 0x05
    3aee:	89 23       	and	r24, r25
    3af0:	83 83       	std	Z+3, r24	; 0x03
    3af2:	16 96       	adiw	r26, 0x06	; 6
    3af4:	ed 91       	ld	r30, X+
    3af6:	fc 91       	ld	r31, X
    3af8:	17 97       	sbiw	r26, 0x07	; 7
    3afa:	30 97       	sbiw	r30, 0x00	; 0
    3afc:	11 f0       	breq	.+4      	; 0x3b02 <__vector_51+0x7a>
    3afe:	cd 01       	movw	r24, r26
    3b00:	19 95       	eicall
    3b02:	ff 91       	pop	r31
    3b04:	ef 91       	pop	r30
    3b06:	df 91       	pop	r29
    3b08:	cf 91       	pop	r28
    3b0a:	bf 91       	pop	r27
    3b0c:	af 91       	pop	r26
    3b0e:	9f 91       	pop	r25
    3b10:	8f 91       	pop	r24
    3b12:	7f 91       	pop	r23
    3b14:	6f 91       	pop	r22
    3b16:	5f 91       	pop	r21
    3b18:	4f 91       	pop	r20
    3b1a:	3f 91       	pop	r19
    3b1c:	2f 91       	pop	r18
    3b1e:	0f 90       	pop	r0
    3b20:	0b be       	out	0x3b, r0	; 59
    3b22:	0f 90       	pop	r0
    3b24:	0f be       	out	0x3f, r0	; 63
    3b26:	0f 90       	pop	r0
    3b28:	1f 90       	pop	r1
    3b2a:	18 95       	reti

00003b2c <__vector_52>:
    3b2c:	1f 92       	push	r1
    3b2e:	0f 92       	push	r0
    3b30:	0f b6       	in	r0, 0x3f	; 63
    3b32:	0f 92       	push	r0
    3b34:	11 24       	eor	r1, r1
    3b36:	0b b6       	in	r0, 0x3b	; 59
    3b38:	0f 92       	push	r0
    3b3a:	2f 93       	push	r18
    3b3c:	8f 93       	push	r24
    3b3e:	9f 93       	push	r25
    3b40:	af 93       	push	r26
    3b42:	bf 93       	push	r27
    3b44:	ef 93       	push	r30
    3b46:	ff 93       	push	r31
    3b48:	e0 91 6b 18 	lds	r30, 0x186B	; 0x80186b <_ser_handle+0x4>
    3b4c:	f0 91 6c 18 	lds	r31, 0x186C	; 0x80186c <_ser_handle+0x5>
    3b50:	30 97       	sbiw	r30, 0x00	; 0
    3b52:	b9 f0       	breq	.+46     	; 0x3b82 <__vector_52+0x56>
    3b54:	02 80       	ldd	r0, Z+2	; 0x02
    3b56:	f3 81       	ldd	r31, Z+3	; 0x03
    3b58:	e0 2d       	mov	r30, r0
    3b5a:	93 81       	ldd	r25, Z+3	; 0x03
    3b5c:	82 81       	ldd	r24, Z+2	; 0x02
    3b5e:	98 17       	cp	r25, r24
    3b60:	b1 f0       	breq	.+44     	; 0x3b8e <__vector_52+0x62>
    3b62:	92 81       	ldd	r25, Z+2	; 0x02
    3b64:	85 81       	ldd	r24, Z+5	; 0x05
    3b66:	28 2f       	mov	r18, r24
    3b68:	26 95       	lsr	r18
    3b6a:	29 23       	and	r18, r25
    3b6c:	a0 81       	ld	r26, Z
    3b6e:	b1 81       	ldd	r27, Z+1	; 0x01
    3b70:	a2 0f       	add	r26, r18
    3b72:	b1 1d       	adc	r27, r1
    3b74:	2c 91       	ld	r18, X
    3b76:	9f 5f       	subi	r25, 0xFF	; 255
    3b78:	89 23       	and	r24, r25
    3b7a:	82 83       	std	Z+2, r24	; 0x02
    3b7c:	20 93 d6 00 	sts	0x00D6, r18	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    3b80:	0b c0       	rjmp	.+22     	; 0x3b98 <__vector_52+0x6c>
    3b82:	e1 ed       	ldi	r30, 0xD1	; 209
    3b84:	f0 e0       	ldi	r31, 0x00	; 0
    3b86:	80 81       	ld	r24, Z
    3b88:	8f 7d       	andi	r24, 0xDF	; 223
    3b8a:	80 83       	st	Z, r24
    3b8c:	05 c0       	rjmp	.+10     	; 0x3b98 <__vector_52+0x6c>
    3b8e:	e1 ed       	ldi	r30, 0xD1	; 209
    3b90:	f0 e0       	ldi	r31, 0x00	; 0
    3b92:	80 81       	ld	r24, Z
    3b94:	8f 7d       	andi	r24, 0xDF	; 223
    3b96:	80 83       	st	Z, r24
    3b98:	ff 91       	pop	r31
    3b9a:	ef 91       	pop	r30
    3b9c:	bf 91       	pop	r27
    3b9e:	af 91       	pop	r26
    3ba0:	9f 91       	pop	r25
    3ba2:	8f 91       	pop	r24
    3ba4:	2f 91       	pop	r18
    3ba6:	0f 90       	pop	r0
    3ba8:	0b be       	out	0x3b, r0	; 59
    3baa:	0f 90       	pop	r0
    3bac:	0f be       	out	0x3f, r0	; 63
    3bae:	0f 90       	pop	r0
    3bb0:	1f 90       	pop	r1
    3bb2:	18 95       	reti

00003bb4 <__vector_54>:
    3bb4:	1f 92       	push	r1
    3bb6:	0f 92       	push	r0
    3bb8:	0f b6       	in	r0, 0x3f	; 63
    3bba:	0f 92       	push	r0
    3bbc:	11 24       	eor	r1, r1
    3bbe:	0b b6       	in	r0, 0x3b	; 59
    3bc0:	0f 92       	push	r0
    3bc2:	2f 93       	push	r18
    3bc4:	3f 93       	push	r19
    3bc6:	4f 93       	push	r20
    3bc8:	5f 93       	push	r21
    3bca:	6f 93       	push	r22
    3bcc:	7f 93       	push	r23
    3bce:	8f 93       	push	r24
    3bd0:	9f 93       	push	r25
    3bd2:	af 93       	push	r26
    3bd4:	bf 93       	push	r27
    3bd6:	cf 93       	push	r28
    3bd8:	df 93       	push	r29
    3bda:	ef 93       	push	r30
    3bdc:	ff 93       	push	r31
    3bde:	a0 91 6d 18 	lds	r26, 0x186D	; 0x80186d <_ser_handle+0x6>
    3be2:	b0 91 6e 18 	lds	r27, 0x186E	; 0x80186e <_ser_handle+0x7>
    3be6:	10 97       	sbiw	r26, 0x00	; 0
    3be8:	11 f1       	breq	.+68     	; 0x3c2e <__vector_54+0x7a>
    3bea:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
    3bee:	14 96       	adiw	r26, 0x04	; 4
    3bf0:	ed 91       	ld	r30, X+
    3bf2:	fc 91       	ld	r31, X
    3bf4:	15 97       	sbiw	r26, 0x05	; 5
    3bf6:	93 81       	ldd	r25, Z+3	; 0x03
    3bf8:	82 81       	ldd	r24, Z+2	; 0x02
    3bfa:	25 81       	ldd	r18, Z+5	; 0x05
    3bfc:	98 1b       	sub	r25, r24
    3bfe:	92 23       	and	r25, r18
    3c00:	84 81       	ldd	r24, Z+4	; 0x04
    3c02:	98 17       	cp	r25, r24
    3c04:	61 f0       	breq	.+24     	; 0x3c1e <__vector_54+0x6a>
    3c06:	83 81       	ldd	r24, Z+3	; 0x03
    3c08:	26 95       	lsr	r18
    3c0a:	28 23       	and	r18, r24
    3c0c:	c0 81       	ld	r28, Z
    3c0e:	d1 81       	ldd	r29, Z+1	; 0x01
    3c10:	c2 0f       	add	r28, r18
    3c12:	d1 1d       	adc	r29, r1
    3c14:	68 83       	st	Y, r22
    3c16:	8f 5f       	subi	r24, 0xFF	; 255
    3c18:	95 81       	ldd	r25, Z+5	; 0x05
    3c1a:	89 23       	and	r24, r25
    3c1c:	83 83       	std	Z+3, r24	; 0x03
    3c1e:	16 96       	adiw	r26, 0x06	; 6
    3c20:	ed 91       	ld	r30, X+
    3c22:	fc 91       	ld	r31, X
    3c24:	17 97       	sbiw	r26, 0x07	; 7
    3c26:	30 97       	sbiw	r30, 0x00	; 0
    3c28:	11 f0       	breq	.+4      	; 0x3c2e <__vector_54+0x7a>
    3c2a:	cd 01       	movw	r24, r26
    3c2c:	19 95       	eicall
    3c2e:	ff 91       	pop	r31
    3c30:	ef 91       	pop	r30
    3c32:	df 91       	pop	r29
    3c34:	cf 91       	pop	r28
    3c36:	bf 91       	pop	r27
    3c38:	af 91       	pop	r26
    3c3a:	9f 91       	pop	r25
    3c3c:	8f 91       	pop	r24
    3c3e:	7f 91       	pop	r23
    3c40:	6f 91       	pop	r22
    3c42:	5f 91       	pop	r21
    3c44:	4f 91       	pop	r20
    3c46:	3f 91       	pop	r19
    3c48:	2f 91       	pop	r18
    3c4a:	0f 90       	pop	r0
    3c4c:	0b be       	out	0x3b, r0	; 59
    3c4e:	0f 90       	pop	r0
    3c50:	0f be       	out	0x3f, r0	; 63
    3c52:	0f 90       	pop	r0
    3c54:	1f 90       	pop	r1
    3c56:	18 95       	reti

00003c58 <__vector_55>:
    3c58:	1f 92       	push	r1
    3c5a:	0f 92       	push	r0
    3c5c:	0f b6       	in	r0, 0x3f	; 63
    3c5e:	0f 92       	push	r0
    3c60:	11 24       	eor	r1, r1
    3c62:	0b b6       	in	r0, 0x3b	; 59
    3c64:	0f 92       	push	r0
    3c66:	2f 93       	push	r18
    3c68:	8f 93       	push	r24
    3c6a:	9f 93       	push	r25
    3c6c:	af 93       	push	r26
    3c6e:	bf 93       	push	r27
    3c70:	ef 93       	push	r30
    3c72:	ff 93       	push	r31
    3c74:	e0 91 6d 18 	lds	r30, 0x186D	; 0x80186d <_ser_handle+0x6>
    3c78:	f0 91 6e 18 	lds	r31, 0x186E	; 0x80186e <_ser_handle+0x7>
    3c7c:	30 97       	sbiw	r30, 0x00	; 0
    3c7e:	b9 f0       	breq	.+46     	; 0x3cae <__vector_55+0x56>
    3c80:	02 80       	ldd	r0, Z+2	; 0x02
    3c82:	f3 81       	ldd	r31, Z+3	; 0x03
    3c84:	e0 2d       	mov	r30, r0
    3c86:	93 81       	ldd	r25, Z+3	; 0x03
    3c88:	82 81       	ldd	r24, Z+2	; 0x02
    3c8a:	98 17       	cp	r25, r24
    3c8c:	b1 f0       	breq	.+44     	; 0x3cba <__vector_55+0x62>
    3c8e:	92 81       	ldd	r25, Z+2	; 0x02
    3c90:	85 81       	ldd	r24, Z+5	; 0x05
    3c92:	28 2f       	mov	r18, r24
    3c94:	26 95       	lsr	r18
    3c96:	29 23       	and	r18, r25
    3c98:	a0 81       	ld	r26, Z
    3c9a:	b1 81       	ldd	r27, Z+1	; 0x01
    3c9c:	a2 0f       	add	r26, r18
    3c9e:	b1 1d       	adc	r27, r1
    3ca0:	2c 91       	ld	r18, X
    3ca2:	9f 5f       	subi	r25, 0xFF	; 255
    3ca4:	89 23       	and	r24, r25
    3ca6:	82 83       	std	Z+2, r24	; 0x02
    3ca8:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
    3cac:	0b c0       	rjmp	.+22     	; 0x3cc4 <__vector_55+0x6c>
    3cae:	e1 e3       	ldi	r30, 0x31	; 49
    3cb0:	f1 e0       	ldi	r31, 0x01	; 1
    3cb2:	80 81       	ld	r24, Z
    3cb4:	8f 7d       	andi	r24, 0xDF	; 223
    3cb6:	80 83       	st	Z, r24
    3cb8:	05 c0       	rjmp	.+10     	; 0x3cc4 <__vector_55+0x6c>
    3cba:	e1 e3       	ldi	r30, 0x31	; 49
    3cbc:	f1 e0       	ldi	r31, 0x01	; 1
    3cbe:	80 81       	ld	r24, Z
    3cc0:	8f 7d       	andi	r24, 0xDF	; 223
    3cc2:	80 83       	st	Z, r24
    3cc4:	ff 91       	pop	r31
    3cc6:	ef 91       	pop	r30
    3cc8:	bf 91       	pop	r27
    3cca:	af 91       	pop	r26
    3ccc:	9f 91       	pop	r25
    3cce:	8f 91       	pop	r24
    3cd0:	2f 91       	pop	r18
    3cd2:	0f 90       	pop	r0
    3cd4:	0b be       	out	0x3b, r0	; 59
    3cd6:	0f 90       	pop	r0
    3cd8:	0f be       	out	0x3f, r0	; 63
    3cda:	0f 90       	pop	r0
    3cdc:	1f 90       	pop	r1
    3cde:	18 95       	reti

00003ce0 <usart_getchar>:
    3ce0:	cf 93       	push	r28
    3ce2:	df 93       	push	r29
    3ce4:	1f 92       	push	r1
    3ce6:	cd b7       	in	r28, 0x3d	; 61
    3ce8:	de b7       	in	r29, 0x3e	; 62
    3cea:	be 01       	movw	r22, r28
    3cec:	6f 5f       	subi	r22, 0xFF	; 255
    3cee:	7f 4f       	sbci	r23, 0xFF	; 255
    3cf0:	80 91 6f 18 	lds	r24, 0x186F	; 0x80186f <_com_serial_instance>
    3cf4:	90 91 70 18 	lds	r25, 0x1870	; 0x801870 <_com_serial_instance+0x1>
    3cf8:	7f dd       	rcall	.-1282   	; 0x37f8 <serial_getByte>
    3cfa:	81 11       	cpse	r24, r1
    3cfc:	f6 cf       	rjmp	.-20     	; 0x3cea <usart_getchar+0xa>
    3cfe:	89 81       	ldd	r24, Y+1	; 0x01
    3d00:	90 e0       	ldi	r25, 0x00	; 0
    3d02:	0f 90       	pop	r0
    3d04:	df 91       	pop	r29
    3d06:	cf 91       	pop	r28
    3d08:	08 95       	ret

00003d0a <usart_putchar>:
    3d0a:	68 2f       	mov	r22, r24
    3d0c:	80 91 6f 18 	lds	r24, 0x186F	; 0x80186f <_com_serial_instance>
    3d10:	90 91 70 18 	lds	r25, 0x1870	; 0x801870 <_com_serial_instance+0x1>
    3d14:	fc dc       	rcall	.-1544   	; 0x370e <serial_sendByte>
    3d16:	80 e0       	ldi	r24, 0x00	; 0
    3d18:	90 e0       	ldi	r25, 0x00	; 0
    3d1a:	08 95       	ret

00003d1c <stdio_create>:
    3d1c:	8f 92       	push	r8
    3d1e:	9f 92       	push	r9
    3d20:	af 92       	push	r10
    3d22:	cf 92       	push	r12
    3d24:	ef 92       	push	r14
    3d26:	0f 93       	push	r16
    3d28:	81 2c       	mov	r8, r1
    3d2a:	91 2c       	mov	r9, r1
    3d2c:	68 94       	set
    3d2e:	aa 24       	eor	r10, r10
    3d30:	a7 f8       	bld	r10, 7
    3d32:	68 94       	set
    3d34:	cc 24       	eor	r12, r12
    3d36:	c7 f8       	bld	r12, 7
    3d38:	e1 2c       	mov	r14, r1
    3d3a:	00 e0       	ldi	r16, 0x00	; 0
    3d3c:	23 e0       	ldi	r18, 0x03	; 3
    3d3e:	40 e0       	ldi	r20, 0x00	; 0
    3d40:	51 ee       	ldi	r21, 0xE1	; 225
    3d42:	60 e0       	ldi	r22, 0x00	; 0
    3d44:	70 e0       	ldi	r23, 0x00	; 0
    3d46:	4d dc       	rcall	.-1894   	; 0x35e2 <serial_create>
    3d48:	90 93 70 18 	sts	0x1870, r25	; 0x801870 <_com_serial_instance+0x1>
    3d4c:	80 93 6f 18 	sts	0x186F, r24	; 0x80186f <_com_serial_instance>
    3d50:	e5 ea       	ldi	r30, 0xA5	; 165
    3d52:	f8 e1       	ldi	r31, 0x18	; 24
    3d54:	8e e0       	ldi	r24, 0x0E	; 14
    3d56:	92 e0       	ldi	r25, 0x02	; 2
    3d58:	91 83       	std	Z+1, r25	; 0x01
    3d5a:	80 83       	st	Z, r24
    3d5c:	93 83       	std	Z+3, r25	; 0x03
    3d5e:	82 83       	std	Z+2, r24	; 0x02
    3d60:	0f 91       	pop	r16
    3d62:	ef 90       	pop	r14
    3d64:	cf 90       	pop	r12
    3d66:	af 90       	pop	r10
    3d68:	9f 90       	pop	r9
    3d6a:	8f 90       	pop	r8
    3d6c:	08 95       	ret

00003d6e <_turn_off>:
    3d6e:	90 e0       	ldi	r25, 0x00	; 0
    3d70:	fc 01       	movw	r30, r24
    3d72:	ee 0f       	add	r30, r30
    3d74:	ff 1f       	adc	r31, r31
    3d76:	e8 0f       	add	r30, r24
    3d78:	f9 1f       	adc	r31, r25
    3d7a:	ee 0f       	add	r30, r30
    3d7c:	ff 1f       	adc	r31, r31
    3d7e:	ef 58       	subi	r30, 0x8F	; 143
    3d80:	f7 4e       	sbci	r31, 0xE7	; 231
    3d82:	23 81       	ldd	r18, Z+3	; 0x03
    3d84:	21 11       	cpse	r18, r1
    3d86:	1f c0       	rjmp	.+62     	; 0x3dc6 <_turn_off+0x58>
    3d88:	9c 01       	movw	r18, r24
    3d8a:	22 0f       	add	r18, r18
    3d8c:	33 1f       	adc	r19, r19
    3d8e:	f9 01       	movw	r30, r18
    3d90:	e8 0f       	add	r30, r24
    3d92:	f9 1f       	adc	r31, r25
    3d94:	ee 0f       	add	r30, r30
    3d96:	ff 1f       	adc	r31, r31
    3d98:	ef 58       	subi	r30, 0x8F	; 143
    3d9a:	f7 4e       	sbci	r31, 0xE7	; 231
    3d9c:	a0 81       	ld	r26, Z
    3d9e:	b1 81       	ldd	r27, Z+1	; 0x01
    3da0:	4c 91       	ld	r20, X
    3da2:	f9 01       	movw	r30, r18
    3da4:	e8 0f       	add	r30, r24
    3da6:	f9 1f       	adc	r31, r25
    3da8:	ee 0f       	add	r30, r30
    3daa:	ff 1f       	adc	r31, r31
    3dac:	ef 58       	subi	r30, 0x8F	; 143
    3dae:	f7 4e       	sbci	r31, 0xE7	; 231
    3db0:	81 e0       	ldi	r24, 0x01	; 1
    3db2:	90 e0       	ldi	r25, 0x00	; 0
    3db4:	02 80       	ldd	r0, Z+2	; 0x02
    3db6:	02 c0       	rjmp	.+4      	; 0x3dbc <_turn_off+0x4e>
    3db8:	88 0f       	add	r24, r24
    3dba:	99 1f       	adc	r25, r25
    3dbc:	0a 94       	dec	r0
    3dbe:	e2 f7       	brpl	.-8      	; 0x3db8 <_turn_off+0x4a>
    3dc0:	84 2b       	or	r24, r20
    3dc2:	8c 93       	st	X, r24
    3dc4:	08 95       	ret
    3dc6:	fc 01       	movw	r30, r24
    3dc8:	ee 0f       	add	r30, r30
    3dca:	ff 1f       	adc	r31, r31
    3dcc:	df 01       	movw	r26, r30
    3dce:	a8 0f       	add	r26, r24
    3dd0:	b9 1f       	adc	r27, r25
    3dd2:	aa 0f       	add	r26, r26
    3dd4:	bb 1f       	adc	r27, r27
    3dd6:	af 58       	subi	r26, 0x8F	; 143
    3dd8:	b7 4e       	sbci	r27, 0xE7	; 231
    3dda:	0d 90       	ld	r0, X+
    3ddc:	bc 91       	ld	r27, X
    3dde:	a0 2d       	mov	r26, r0
    3de0:	2c 91       	ld	r18, X
    3de2:	e8 0f       	add	r30, r24
    3de4:	f9 1f       	adc	r31, r25
    3de6:	ee 0f       	add	r30, r30
    3de8:	ff 1f       	adc	r31, r31
    3dea:	ef 58       	subi	r30, 0x8F	; 143
    3dec:	f7 4e       	sbci	r31, 0xE7	; 231
    3dee:	81 e0       	ldi	r24, 0x01	; 1
    3df0:	90 e0       	ldi	r25, 0x00	; 0
    3df2:	02 80       	ldd	r0, Z+2	; 0x02
    3df4:	02 c0       	rjmp	.+4      	; 0x3dfa <_turn_off+0x8c>
    3df6:	88 0f       	add	r24, r24
    3df8:	99 1f       	adc	r25, r25
    3dfa:	0a 94       	dec	r0
    3dfc:	e2 f7       	brpl	.-8      	; 0x3df6 <_turn_off+0x88>
    3dfe:	80 95       	com	r24
    3e00:	82 23       	and	r24, r18
    3e02:	8c 93       	st	X, r24
    3e04:	08 95       	ret

00003e06 <_turn_on>:
    3e06:	90 e0       	ldi	r25, 0x00	; 0
    3e08:	fc 01       	movw	r30, r24
    3e0a:	ee 0f       	add	r30, r30
    3e0c:	ff 1f       	adc	r31, r31
    3e0e:	e8 0f       	add	r30, r24
    3e10:	f9 1f       	adc	r31, r25
    3e12:	ee 0f       	add	r30, r30
    3e14:	ff 1f       	adc	r31, r31
    3e16:	ef 58       	subi	r30, 0x8F	; 143
    3e18:	f7 4e       	sbci	r31, 0xE7	; 231
    3e1a:	23 81       	ldd	r18, Z+3	; 0x03
    3e1c:	21 11       	cpse	r18, r1
    3e1e:	20 c0       	rjmp	.+64     	; 0x3e60 <_turn_on+0x5a>
    3e20:	9c 01       	movw	r18, r24
    3e22:	22 0f       	add	r18, r18
    3e24:	33 1f       	adc	r19, r19
    3e26:	f9 01       	movw	r30, r18
    3e28:	e8 0f       	add	r30, r24
    3e2a:	f9 1f       	adc	r31, r25
    3e2c:	ee 0f       	add	r30, r30
    3e2e:	ff 1f       	adc	r31, r31
    3e30:	ef 58       	subi	r30, 0x8F	; 143
    3e32:	f7 4e       	sbci	r31, 0xE7	; 231
    3e34:	a0 81       	ld	r26, Z
    3e36:	b1 81       	ldd	r27, Z+1	; 0x01
    3e38:	4c 91       	ld	r20, X
    3e3a:	f9 01       	movw	r30, r18
    3e3c:	e8 0f       	add	r30, r24
    3e3e:	f9 1f       	adc	r31, r25
    3e40:	ee 0f       	add	r30, r30
    3e42:	ff 1f       	adc	r31, r31
    3e44:	ef 58       	subi	r30, 0x8F	; 143
    3e46:	f7 4e       	sbci	r31, 0xE7	; 231
    3e48:	81 e0       	ldi	r24, 0x01	; 1
    3e4a:	90 e0       	ldi	r25, 0x00	; 0
    3e4c:	02 80       	ldd	r0, Z+2	; 0x02
    3e4e:	02 c0       	rjmp	.+4      	; 0x3e54 <_turn_on+0x4e>
    3e50:	88 0f       	add	r24, r24
    3e52:	99 1f       	adc	r25, r25
    3e54:	0a 94       	dec	r0
    3e56:	e2 f7       	brpl	.-8      	; 0x3e50 <_turn_on+0x4a>
    3e58:	80 95       	com	r24
    3e5a:	84 23       	and	r24, r20
    3e5c:	8c 93       	st	X, r24
    3e5e:	08 95       	ret
    3e60:	fc 01       	movw	r30, r24
    3e62:	ee 0f       	add	r30, r30
    3e64:	ff 1f       	adc	r31, r31
    3e66:	df 01       	movw	r26, r30
    3e68:	a8 0f       	add	r26, r24
    3e6a:	b9 1f       	adc	r27, r25
    3e6c:	aa 0f       	add	r26, r26
    3e6e:	bb 1f       	adc	r27, r27
    3e70:	af 58       	subi	r26, 0x8F	; 143
    3e72:	b7 4e       	sbci	r27, 0xE7	; 231
    3e74:	0d 90       	ld	r0, X+
    3e76:	bc 91       	ld	r27, X
    3e78:	a0 2d       	mov	r26, r0
    3e7a:	2c 91       	ld	r18, X
    3e7c:	e8 0f       	add	r30, r24
    3e7e:	f9 1f       	adc	r31, r25
    3e80:	ee 0f       	add	r30, r30
    3e82:	ff 1f       	adc	r31, r31
    3e84:	ef 58       	subi	r30, 0x8F	; 143
    3e86:	f7 4e       	sbci	r31, 0xE7	; 231
    3e88:	81 e0       	ldi	r24, 0x01	; 1
    3e8a:	90 e0       	ldi	r25, 0x00	; 0
    3e8c:	02 80       	ldd	r0, Z+2	; 0x02
    3e8e:	02 c0       	rjmp	.+4      	; 0x3e94 <_turn_on+0x8e>
    3e90:	88 0f       	add	r24, r24
    3e92:	99 1f       	adc	r25, r25
    3e94:	0a 94       	dec	r0
    3e96:	e2 f7       	brpl	.-8      	; 0x3e90 <_turn_on+0x8a>
    3e98:	82 2b       	or	r24, r18
    3e9a:	8c 93       	st	X, r24
    3e9c:	08 95       	ret

00003e9e <_hal_led_task>:
    3e9e:	cc 24       	eor	r12, r12
    3ea0:	c3 94       	inc	r12
    3ea2:	d1 2c       	mov	r13, r1
    3ea4:	68 94       	set
    3ea6:	bb 24       	eor	r11, r11
    3ea8:	b2 f8       	bld	r11, 2
    3eaa:	c1 e7       	ldi	r28, 0x71	; 113
    3eac:	d8 e1       	ldi	r29, 0x18	; 24
    3eae:	10 e0       	ldi	r17, 0x00	; 0
    3eb0:	8c 81       	ldd	r24, Y+4	; 0x04
    3eb2:	81 30       	cpi	r24, 0x01	; 1
    3eb4:	81 f0       	breq	.+32     	; 0x3ed6 <_hal_led_task+0x38>
    3eb6:	18 f1       	brcs	.+70     	; 0x3efe <_hal_led_task+0x60>
    3eb8:	82 30       	cpi	r24, 0x02	; 2
    3eba:	61 f5       	brne	.+88     	; 0x3f14 <_hal_led_task+0x76>
    3ebc:	e8 81       	ld	r30, Y
    3ebe:	f9 81       	ldd	r31, Y+1	; 0x01
    3ec0:	20 81       	ld	r18, Z
    3ec2:	c6 01       	movw	r24, r12
    3ec4:	0a 80       	ldd	r0, Y+2	; 0x02
    3ec6:	02 c0       	rjmp	.+4      	; 0x3ecc <_hal_led_task+0x2e>
    3ec8:	88 0f       	add	r24, r24
    3eca:	99 1f       	adc	r25, r25
    3ecc:	0a 94       	dec	r0
    3ece:	e2 f7       	brpl	.-8      	; 0x3ec8 <_hal_led_task+0x2a>
    3ed0:	82 27       	eor	r24, r18
    3ed2:	80 83       	st	Z, r24
    3ed4:	1f c0       	rjmp	.+62     	; 0x3f14 <_hal_led_task+0x76>
    3ed6:	8d 81       	ldd	r24, Y+5	; 0x05
    3ed8:	8f 5f       	subi	r24, 0xFF	; 255
    3eda:	8a 30       	cpi	r24, 0x0A	; 10
    3edc:	10 f4       	brcc	.+4      	; 0x3ee2 <_hal_led_task+0x44>
    3ede:	8d 83       	std	Y+5, r24	; 0x05
    3ee0:	19 c0       	rjmp	.+50     	; 0x3f14 <_hal_led_task+0x76>
    3ee2:	1d 82       	std	Y+5, r1	; 0x05
    3ee4:	e8 81       	ld	r30, Y
    3ee6:	f9 81       	ldd	r31, Y+1	; 0x01
    3ee8:	20 81       	ld	r18, Z
    3eea:	c6 01       	movw	r24, r12
    3eec:	0a 80       	ldd	r0, Y+2	; 0x02
    3eee:	02 c0       	rjmp	.+4      	; 0x3ef4 <_hal_led_task+0x56>
    3ef0:	88 0f       	add	r24, r24
    3ef2:	99 1f       	adc	r25, r25
    3ef4:	0a 94       	dec	r0
    3ef6:	e2 f7       	brpl	.-8      	; 0x3ef0 <_hal_led_task+0x52>
    3ef8:	82 27       	eor	r24, r18
    3efa:	80 83       	st	Z, r24
    3efc:	0b c0       	rjmp	.+22     	; 0x3f14 <_hal_led_task+0x76>
    3efe:	0d 81       	ldd	r16, Y+5	; 0x05
    3f00:	00 23       	and	r16, r16
    3f02:	29 f0       	breq	.+10     	; 0x3f0e <_hal_led_task+0x70>
    3f04:	81 2f       	mov	r24, r17
    3f06:	7f df       	rcall	.-258    	; 0x3e06 <_turn_on>
    3f08:	01 50       	subi	r16, 0x01	; 1
    3f0a:	0d 83       	std	Y+5, r16	; 0x05
    3f0c:	03 c0       	rjmp	.+6      	; 0x3f14 <_hal_led_task+0x76>
    3f0e:	bc 82       	std	Y+4, r11	; 0x04
    3f10:	81 2f       	mov	r24, r17
    3f12:	2d df       	rcall	.-422    	; 0x3d6e <_turn_off>
    3f14:	1f 5f       	subi	r17, 0xFF	; 255
    3f16:	26 96       	adiw	r28, 0x06	; 6
    3f18:	14 30       	cpi	r17, 0x04	; 4
    3f1a:	51 f6       	brne	.-108    	; 0x3eb0 <_hal_led_task+0x12>
    3f1c:	65 e0       	ldi	r22, 0x05	; 5
    3f1e:	70 e0       	ldi	r23, 0x00	; 0
    3f20:	80 e0       	ldi	r24, 0x00	; 0
    3f22:	90 e0       	ldi	r25, 0x00	; 0
    3f24:	0e 94 3d 10 	call	0x207a	; 0x207a <vTaskDelay>
    3f28:	c0 cf       	rjmp	.-128    	; 0x3eaa <_hal_led_task+0xc>

00003f2a <status_leds_create>:
    3f2a:	ef 92       	push	r14
    3f2c:	ff 92       	push	r15
    3f2e:	0f 93       	push	r16
    3f30:	1f 93       	push	r17
    3f32:	cf 93       	push	r28
    3f34:	df 93       	push	r29
    3f36:	08 2f       	mov	r16, r24
    3f38:	80 e4       	ldi	r24, 0x40	; 64
    3f3a:	87 b9       	out	0x07, r24	; 7
    3f3c:	c1 e7       	ldi	r28, 0x71	; 113
    3f3e:	d8 e1       	ldi	r29, 0x18	; 24
    3f40:	0f 2e       	mov	r0, r31
    3f42:	f8 e2       	ldi	r31, 0x28	; 40
    3f44:	ef 2e       	mov	r14, r31
    3f46:	f1 2c       	mov	r15, r1
    3f48:	f0 2d       	mov	r31, r0
    3f4a:	f9 82       	std	Y+1, r15	; 0x01
    3f4c:	e8 82       	st	Y, r14
    3f4e:	86 e0       	ldi	r24, 0x06	; 6
    3f50:	8a 83       	std	Y+2, r24	; 0x02
    3f52:	1b 82       	std	Y+3, r1	; 0x03
    3f54:	14 e0       	ldi	r17, 0x04	; 4
    3f56:	1c 83       	std	Y+4, r17	; 0x04
    3f58:	80 e0       	ldi	r24, 0x00	; 0
    3f5a:	09 df       	rcall	.-494    	; 0x3d6e <_turn_off>
    3f5c:	80 e8       	ldi	r24, 0x80	; 128
    3f5e:	87 b9       	out	0x07, r24	; 7
    3f60:	ff 82       	std	Y+7, r15	; 0x07
    3f62:	ee 82       	std	Y+6, r14	; 0x06
    3f64:	87 e0       	ldi	r24, 0x07	; 7
    3f66:	88 87       	std	Y+8, r24	; 0x08
    3f68:	19 86       	std	Y+9, r1	; 0x09
    3f6a:	1a 87       	std	Y+10, r17	; 0x0a
    3f6c:	81 e0       	ldi	r24, 0x01	; 1
    3f6e:	ff de       	rcall	.-514    	; 0x3d6e <_turn_off>
    3f70:	80 e2       	ldi	r24, 0x20	; 32
    3f72:	83 bb       	out	0x13, r24	; 19
    3f74:	84 e3       	ldi	r24, 0x34	; 52
    3f76:	90 e0       	ldi	r25, 0x00	; 0
    3f78:	9d 87       	std	Y+13, r25	; 0x0d
    3f7a:	8c 87       	std	Y+12, r24	; 0x0c
    3f7c:	85 e0       	ldi	r24, 0x05	; 5
    3f7e:	8e 87       	std	Y+14, r24	; 0x0e
    3f80:	1f 86       	std	Y+15, r1	; 0x0f
    3f82:	18 8b       	std	Y+16, r17	; 0x10
    3f84:	82 e0       	ldi	r24, 0x02	; 2
    3f86:	f3 de       	rcall	.-538    	; 0x3d6e <_turn_off>
    3f88:	80 e1       	ldi	r24, 0x10	; 16
    3f8a:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <__TEXT_REGION_LENGTH__+0x700101>
    3f8e:	82 e0       	ldi	r24, 0x02	; 2
    3f90:	91 e0       	ldi	r25, 0x01	; 1
    3f92:	9b 8b       	std	Y+19, r25	; 0x13
    3f94:	8a 8b       	std	Y+18, r24	; 0x12
    3f96:	1c 8b       	std	Y+20, r17	; 0x14
    3f98:	1d 8a       	std	Y+21, r1	; 0x15
    3f9a:	1e 8b       	std	Y+22, r17	; 0x16
    3f9c:	83 e0       	ldi	r24, 0x03	; 3
    3f9e:	e7 de       	rcall	.-562    	; 0x3d6e <_turn_off>
    3fa0:	e1 2c       	mov	r14, r1
    3fa2:	f1 2c       	mov	r15, r1
    3fa4:	20 e0       	ldi	r18, 0x00	; 0
    3fa6:	30 e0       	ldi	r19, 0x00	; 0
    3fa8:	40 ec       	ldi	r20, 0xC0	; 192
    3faa:	50 e0       	ldi	r21, 0x00	; 0
    3fac:	6d e7       	ldi	r22, 0x7D	; 125
    3fae:	76 e0       	ldi	r23, 0x06	; 6
    3fb0:	8f e4       	ldi	r24, 0x4F	; 79
    3fb2:	9f e1       	ldi	r25, 0x1F	; 31
    3fb4:	0e 94 1f 0d 	call	0x1a3e	; 0x1a3e <xTaskCreate>
    3fb8:	df 91       	pop	r29
    3fba:	cf 91       	pop	r28
    3fbc:	1f 91       	pop	r17
    3fbe:	0f 91       	pop	r16
    3fc0:	ff 90       	pop	r15
    3fc2:	ef 90       	pop	r14
    3fc4:	08 95       	ret

00003fc6 <status_leds_slowBlink>:
    3fc6:	cf 93       	push	r28
    3fc8:	df 93       	push	r29
    3fca:	90 e0       	ldi	r25, 0x00	; 0
    3fcc:	fc 01       	movw	r30, r24
    3fce:	ee 0f       	add	r30, r30
    3fd0:	ff 1f       	adc	r31, r31
    3fd2:	df 01       	movw	r26, r30
    3fd4:	a8 0f       	add	r26, r24
    3fd6:	b9 1f       	adc	r27, r25
    3fd8:	aa 0f       	add	r26, r26
    3fda:	bb 1f       	adc	r27, r27
    3fdc:	af 58       	subi	r26, 0x8F	; 143
    3fde:	b7 4e       	sbci	r27, 0xE7	; 231
    3fe0:	cd 91       	ld	r28, X+
    3fe2:	dc 91       	ld	r29, X
    3fe4:	11 97       	sbiw	r26, 0x01	; 1
    3fe6:	48 81       	ld	r20, Y
    3fe8:	21 e0       	ldi	r18, 0x01	; 1
    3fea:	30 e0       	ldi	r19, 0x00	; 0
    3fec:	12 96       	adiw	r26, 0x02	; 2
    3fee:	0c 90       	ld	r0, X
    3ff0:	12 97       	sbiw	r26, 0x02	; 2
    3ff2:	02 c0       	rjmp	.+4      	; 0x3ff8 <status_leds_slowBlink+0x32>
    3ff4:	22 0f       	add	r18, r18
    3ff6:	33 1f       	adc	r19, r19
    3ff8:	0a 94       	dec	r0
    3ffa:	e2 f7       	brpl	.-8      	; 0x3ff4 <status_leds_slowBlink+0x2e>
    3ffc:	24 27       	eor	r18, r20
    3ffe:	28 83       	st	Y, r18
    4000:	fd 01       	movw	r30, r26
    4002:	81 e0       	ldi	r24, 0x01	; 1
    4004:	84 83       	std	Z+4, r24	; 0x04
    4006:	df 91       	pop	r29
    4008:	cf 91       	pop	r28
    400a:	08 95       	ret

0000400c <status_leds_fastBlink>:
    400c:	cf 93       	push	r28
    400e:	df 93       	push	r29
    4010:	90 e0       	ldi	r25, 0x00	; 0
    4012:	fc 01       	movw	r30, r24
    4014:	ee 0f       	add	r30, r30
    4016:	ff 1f       	adc	r31, r31
    4018:	df 01       	movw	r26, r30
    401a:	a8 0f       	add	r26, r24
    401c:	b9 1f       	adc	r27, r25
    401e:	aa 0f       	add	r26, r26
    4020:	bb 1f       	adc	r27, r27
    4022:	af 58       	subi	r26, 0x8F	; 143
    4024:	b7 4e       	sbci	r27, 0xE7	; 231
    4026:	cd 91       	ld	r28, X+
    4028:	dc 91       	ld	r29, X
    402a:	11 97       	sbiw	r26, 0x01	; 1
    402c:	48 81       	ld	r20, Y
    402e:	21 e0       	ldi	r18, 0x01	; 1
    4030:	30 e0       	ldi	r19, 0x00	; 0
    4032:	12 96       	adiw	r26, 0x02	; 2
    4034:	0c 90       	ld	r0, X
    4036:	12 97       	sbiw	r26, 0x02	; 2
    4038:	02 c0       	rjmp	.+4      	; 0x403e <status_leds_fastBlink+0x32>
    403a:	22 0f       	add	r18, r18
    403c:	33 1f       	adc	r19, r19
    403e:	0a 94       	dec	r0
    4040:	e2 f7       	brpl	.-8      	; 0x403a <status_leds_fastBlink+0x2e>
    4042:	24 27       	eor	r18, r20
    4044:	28 83       	st	Y, r18
    4046:	fd 01       	movw	r30, r26
    4048:	82 e0       	ldi	r24, 0x02	; 2
    404a:	84 83       	std	Z+4, r24	; 0x04
    404c:	df 91       	pop	r29
    404e:	cf 91       	pop	r28
    4050:	08 95       	ret

00004052 <status_leds_ledOn>:
    4052:	28 2f       	mov	r18, r24
    4054:	30 e0       	ldi	r19, 0x00	; 0
    4056:	f9 01       	movw	r30, r18
    4058:	ee 0f       	add	r30, r30
    405a:	ff 1f       	adc	r31, r31
    405c:	e2 0f       	add	r30, r18
    405e:	f3 1f       	adc	r31, r19
    4060:	ee 0f       	add	r30, r30
    4062:	ff 1f       	adc	r31, r31
    4064:	ef 58       	subi	r30, 0x8F	; 143
    4066:	f7 4e       	sbci	r31, 0xE7	; 231
    4068:	93 e0       	ldi	r25, 0x03	; 3
    406a:	94 83       	std	Z+4, r25	; 0x04
    406c:	cc ce       	rjmp	.-616    	; 0x3e06 <_turn_on>
    406e:	08 95       	ret

00004070 <status_leds_ledOff>:
    4070:	28 2f       	mov	r18, r24
    4072:	30 e0       	ldi	r19, 0x00	; 0
    4074:	f9 01       	movw	r30, r18
    4076:	ee 0f       	add	r30, r30
    4078:	ff 1f       	adc	r31, r31
    407a:	e2 0f       	add	r30, r18
    407c:	f3 1f       	adc	r31, r19
    407e:	ee 0f       	add	r30, r30
    4080:	ff 1f       	adc	r31, r31
    4082:	ef 58       	subi	r30, 0x8F	; 143
    4084:	f7 4e       	sbci	r31, 0xE7	; 231
    4086:	94 e0       	ldi	r25, 0x04	; 4
    4088:	94 83       	std	Z+4, r25	; 0x04
    408a:	71 ce       	rjmp	.-798    	; 0x3d6e <_turn_off>
    408c:	08 95       	ret

0000408e <status_leds_longPuls>:
    408e:	90 e0       	ldi	r25, 0x00	; 0
    4090:	fc 01       	movw	r30, r24
    4092:	ee 0f       	add	r30, r30
    4094:	ff 1f       	adc	r31, r31
    4096:	df 01       	movw	r26, r30
    4098:	a8 0f       	add	r26, r24
    409a:	b9 1f       	adc	r27, r25
    409c:	aa 0f       	add	r26, r26
    409e:	bb 1f       	adc	r27, r27
    40a0:	af 58       	subi	r26, 0x8F	; 143
    40a2:	b7 4e       	sbci	r27, 0xE7	; 231
    40a4:	24 e0       	ldi	r18, 0x04	; 4
    40a6:	15 96       	adiw	r26, 0x05	; 5
    40a8:	2c 93       	st	X, r18
    40aa:	15 97       	sbiw	r26, 0x05	; 5
    40ac:	fd 01       	movw	r30, r26
    40ae:	14 82       	std	Z+4, r1	; 0x04
    40b0:	08 95       	ret

000040b2 <status_leds_shortPuls>:
    40b2:	90 e0       	ldi	r25, 0x00	; 0
    40b4:	fc 01       	movw	r30, r24
    40b6:	ee 0f       	add	r30, r30
    40b8:	ff 1f       	adc	r31, r31
    40ba:	df 01       	movw	r26, r30
    40bc:	a8 0f       	add	r26, r24
    40be:	b9 1f       	adc	r27, r25
    40c0:	aa 0f       	add	r26, r26
    40c2:	bb 1f       	adc	r27, r27
    40c4:	af 58       	subi	r26, 0x8F	; 143
    40c6:	b7 4e       	sbci	r27, 0xE7	; 231
    40c8:	21 e0       	ldi	r18, 0x01	; 1
    40ca:	15 96       	adiw	r26, 0x05	; 5
    40cc:	2c 93       	st	X, r18
    40ce:	15 97       	sbiw	r26, 0x05	; 5
    40d0:	fd 01       	movw	r30, r26
    40d2:	14 82       	std	Z+4, r1	; 0x04
    40d4:	08 95       	ret

000040d6 <fifo_init>:
    40d6:	fc 01       	movw	r30, r24
    40d8:	41 11       	cpse	r20, r1
    40da:	01 c0       	rjmp	.+2      	; 0x40de <fifo_init+0x8>
    40dc:	45 d3       	rcall	.+1674   	; 0x4768 <abort>
    40de:	84 2f       	mov	r24, r20
    40e0:	90 e0       	ldi	r25, 0x00	; 0
    40e2:	9c 01       	movw	r18, r24
    40e4:	21 50       	subi	r18, 0x01	; 1
    40e6:	31 09       	sbc	r19, r1
    40e8:	82 23       	and	r24, r18
    40ea:	93 23       	and	r25, r19
    40ec:	89 2b       	or	r24, r25
    40ee:	09 f0       	breq	.+2      	; 0x40f2 <fifo_init+0x1c>
    40f0:	3b d3       	rcall	.+1654   	; 0x4768 <abort>
    40f2:	41 38       	cpi	r20, 0x81	; 129
    40f4:	08 f0       	brcs	.+2      	; 0x40f8 <fifo_init+0x22>
    40f6:	38 d3       	rcall	.+1648   	; 0x4768 <abort>
    40f8:	12 82       	std	Z+2, r1	; 0x02
    40fa:	13 82       	std	Z+3, r1	; 0x03
    40fc:	44 83       	std	Z+4, r20	; 0x04
    40fe:	44 0f       	add	r20, r20
    4100:	41 50       	subi	r20, 0x01	; 1
    4102:	45 83       	std	Z+5, r20	; 0x05
    4104:	71 83       	std	Z+1, r23	; 0x01
    4106:	60 83       	st	Z, r22
    4108:	80 e0       	ldi	r24, 0x00	; 0
    410a:	90 e0       	ldi	r25, 0x00	; 0
    410c:	08 95       	ret

0000410e <__subsf3>:
    410e:	50 58       	subi	r21, 0x80	; 128

00004110 <__addsf3>:
    4110:	bb 27       	eor	r27, r27
    4112:	aa 27       	eor	r26, r26
    4114:	0e d0       	rcall	.+28     	; 0x4132 <__addsf3x>
    4116:	48 c1       	rjmp	.+656    	; 0x43a8 <__fp_round>
    4118:	39 d1       	rcall	.+626    	; 0x438c <__fp_pscA>
    411a:	30 f0       	brcs	.+12     	; 0x4128 <__addsf3+0x18>
    411c:	3e d1       	rcall	.+636    	; 0x439a <__fp_pscB>
    411e:	20 f0       	brcs	.+8      	; 0x4128 <__addsf3+0x18>
    4120:	31 f4       	brne	.+12     	; 0x412e <__addsf3+0x1e>
    4122:	9f 3f       	cpi	r25, 0xFF	; 255
    4124:	11 f4       	brne	.+4      	; 0x412a <__addsf3+0x1a>
    4126:	1e f4       	brtc	.+6      	; 0x412e <__addsf3+0x1e>
    4128:	2e c1       	rjmp	.+604    	; 0x4386 <__fp_nan>
    412a:	0e f4       	brtc	.+2      	; 0x412e <__addsf3+0x1e>
    412c:	e0 95       	com	r30
    412e:	e7 fb       	bst	r30, 7
    4130:	24 c1       	rjmp	.+584    	; 0x437a <__fp_inf>

00004132 <__addsf3x>:
    4132:	e9 2f       	mov	r30, r25
    4134:	4a d1       	rcall	.+660    	; 0x43ca <__fp_split3>
    4136:	80 f3       	brcs	.-32     	; 0x4118 <__addsf3+0x8>
    4138:	ba 17       	cp	r27, r26
    413a:	62 07       	cpc	r22, r18
    413c:	73 07       	cpc	r23, r19
    413e:	84 07       	cpc	r24, r20
    4140:	95 07       	cpc	r25, r21
    4142:	18 f0       	brcs	.+6      	; 0x414a <__addsf3x+0x18>
    4144:	71 f4       	brne	.+28     	; 0x4162 <__addsf3x+0x30>
    4146:	9e f5       	brtc	.+102    	; 0x41ae <__addsf3x+0x7c>
    4148:	62 c1       	rjmp	.+708    	; 0x440e <__fp_zero>
    414a:	0e f4       	brtc	.+2      	; 0x414e <__addsf3x+0x1c>
    414c:	e0 95       	com	r30
    414e:	0b 2e       	mov	r0, r27
    4150:	ba 2f       	mov	r27, r26
    4152:	a0 2d       	mov	r26, r0
    4154:	0b 01       	movw	r0, r22
    4156:	b9 01       	movw	r22, r18
    4158:	90 01       	movw	r18, r0
    415a:	0c 01       	movw	r0, r24
    415c:	ca 01       	movw	r24, r20
    415e:	a0 01       	movw	r20, r0
    4160:	11 24       	eor	r1, r1
    4162:	ff 27       	eor	r31, r31
    4164:	59 1b       	sub	r21, r25
    4166:	99 f0       	breq	.+38     	; 0x418e <__addsf3x+0x5c>
    4168:	59 3f       	cpi	r21, 0xF9	; 249
    416a:	50 f4       	brcc	.+20     	; 0x4180 <__addsf3x+0x4e>
    416c:	50 3e       	cpi	r21, 0xE0	; 224
    416e:	68 f1       	brcs	.+90     	; 0x41ca <__addsf3x+0x98>
    4170:	1a 16       	cp	r1, r26
    4172:	f0 40       	sbci	r31, 0x00	; 0
    4174:	a2 2f       	mov	r26, r18
    4176:	23 2f       	mov	r18, r19
    4178:	34 2f       	mov	r19, r20
    417a:	44 27       	eor	r20, r20
    417c:	58 5f       	subi	r21, 0xF8	; 248
    417e:	f3 cf       	rjmp	.-26     	; 0x4166 <__addsf3x+0x34>
    4180:	46 95       	lsr	r20
    4182:	37 95       	ror	r19
    4184:	27 95       	ror	r18
    4186:	a7 95       	ror	r26
    4188:	f0 40       	sbci	r31, 0x00	; 0
    418a:	53 95       	inc	r21
    418c:	c9 f7       	brne	.-14     	; 0x4180 <__addsf3x+0x4e>
    418e:	7e f4       	brtc	.+30     	; 0x41ae <__addsf3x+0x7c>
    4190:	1f 16       	cp	r1, r31
    4192:	ba 0b       	sbc	r27, r26
    4194:	62 0b       	sbc	r22, r18
    4196:	73 0b       	sbc	r23, r19
    4198:	84 0b       	sbc	r24, r20
    419a:	ba f0       	brmi	.+46     	; 0x41ca <__addsf3x+0x98>
    419c:	91 50       	subi	r25, 0x01	; 1
    419e:	a1 f0       	breq	.+40     	; 0x41c8 <__addsf3x+0x96>
    41a0:	ff 0f       	add	r31, r31
    41a2:	bb 1f       	adc	r27, r27
    41a4:	66 1f       	adc	r22, r22
    41a6:	77 1f       	adc	r23, r23
    41a8:	88 1f       	adc	r24, r24
    41aa:	c2 f7       	brpl	.-16     	; 0x419c <__addsf3x+0x6a>
    41ac:	0e c0       	rjmp	.+28     	; 0x41ca <__addsf3x+0x98>
    41ae:	ba 0f       	add	r27, r26
    41b0:	62 1f       	adc	r22, r18
    41b2:	73 1f       	adc	r23, r19
    41b4:	84 1f       	adc	r24, r20
    41b6:	48 f4       	brcc	.+18     	; 0x41ca <__addsf3x+0x98>
    41b8:	87 95       	ror	r24
    41ba:	77 95       	ror	r23
    41bc:	67 95       	ror	r22
    41be:	b7 95       	ror	r27
    41c0:	f7 95       	ror	r31
    41c2:	9e 3f       	cpi	r25, 0xFE	; 254
    41c4:	08 f0       	brcs	.+2      	; 0x41c8 <__addsf3x+0x96>
    41c6:	b3 cf       	rjmp	.-154    	; 0x412e <__addsf3+0x1e>
    41c8:	93 95       	inc	r25
    41ca:	88 0f       	add	r24, r24
    41cc:	08 f0       	brcs	.+2      	; 0x41d0 <__addsf3x+0x9e>
    41ce:	99 27       	eor	r25, r25
    41d0:	ee 0f       	add	r30, r30
    41d2:	97 95       	ror	r25
    41d4:	87 95       	ror	r24
    41d6:	08 95       	ret

000041d8 <__divsf3>:
    41d8:	0c d0       	rcall	.+24     	; 0x41f2 <__divsf3x>
    41da:	e6 c0       	rjmp	.+460    	; 0x43a8 <__fp_round>
    41dc:	de d0       	rcall	.+444    	; 0x439a <__fp_pscB>
    41de:	40 f0       	brcs	.+16     	; 0x41f0 <__divsf3+0x18>
    41e0:	d5 d0       	rcall	.+426    	; 0x438c <__fp_pscA>
    41e2:	30 f0       	brcs	.+12     	; 0x41f0 <__divsf3+0x18>
    41e4:	21 f4       	brne	.+8      	; 0x41ee <__divsf3+0x16>
    41e6:	5f 3f       	cpi	r21, 0xFF	; 255
    41e8:	19 f0       	breq	.+6      	; 0x41f0 <__divsf3+0x18>
    41ea:	c7 c0       	rjmp	.+398    	; 0x437a <__fp_inf>
    41ec:	51 11       	cpse	r21, r1
    41ee:	10 c1       	rjmp	.+544    	; 0x4410 <__fp_szero>
    41f0:	ca c0       	rjmp	.+404    	; 0x4386 <__fp_nan>

000041f2 <__divsf3x>:
    41f2:	eb d0       	rcall	.+470    	; 0x43ca <__fp_split3>
    41f4:	98 f3       	brcs	.-26     	; 0x41dc <__divsf3+0x4>

000041f6 <__divsf3_pse>:
    41f6:	99 23       	and	r25, r25
    41f8:	c9 f3       	breq	.-14     	; 0x41ec <__divsf3+0x14>
    41fa:	55 23       	and	r21, r21
    41fc:	b1 f3       	breq	.-20     	; 0x41ea <__divsf3+0x12>
    41fe:	95 1b       	sub	r25, r21
    4200:	55 0b       	sbc	r21, r21
    4202:	bb 27       	eor	r27, r27
    4204:	aa 27       	eor	r26, r26
    4206:	62 17       	cp	r22, r18
    4208:	73 07       	cpc	r23, r19
    420a:	84 07       	cpc	r24, r20
    420c:	38 f0       	brcs	.+14     	; 0x421c <__divsf3_pse+0x26>
    420e:	9f 5f       	subi	r25, 0xFF	; 255
    4210:	5f 4f       	sbci	r21, 0xFF	; 255
    4212:	22 0f       	add	r18, r18
    4214:	33 1f       	adc	r19, r19
    4216:	44 1f       	adc	r20, r20
    4218:	aa 1f       	adc	r26, r26
    421a:	a9 f3       	breq	.-22     	; 0x4206 <__divsf3_pse+0x10>
    421c:	33 d0       	rcall	.+102    	; 0x4284 <__divsf3_pse+0x8e>
    421e:	0e 2e       	mov	r0, r30
    4220:	3a f0       	brmi	.+14     	; 0x4230 <__divsf3_pse+0x3a>
    4222:	e0 e8       	ldi	r30, 0x80	; 128
    4224:	30 d0       	rcall	.+96     	; 0x4286 <__divsf3_pse+0x90>
    4226:	91 50       	subi	r25, 0x01	; 1
    4228:	50 40       	sbci	r21, 0x00	; 0
    422a:	e6 95       	lsr	r30
    422c:	00 1c       	adc	r0, r0
    422e:	ca f7       	brpl	.-14     	; 0x4222 <__divsf3_pse+0x2c>
    4230:	29 d0       	rcall	.+82     	; 0x4284 <__divsf3_pse+0x8e>
    4232:	fe 2f       	mov	r31, r30
    4234:	27 d0       	rcall	.+78     	; 0x4284 <__divsf3_pse+0x8e>
    4236:	66 0f       	add	r22, r22
    4238:	77 1f       	adc	r23, r23
    423a:	88 1f       	adc	r24, r24
    423c:	bb 1f       	adc	r27, r27
    423e:	26 17       	cp	r18, r22
    4240:	37 07       	cpc	r19, r23
    4242:	48 07       	cpc	r20, r24
    4244:	ab 07       	cpc	r26, r27
    4246:	b0 e8       	ldi	r27, 0x80	; 128
    4248:	09 f0       	breq	.+2      	; 0x424c <__divsf3_pse+0x56>
    424a:	bb 0b       	sbc	r27, r27
    424c:	80 2d       	mov	r24, r0
    424e:	bf 01       	movw	r22, r30
    4250:	ff 27       	eor	r31, r31
    4252:	93 58       	subi	r25, 0x83	; 131
    4254:	5f 4f       	sbci	r21, 0xFF	; 255
    4256:	2a f0       	brmi	.+10     	; 0x4262 <__divsf3_pse+0x6c>
    4258:	9e 3f       	cpi	r25, 0xFE	; 254
    425a:	51 05       	cpc	r21, r1
    425c:	68 f0       	brcs	.+26     	; 0x4278 <__divsf3_pse+0x82>
    425e:	8d c0       	rjmp	.+282    	; 0x437a <__fp_inf>
    4260:	d7 c0       	rjmp	.+430    	; 0x4410 <__fp_szero>
    4262:	5f 3f       	cpi	r21, 0xFF	; 255
    4264:	ec f3       	brlt	.-6      	; 0x4260 <__divsf3_pse+0x6a>
    4266:	98 3e       	cpi	r25, 0xE8	; 232
    4268:	dc f3       	brlt	.-10     	; 0x4260 <__divsf3_pse+0x6a>
    426a:	86 95       	lsr	r24
    426c:	77 95       	ror	r23
    426e:	67 95       	ror	r22
    4270:	b7 95       	ror	r27
    4272:	f7 95       	ror	r31
    4274:	9f 5f       	subi	r25, 0xFF	; 255
    4276:	c9 f7       	brne	.-14     	; 0x426a <__divsf3_pse+0x74>
    4278:	88 0f       	add	r24, r24
    427a:	91 1d       	adc	r25, r1
    427c:	96 95       	lsr	r25
    427e:	87 95       	ror	r24
    4280:	97 f9       	bld	r25, 7
    4282:	08 95       	ret
    4284:	e1 e0       	ldi	r30, 0x01	; 1
    4286:	66 0f       	add	r22, r22
    4288:	77 1f       	adc	r23, r23
    428a:	88 1f       	adc	r24, r24
    428c:	bb 1f       	adc	r27, r27
    428e:	62 17       	cp	r22, r18
    4290:	73 07       	cpc	r23, r19
    4292:	84 07       	cpc	r24, r20
    4294:	ba 07       	cpc	r27, r26
    4296:	20 f0       	brcs	.+8      	; 0x42a0 <__divsf3_pse+0xaa>
    4298:	62 1b       	sub	r22, r18
    429a:	73 0b       	sbc	r23, r19
    429c:	84 0b       	sbc	r24, r20
    429e:	ba 0b       	sbc	r27, r26
    42a0:	ee 1f       	adc	r30, r30
    42a2:	88 f7       	brcc	.-30     	; 0x4286 <__divsf3_pse+0x90>
    42a4:	e0 95       	com	r30
    42a6:	08 95       	ret

000042a8 <__fixunssfsi>:
    42a8:	98 d0       	rcall	.+304    	; 0x43da <__fp_splitA>
    42aa:	88 f0       	brcs	.+34     	; 0x42ce <__fixunssfsi+0x26>
    42ac:	9f 57       	subi	r25, 0x7F	; 127
    42ae:	90 f0       	brcs	.+36     	; 0x42d4 <__fixunssfsi+0x2c>
    42b0:	b9 2f       	mov	r27, r25
    42b2:	99 27       	eor	r25, r25
    42b4:	b7 51       	subi	r27, 0x17	; 23
    42b6:	a0 f0       	brcs	.+40     	; 0x42e0 <__fixunssfsi+0x38>
    42b8:	d1 f0       	breq	.+52     	; 0x42ee <__fixunssfsi+0x46>
    42ba:	66 0f       	add	r22, r22
    42bc:	77 1f       	adc	r23, r23
    42be:	88 1f       	adc	r24, r24
    42c0:	99 1f       	adc	r25, r25
    42c2:	1a f0       	brmi	.+6      	; 0x42ca <__fixunssfsi+0x22>
    42c4:	ba 95       	dec	r27
    42c6:	c9 f7       	brne	.-14     	; 0x42ba <__fixunssfsi+0x12>
    42c8:	12 c0       	rjmp	.+36     	; 0x42ee <__fixunssfsi+0x46>
    42ca:	b1 30       	cpi	r27, 0x01	; 1
    42cc:	81 f0       	breq	.+32     	; 0x42ee <__fixunssfsi+0x46>
    42ce:	9f d0       	rcall	.+318    	; 0x440e <__fp_zero>
    42d0:	b1 e0       	ldi	r27, 0x01	; 1
    42d2:	08 95       	ret
    42d4:	9c c0       	rjmp	.+312    	; 0x440e <__fp_zero>
    42d6:	67 2f       	mov	r22, r23
    42d8:	78 2f       	mov	r23, r24
    42da:	88 27       	eor	r24, r24
    42dc:	b8 5f       	subi	r27, 0xF8	; 248
    42de:	39 f0       	breq	.+14     	; 0x42ee <__fixunssfsi+0x46>
    42e0:	b9 3f       	cpi	r27, 0xF9	; 249
    42e2:	cc f3       	brlt	.-14     	; 0x42d6 <__fixunssfsi+0x2e>
    42e4:	86 95       	lsr	r24
    42e6:	77 95       	ror	r23
    42e8:	67 95       	ror	r22
    42ea:	b3 95       	inc	r27
    42ec:	d9 f7       	brne	.-10     	; 0x42e4 <__fixunssfsi+0x3c>
    42ee:	3e f4       	brtc	.+14     	; 0x42fe <__fixunssfsi+0x56>
    42f0:	90 95       	com	r25
    42f2:	80 95       	com	r24
    42f4:	70 95       	com	r23
    42f6:	61 95       	neg	r22
    42f8:	7f 4f       	sbci	r23, 0xFF	; 255
    42fa:	8f 4f       	sbci	r24, 0xFF	; 255
    42fc:	9f 4f       	sbci	r25, 0xFF	; 255
    42fe:	08 95       	ret

00004300 <__floatunsisf>:
    4300:	e8 94       	clt
    4302:	09 c0       	rjmp	.+18     	; 0x4316 <__floatsisf+0x12>

00004304 <__floatsisf>:
    4304:	97 fb       	bst	r25, 7
    4306:	3e f4       	brtc	.+14     	; 0x4316 <__floatsisf+0x12>
    4308:	90 95       	com	r25
    430a:	80 95       	com	r24
    430c:	70 95       	com	r23
    430e:	61 95       	neg	r22
    4310:	7f 4f       	sbci	r23, 0xFF	; 255
    4312:	8f 4f       	sbci	r24, 0xFF	; 255
    4314:	9f 4f       	sbci	r25, 0xFF	; 255
    4316:	99 23       	and	r25, r25
    4318:	a9 f0       	breq	.+42     	; 0x4344 <__floatsisf+0x40>
    431a:	f9 2f       	mov	r31, r25
    431c:	96 e9       	ldi	r25, 0x96	; 150
    431e:	bb 27       	eor	r27, r27
    4320:	93 95       	inc	r25
    4322:	f6 95       	lsr	r31
    4324:	87 95       	ror	r24
    4326:	77 95       	ror	r23
    4328:	67 95       	ror	r22
    432a:	b7 95       	ror	r27
    432c:	f1 11       	cpse	r31, r1
    432e:	f8 cf       	rjmp	.-16     	; 0x4320 <__floatsisf+0x1c>
    4330:	fa f4       	brpl	.+62     	; 0x4370 <__floatsisf+0x6c>
    4332:	bb 0f       	add	r27, r27
    4334:	11 f4       	brne	.+4      	; 0x433a <__floatsisf+0x36>
    4336:	60 ff       	sbrs	r22, 0
    4338:	1b c0       	rjmp	.+54     	; 0x4370 <__floatsisf+0x6c>
    433a:	6f 5f       	subi	r22, 0xFF	; 255
    433c:	7f 4f       	sbci	r23, 0xFF	; 255
    433e:	8f 4f       	sbci	r24, 0xFF	; 255
    4340:	9f 4f       	sbci	r25, 0xFF	; 255
    4342:	16 c0       	rjmp	.+44     	; 0x4370 <__floatsisf+0x6c>
    4344:	88 23       	and	r24, r24
    4346:	11 f0       	breq	.+4      	; 0x434c <__floatsisf+0x48>
    4348:	96 e9       	ldi	r25, 0x96	; 150
    434a:	11 c0       	rjmp	.+34     	; 0x436e <__floatsisf+0x6a>
    434c:	77 23       	and	r23, r23
    434e:	21 f0       	breq	.+8      	; 0x4358 <__floatsisf+0x54>
    4350:	9e e8       	ldi	r25, 0x8E	; 142
    4352:	87 2f       	mov	r24, r23
    4354:	76 2f       	mov	r23, r22
    4356:	05 c0       	rjmp	.+10     	; 0x4362 <__floatsisf+0x5e>
    4358:	66 23       	and	r22, r22
    435a:	71 f0       	breq	.+28     	; 0x4378 <__floatsisf+0x74>
    435c:	96 e8       	ldi	r25, 0x86	; 134
    435e:	86 2f       	mov	r24, r22
    4360:	70 e0       	ldi	r23, 0x00	; 0
    4362:	60 e0       	ldi	r22, 0x00	; 0
    4364:	2a f0       	brmi	.+10     	; 0x4370 <__floatsisf+0x6c>
    4366:	9a 95       	dec	r25
    4368:	66 0f       	add	r22, r22
    436a:	77 1f       	adc	r23, r23
    436c:	88 1f       	adc	r24, r24
    436e:	da f7       	brpl	.-10     	; 0x4366 <__floatsisf+0x62>
    4370:	88 0f       	add	r24, r24
    4372:	96 95       	lsr	r25
    4374:	87 95       	ror	r24
    4376:	97 f9       	bld	r25, 7
    4378:	08 95       	ret

0000437a <__fp_inf>:
    437a:	97 f9       	bld	r25, 7
    437c:	9f 67       	ori	r25, 0x7F	; 127
    437e:	80 e8       	ldi	r24, 0x80	; 128
    4380:	70 e0       	ldi	r23, 0x00	; 0
    4382:	60 e0       	ldi	r22, 0x00	; 0
    4384:	08 95       	ret

00004386 <__fp_nan>:
    4386:	9f ef       	ldi	r25, 0xFF	; 255
    4388:	80 ec       	ldi	r24, 0xC0	; 192
    438a:	08 95       	ret

0000438c <__fp_pscA>:
    438c:	00 24       	eor	r0, r0
    438e:	0a 94       	dec	r0
    4390:	16 16       	cp	r1, r22
    4392:	17 06       	cpc	r1, r23
    4394:	18 06       	cpc	r1, r24
    4396:	09 06       	cpc	r0, r25
    4398:	08 95       	ret

0000439a <__fp_pscB>:
    439a:	00 24       	eor	r0, r0
    439c:	0a 94       	dec	r0
    439e:	12 16       	cp	r1, r18
    43a0:	13 06       	cpc	r1, r19
    43a2:	14 06       	cpc	r1, r20
    43a4:	05 06       	cpc	r0, r21
    43a6:	08 95       	ret

000043a8 <__fp_round>:
    43a8:	09 2e       	mov	r0, r25
    43aa:	03 94       	inc	r0
    43ac:	00 0c       	add	r0, r0
    43ae:	11 f4       	brne	.+4      	; 0x43b4 <__fp_round+0xc>
    43b0:	88 23       	and	r24, r24
    43b2:	52 f0       	brmi	.+20     	; 0x43c8 <__fp_round+0x20>
    43b4:	bb 0f       	add	r27, r27
    43b6:	40 f4       	brcc	.+16     	; 0x43c8 <__fp_round+0x20>
    43b8:	bf 2b       	or	r27, r31
    43ba:	11 f4       	brne	.+4      	; 0x43c0 <__fp_round+0x18>
    43bc:	60 ff       	sbrs	r22, 0
    43be:	04 c0       	rjmp	.+8      	; 0x43c8 <__fp_round+0x20>
    43c0:	6f 5f       	subi	r22, 0xFF	; 255
    43c2:	7f 4f       	sbci	r23, 0xFF	; 255
    43c4:	8f 4f       	sbci	r24, 0xFF	; 255
    43c6:	9f 4f       	sbci	r25, 0xFF	; 255
    43c8:	08 95       	ret

000043ca <__fp_split3>:
    43ca:	57 fd       	sbrc	r21, 7
    43cc:	90 58       	subi	r25, 0x80	; 128
    43ce:	44 0f       	add	r20, r20
    43d0:	55 1f       	adc	r21, r21
    43d2:	59 f0       	breq	.+22     	; 0x43ea <__fp_splitA+0x10>
    43d4:	5f 3f       	cpi	r21, 0xFF	; 255
    43d6:	71 f0       	breq	.+28     	; 0x43f4 <__fp_splitA+0x1a>
    43d8:	47 95       	ror	r20

000043da <__fp_splitA>:
    43da:	88 0f       	add	r24, r24
    43dc:	97 fb       	bst	r25, 7
    43de:	99 1f       	adc	r25, r25
    43e0:	61 f0       	breq	.+24     	; 0x43fa <__fp_splitA+0x20>
    43e2:	9f 3f       	cpi	r25, 0xFF	; 255
    43e4:	79 f0       	breq	.+30     	; 0x4404 <__fp_splitA+0x2a>
    43e6:	87 95       	ror	r24
    43e8:	08 95       	ret
    43ea:	12 16       	cp	r1, r18
    43ec:	13 06       	cpc	r1, r19
    43ee:	14 06       	cpc	r1, r20
    43f0:	55 1f       	adc	r21, r21
    43f2:	f2 cf       	rjmp	.-28     	; 0x43d8 <__fp_split3+0xe>
    43f4:	46 95       	lsr	r20
    43f6:	f1 df       	rcall	.-30     	; 0x43da <__fp_splitA>
    43f8:	08 c0       	rjmp	.+16     	; 0x440a <__fp_splitA+0x30>
    43fa:	16 16       	cp	r1, r22
    43fc:	17 06       	cpc	r1, r23
    43fe:	18 06       	cpc	r1, r24
    4400:	99 1f       	adc	r25, r25
    4402:	f1 cf       	rjmp	.-30     	; 0x43e6 <__fp_splitA+0xc>
    4404:	86 95       	lsr	r24
    4406:	71 05       	cpc	r23, r1
    4408:	61 05       	cpc	r22, r1
    440a:	08 94       	sec
    440c:	08 95       	ret

0000440e <__fp_zero>:
    440e:	e8 94       	clt

00004410 <__fp_szero>:
    4410:	bb 27       	eor	r27, r27
    4412:	66 27       	eor	r22, r22
    4414:	77 27       	eor	r23, r23
    4416:	cb 01       	movw	r24, r22
    4418:	97 f9       	bld	r25, 7
    441a:	08 95       	ret

0000441c <__mulsf3>:
    441c:	0b d0       	rcall	.+22     	; 0x4434 <__mulsf3x>
    441e:	c4 cf       	rjmp	.-120    	; 0x43a8 <__fp_round>
    4420:	b5 df       	rcall	.-150    	; 0x438c <__fp_pscA>
    4422:	28 f0       	brcs	.+10     	; 0x442e <__mulsf3+0x12>
    4424:	ba df       	rcall	.-140    	; 0x439a <__fp_pscB>
    4426:	18 f0       	brcs	.+6      	; 0x442e <__mulsf3+0x12>
    4428:	95 23       	and	r25, r21
    442a:	09 f0       	breq	.+2      	; 0x442e <__mulsf3+0x12>
    442c:	a6 cf       	rjmp	.-180    	; 0x437a <__fp_inf>
    442e:	ab cf       	rjmp	.-170    	; 0x4386 <__fp_nan>
    4430:	11 24       	eor	r1, r1
    4432:	ee cf       	rjmp	.-36     	; 0x4410 <__fp_szero>

00004434 <__mulsf3x>:
    4434:	ca df       	rcall	.-108    	; 0x43ca <__fp_split3>
    4436:	a0 f3       	brcs	.-24     	; 0x4420 <__mulsf3+0x4>

00004438 <__mulsf3_pse>:
    4438:	95 9f       	mul	r25, r21
    443a:	d1 f3       	breq	.-12     	; 0x4430 <__mulsf3+0x14>
    443c:	95 0f       	add	r25, r21
    443e:	50 e0       	ldi	r21, 0x00	; 0
    4440:	55 1f       	adc	r21, r21
    4442:	62 9f       	mul	r22, r18
    4444:	f0 01       	movw	r30, r0
    4446:	72 9f       	mul	r23, r18
    4448:	bb 27       	eor	r27, r27
    444a:	f0 0d       	add	r31, r0
    444c:	b1 1d       	adc	r27, r1
    444e:	63 9f       	mul	r22, r19
    4450:	aa 27       	eor	r26, r26
    4452:	f0 0d       	add	r31, r0
    4454:	b1 1d       	adc	r27, r1
    4456:	aa 1f       	adc	r26, r26
    4458:	64 9f       	mul	r22, r20
    445a:	66 27       	eor	r22, r22
    445c:	b0 0d       	add	r27, r0
    445e:	a1 1d       	adc	r26, r1
    4460:	66 1f       	adc	r22, r22
    4462:	82 9f       	mul	r24, r18
    4464:	22 27       	eor	r18, r18
    4466:	b0 0d       	add	r27, r0
    4468:	a1 1d       	adc	r26, r1
    446a:	62 1f       	adc	r22, r18
    446c:	73 9f       	mul	r23, r19
    446e:	b0 0d       	add	r27, r0
    4470:	a1 1d       	adc	r26, r1
    4472:	62 1f       	adc	r22, r18
    4474:	83 9f       	mul	r24, r19
    4476:	a0 0d       	add	r26, r0
    4478:	61 1d       	adc	r22, r1
    447a:	22 1f       	adc	r18, r18
    447c:	74 9f       	mul	r23, r20
    447e:	33 27       	eor	r19, r19
    4480:	a0 0d       	add	r26, r0
    4482:	61 1d       	adc	r22, r1
    4484:	23 1f       	adc	r18, r19
    4486:	84 9f       	mul	r24, r20
    4488:	60 0d       	add	r22, r0
    448a:	21 1d       	adc	r18, r1
    448c:	82 2f       	mov	r24, r18
    448e:	76 2f       	mov	r23, r22
    4490:	6a 2f       	mov	r22, r26
    4492:	11 24       	eor	r1, r1
    4494:	9f 57       	subi	r25, 0x7F	; 127
    4496:	50 40       	sbci	r21, 0x00	; 0
    4498:	8a f0       	brmi	.+34     	; 0x44bc <__mulsf3_pse+0x84>
    449a:	e1 f0       	breq	.+56     	; 0x44d4 <__mulsf3_pse+0x9c>
    449c:	88 23       	and	r24, r24
    449e:	4a f0       	brmi	.+18     	; 0x44b2 <__mulsf3_pse+0x7a>
    44a0:	ee 0f       	add	r30, r30
    44a2:	ff 1f       	adc	r31, r31
    44a4:	bb 1f       	adc	r27, r27
    44a6:	66 1f       	adc	r22, r22
    44a8:	77 1f       	adc	r23, r23
    44aa:	88 1f       	adc	r24, r24
    44ac:	91 50       	subi	r25, 0x01	; 1
    44ae:	50 40       	sbci	r21, 0x00	; 0
    44b0:	a9 f7       	brne	.-22     	; 0x449c <__mulsf3_pse+0x64>
    44b2:	9e 3f       	cpi	r25, 0xFE	; 254
    44b4:	51 05       	cpc	r21, r1
    44b6:	70 f0       	brcs	.+28     	; 0x44d4 <__mulsf3_pse+0x9c>
    44b8:	60 cf       	rjmp	.-320    	; 0x437a <__fp_inf>
    44ba:	aa cf       	rjmp	.-172    	; 0x4410 <__fp_szero>
    44bc:	5f 3f       	cpi	r21, 0xFF	; 255
    44be:	ec f3       	brlt	.-6      	; 0x44ba <__mulsf3_pse+0x82>
    44c0:	98 3e       	cpi	r25, 0xE8	; 232
    44c2:	dc f3       	brlt	.-10     	; 0x44ba <__mulsf3_pse+0x82>
    44c4:	86 95       	lsr	r24
    44c6:	77 95       	ror	r23
    44c8:	67 95       	ror	r22
    44ca:	b7 95       	ror	r27
    44cc:	f7 95       	ror	r31
    44ce:	e7 95       	ror	r30
    44d0:	9f 5f       	subi	r25, 0xFF	; 255
    44d2:	c1 f7       	brne	.-16     	; 0x44c4 <__mulsf3_pse+0x8c>
    44d4:	fe 2b       	or	r31, r30
    44d6:	88 0f       	add	r24, r24
    44d8:	91 1d       	adc	r25, r1
    44da:	96 95       	lsr	r25
    44dc:	87 95       	ror	r24
    44de:	97 f9       	bld	r25, 7
    44e0:	08 95       	ret

000044e2 <__tablejump2__>:
    44e2:	ee 0f       	add	r30, r30
    44e4:	ff 1f       	adc	r31, r31
    44e6:	88 1f       	adc	r24, r24
    44e8:	8b bf       	out	0x3b, r24	; 59
    44ea:	07 90       	elpm	r0, Z+
    44ec:	f6 91       	elpm	r31, Z
    44ee:	e0 2d       	mov	r30, r0
    44f0:	19 94       	eijmp

000044f2 <calloc>:
    44f2:	0f 93       	push	r16
    44f4:	1f 93       	push	r17
    44f6:	cf 93       	push	r28
    44f8:	df 93       	push	r29
    44fa:	86 9f       	mul	r24, r22
    44fc:	80 01       	movw	r16, r0
    44fe:	87 9f       	mul	r24, r23
    4500:	10 0d       	add	r17, r0
    4502:	96 9f       	mul	r25, r22
    4504:	10 0d       	add	r17, r0
    4506:	11 24       	eor	r1, r1
    4508:	c8 01       	movw	r24, r16
    450a:	0d d0       	rcall	.+26     	; 0x4526 <malloc>
    450c:	ec 01       	movw	r28, r24
    450e:	00 97       	sbiw	r24, 0x00	; 0
    4510:	21 f0       	breq	.+8      	; 0x451a <calloc+0x28>
    4512:	a8 01       	movw	r20, r16
    4514:	60 e0       	ldi	r22, 0x00	; 0
    4516:	70 e0       	ldi	r23, 0x00	; 0
    4518:	34 d1       	rcall	.+616    	; 0x4782 <memset>
    451a:	ce 01       	movw	r24, r28
    451c:	df 91       	pop	r29
    451e:	cf 91       	pop	r28
    4520:	1f 91       	pop	r17
    4522:	0f 91       	pop	r16
    4524:	08 95       	ret

00004526 <malloc>:
    4526:	0f 93       	push	r16
    4528:	1f 93       	push	r17
    452a:	cf 93       	push	r28
    452c:	df 93       	push	r29
    452e:	82 30       	cpi	r24, 0x02	; 2
    4530:	91 05       	cpc	r25, r1
    4532:	10 f4       	brcc	.+4      	; 0x4538 <malloc+0x12>
    4534:	82 e0       	ldi	r24, 0x02	; 2
    4536:	90 e0       	ldi	r25, 0x00	; 0
    4538:	e0 91 a3 18 	lds	r30, 0x18A3	; 0x8018a3 <__flp>
    453c:	f0 91 a4 18 	lds	r31, 0x18A4	; 0x8018a4 <__flp+0x1>
    4540:	20 e0       	ldi	r18, 0x00	; 0
    4542:	30 e0       	ldi	r19, 0x00	; 0
    4544:	a0 e0       	ldi	r26, 0x00	; 0
    4546:	b0 e0       	ldi	r27, 0x00	; 0
    4548:	30 97       	sbiw	r30, 0x00	; 0
    454a:	19 f1       	breq	.+70     	; 0x4592 <malloc+0x6c>
    454c:	40 81       	ld	r20, Z
    454e:	51 81       	ldd	r21, Z+1	; 0x01
    4550:	02 81       	ldd	r16, Z+2	; 0x02
    4552:	13 81       	ldd	r17, Z+3	; 0x03
    4554:	48 17       	cp	r20, r24
    4556:	59 07       	cpc	r21, r25
    4558:	c8 f0       	brcs	.+50     	; 0x458c <malloc+0x66>
    455a:	84 17       	cp	r24, r20
    455c:	95 07       	cpc	r25, r21
    455e:	69 f4       	brne	.+26     	; 0x457a <malloc+0x54>
    4560:	10 97       	sbiw	r26, 0x00	; 0
    4562:	31 f0       	breq	.+12     	; 0x4570 <malloc+0x4a>
    4564:	12 96       	adiw	r26, 0x02	; 2
    4566:	0c 93       	st	X, r16
    4568:	12 97       	sbiw	r26, 0x02	; 2
    456a:	13 96       	adiw	r26, 0x03	; 3
    456c:	1c 93       	st	X, r17
    456e:	27 c0       	rjmp	.+78     	; 0x45be <malloc+0x98>
    4570:	00 93 a3 18 	sts	0x18A3, r16	; 0x8018a3 <__flp>
    4574:	10 93 a4 18 	sts	0x18A4, r17	; 0x8018a4 <__flp+0x1>
    4578:	22 c0       	rjmp	.+68     	; 0x45be <malloc+0x98>
    457a:	21 15       	cp	r18, r1
    457c:	31 05       	cpc	r19, r1
    457e:	19 f0       	breq	.+6      	; 0x4586 <malloc+0x60>
    4580:	42 17       	cp	r20, r18
    4582:	53 07       	cpc	r21, r19
    4584:	18 f4       	brcc	.+6      	; 0x458c <malloc+0x66>
    4586:	9a 01       	movw	r18, r20
    4588:	bd 01       	movw	r22, r26
    458a:	ef 01       	movw	r28, r30
    458c:	df 01       	movw	r26, r30
    458e:	f8 01       	movw	r30, r16
    4590:	db cf       	rjmp	.-74     	; 0x4548 <malloc+0x22>
    4592:	21 15       	cp	r18, r1
    4594:	31 05       	cpc	r19, r1
    4596:	f9 f0       	breq	.+62     	; 0x45d6 <malloc+0xb0>
    4598:	28 1b       	sub	r18, r24
    459a:	39 0b       	sbc	r19, r25
    459c:	24 30       	cpi	r18, 0x04	; 4
    459e:	31 05       	cpc	r19, r1
    45a0:	80 f4       	brcc	.+32     	; 0x45c2 <malloc+0x9c>
    45a2:	8a 81       	ldd	r24, Y+2	; 0x02
    45a4:	9b 81       	ldd	r25, Y+3	; 0x03
    45a6:	61 15       	cp	r22, r1
    45a8:	71 05       	cpc	r23, r1
    45aa:	21 f0       	breq	.+8      	; 0x45b4 <malloc+0x8e>
    45ac:	fb 01       	movw	r30, r22
    45ae:	93 83       	std	Z+3, r25	; 0x03
    45b0:	82 83       	std	Z+2, r24	; 0x02
    45b2:	04 c0       	rjmp	.+8      	; 0x45bc <malloc+0x96>
    45b4:	90 93 a4 18 	sts	0x18A4, r25	; 0x8018a4 <__flp+0x1>
    45b8:	80 93 a3 18 	sts	0x18A3, r24	; 0x8018a3 <__flp>
    45bc:	fe 01       	movw	r30, r28
    45be:	32 96       	adiw	r30, 0x02	; 2
    45c0:	44 c0       	rjmp	.+136    	; 0x464a <malloc+0x124>
    45c2:	fe 01       	movw	r30, r28
    45c4:	e2 0f       	add	r30, r18
    45c6:	f3 1f       	adc	r31, r19
    45c8:	81 93       	st	Z+, r24
    45ca:	91 93       	st	Z+, r25
    45cc:	22 50       	subi	r18, 0x02	; 2
    45ce:	31 09       	sbc	r19, r1
    45d0:	39 83       	std	Y+1, r19	; 0x01
    45d2:	28 83       	st	Y, r18
    45d4:	3a c0       	rjmp	.+116    	; 0x464a <malloc+0x124>
    45d6:	20 91 a1 18 	lds	r18, 0x18A1	; 0x8018a1 <__brkval>
    45da:	30 91 a2 18 	lds	r19, 0x18A2	; 0x8018a2 <__brkval+0x1>
    45de:	23 2b       	or	r18, r19
    45e0:	41 f4       	brne	.+16     	; 0x45f2 <malloc+0xcc>
    45e2:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    45e6:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    45ea:	30 93 a2 18 	sts	0x18A2, r19	; 0x8018a2 <__brkval+0x1>
    45ee:	20 93 a1 18 	sts	0x18A1, r18	; 0x8018a1 <__brkval>
    45f2:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    45f6:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    45fa:	21 15       	cp	r18, r1
    45fc:	31 05       	cpc	r19, r1
    45fe:	41 f4       	brne	.+16     	; 0x4610 <malloc+0xea>
    4600:	2d b7       	in	r18, 0x3d	; 61
    4602:	3e b7       	in	r19, 0x3e	; 62
    4604:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    4608:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    460c:	24 1b       	sub	r18, r20
    460e:	35 0b       	sbc	r19, r21
    4610:	e0 91 a1 18 	lds	r30, 0x18A1	; 0x8018a1 <__brkval>
    4614:	f0 91 a2 18 	lds	r31, 0x18A2	; 0x8018a2 <__brkval+0x1>
    4618:	e2 17       	cp	r30, r18
    461a:	f3 07       	cpc	r31, r19
    461c:	a0 f4       	brcc	.+40     	; 0x4646 <malloc+0x120>
    461e:	2e 1b       	sub	r18, r30
    4620:	3f 0b       	sbc	r19, r31
    4622:	28 17       	cp	r18, r24
    4624:	39 07       	cpc	r19, r25
    4626:	78 f0       	brcs	.+30     	; 0x4646 <malloc+0x120>
    4628:	ac 01       	movw	r20, r24
    462a:	4e 5f       	subi	r20, 0xFE	; 254
    462c:	5f 4f       	sbci	r21, 0xFF	; 255
    462e:	24 17       	cp	r18, r20
    4630:	35 07       	cpc	r19, r21
    4632:	48 f0       	brcs	.+18     	; 0x4646 <malloc+0x120>
    4634:	4e 0f       	add	r20, r30
    4636:	5f 1f       	adc	r21, r31
    4638:	50 93 a2 18 	sts	0x18A2, r21	; 0x8018a2 <__brkval+0x1>
    463c:	40 93 a1 18 	sts	0x18A1, r20	; 0x8018a1 <__brkval>
    4640:	81 93       	st	Z+, r24
    4642:	91 93       	st	Z+, r25
    4644:	02 c0       	rjmp	.+4      	; 0x464a <malloc+0x124>
    4646:	e0 e0       	ldi	r30, 0x00	; 0
    4648:	f0 e0       	ldi	r31, 0x00	; 0
    464a:	cf 01       	movw	r24, r30
    464c:	df 91       	pop	r29
    464e:	cf 91       	pop	r28
    4650:	1f 91       	pop	r17
    4652:	0f 91       	pop	r16
    4654:	08 95       	ret

00004656 <free>:
    4656:	cf 93       	push	r28
    4658:	df 93       	push	r29
    465a:	00 97       	sbiw	r24, 0x00	; 0
    465c:	09 f4       	brne	.+2      	; 0x4660 <free+0xa>
    465e:	81 c0       	rjmp	.+258    	; 0x4762 <free+0x10c>
    4660:	fc 01       	movw	r30, r24
    4662:	32 97       	sbiw	r30, 0x02	; 2
    4664:	13 82       	std	Z+3, r1	; 0x03
    4666:	12 82       	std	Z+2, r1	; 0x02
    4668:	a0 91 a3 18 	lds	r26, 0x18A3	; 0x8018a3 <__flp>
    466c:	b0 91 a4 18 	lds	r27, 0x18A4	; 0x8018a4 <__flp+0x1>
    4670:	10 97       	sbiw	r26, 0x00	; 0
    4672:	81 f4       	brne	.+32     	; 0x4694 <free+0x3e>
    4674:	20 81       	ld	r18, Z
    4676:	31 81       	ldd	r19, Z+1	; 0x01
    4678:	82 0f       	add	r24, r18
    467a:	93 1f       	adc	r25, r19
    467c:	20 91 a1 18 	lds	r18, 0x18A1	; 0x8018a1 <__brkval>
    4680:	30 91 a2 18 	lds	r19, 0x18A2	; 0x8018a2 <__brkval+0x1>
    4684:	28 17       	cp	r18, r24
    4686:	39 07       	cpc	r19, r25
    4688:	51 f5       	brne	.+84     	; 0x46de <free+0x88>
    468a:	f0 93 a2 18 	sts	0x18A2, r31	; 0x8018a2 <__brkval+0x1>
    468e:	e0 93 a1 18 	sts	0x18A1, r30	; 0x8018a1 <__brkval>
    4692:	67 c0       	rjmp	.+206    	; 0x4762 <free+0x10c>
    4694:	ed 01       	movw	r28, r26
    4696:	20 e0       	ldi	r18, 0x00	; 0
    4698:	30 e0       	ldi	r19, 0x00	; 0
    469a:	ce 17       	cp	r28, r30
    469c:	df 07       	cpc	r29, r31
    469e:	40 f4       	brcc	.+16     	; 0x46b0 <free+0x5a>
    46a0:	4a 81       	ldd	r20, Y+2	; 0x02
    46a2:	5b 81       	ldd	r21, Y+3	; 0x03
    46a4:	9e 01       	movw	r18, r28
    46a6:	41 15       	cp	r20, r1
    46a8:	51 05       	cpc	r21, r1
    46aa:	f1 f0       	breq	.+60     	; 0x46e8 <free+0x92>
    46ac:	ea 01       	movw	r28, r20
    46ae:	f5 cf       	rjmp	.-22     	; 0x469a <free+0x44>
    46b0:	d3 83       	std	Z+3, r29	; 0x03
    46b2:	c2 83       	std	Z+2, r28	; 0x02
    46b4:	40 81       	ld	r20, Z
    46b6:	51 81       	ldd	r21, Z+1	; 0x01
    46b8:	84 0f       	add	r24, r20
    46ba:	95 1f       	adc	r25, r21
    46bc:	c8 17       	cp	r28, r24
    46be:	d9 07       	cpc	r29, r25
    46c0:	59 f4       	brne	.+22     	; 0x46d8 <free+0x82>
    46c2:	88 81       	ld	r24, Y
    46c4:	99 81       	ldd	r25, Y+1	; 0x01
    46c6:	84 0f       	add	r24, r20
    46c8:	95 1f       	adc	r25, r21
    46ca:	02 96       	adiw	r24, 0x02	; 2
    46cc:	91 83       	std	Z+1, r25	; 0x01
    46ce:	80 83       	st	Z, r24
    46d0:	8a 81       	ldd	r24, Y+2	; 0x02
    46d2:	9b 81       	ldd	r25, Y+3	; 0x03
    46d4:	93 83       	std	Z+3, r25	; 0x03
    46d6:	82 83       	std	Z+2, r24	; 0x02
    46d8:	21 15       	cp	r18, r1
    46da:	31 05       	cpc	r19, r1
    46dc:	29 f4       	brne	.+10     	; 0x46e8 <free+0x92>
    46de:	f0 93 a4 18 	sts	0x18A4, r31	; 0x8018a4 <__flp+0x1>
    46e2:	e0 93 a3 18 	sts	0x18A3, r30	; 0x8018a3 <__flp>
    46e6:	3d c0       	rjmp	.+122    	; 0x4762 <free+0x10c>
    46e8:	e9 01       	movw	r28, r18
    46ea:	fb 83       	std	Y+3, r31	; 0x03
    46ec:	ea 83       	std	Y+2, r30	; 0x02
    46ee:	49 91       	ld	r20, Y+
    46f0:	59 91       	ld	r21, Y+
    46f2:	c4 0f       	add	r28, r20
    46f4:	d5 1f       	adc	r29, r21
    46f6:	ec 17       	cp	r30, r28
    46f8:	fd 07       	cpc	r31, r29
    46fa:	61 f4       	brne	.+24     	; 0x4714 <free+0xbe>
    46fc:	80 81       	ld	r24, Z
    46fe:	91 81       	ldd	r25, Z+1	; 0x01
    4700:	84 0f       	add	r24, r20
    4702:	95 1f       	adc	r25, r21
    4704:	02 96       	adiw	r24, 0x02	; 2
    4706:	e9 01       	movw	r28, r18
    4708:	99 83       	std	Y+1, r25	; 0x01
    470a:	88 83       	st	Y, r24
    470c:	82 81       	ldd	r24, Z+2	; 0x02
    470e:	93 81       	ldd	r25, Z+3	; 0x03
    4710:	9b 83       	std	Y+3, r25	; 0x03
    4712:	8a 83       	std	Y+2, r24	; 0x02
    4714:	e0 e0       	ldi	r30, 0x00	; 0
    4716:	f0 e0       	ldi	r31, 0x00	; 0
    4718:	12 96       	adiw	r26, 0x02	; 2
    471a:	8d 91       	ld	r24, X+
    471c:	9c 91       	ld	r25, X
    471e:	13 97       	sbiw	r26, 0x03	; 3
    4720:	00 97       	sbiw	r24, 0x00	; 0
    4722:	19 f0       	breq	.+6      	; 0x472a <free+0xd4>
    4724:	fd 01       	movw	r30, r26
    4726:	dc 01       	movw	r26, r24
    4728:	f7 cf       	rjmp	.-18     	; 0x4718 <free+0xc2>
    472a:	8d 91       	ld	r24, X+
    472c:	9c 91       	ld	r25, X
    472e:	11 97       	sbiw	r26, 0x01	; 1
    4730:	9d 01       	movw	r18, r26
    4732:	2e 5f       	subi	r18, 0xFE	; 254
    4734:	3f 4f       	sbci	r19, 0xFF	; 255
    4736:	82 0f       	add	r24, r18
    4738:	93 1f       	adc	r25, r19
    473a:	20 91 a1 18 	lds	r18, 0x18A1	; 0x8018a1 <__brkval>
    473e:	30 91 a2 18 	lds	r19, 0x18A2	; 0x8018a2 <__brkval+0x1>
    4742:	28 17       	cp	r18, r24
    4744:	39 07       	cpc	r19, r25
    4746:	69 f4       	brne	.+26     	; 0x4762 <free+0x10c>
    4748:	30 97       	sbiw	r30, 0x00	; 0
    474a:	29 f4       	brne	.+10     	; 0x4756 <free+0x100>
    474c:	10 92 a4 18 	sts	0x18A4, r1	; 0x8018a4 <__flp+0x1>
    4750:	10 92 a3 18 	sts	0x18A3, r1	; 0x8018a3 <__flp>
    4754:	02 c0       	rjmp	.+4      	; 0x475a <free+0x104>
    4756:	13 82       	std	Z+3, r1	; 0x03
    4758:	12 82       	std	Z+2, r1	; 0x02
    475a:	b0 93 a2 18 	sts	0x18A2, r27	; 0x8018a2 <__brkval+0x1>
    475e:	a0 93 a1 18 	sts	0x18A1, r26	; 0x8018a1 <__brkval>
    4762:	df 91       	pop	r29
    4764:	cf 91       	pop	r28
    4766:	08 95       	ret

00004768 <abort>:
    4768:	81 e0       	ldi	r24, 0x01	; 1
    476a:	90 e0       	ldi	r25, 0x00	; 0
    476c:	f8 94       	cli
    476e:	7d c3       	rjmp	.+1786   	; 0x4e6a <_exit>

00004770 <memcpy>:
    4770:	fb 01       	movw	r30, r22
    4772:	dc 01       	movw	r26, r24
    4774:	02 c0       	rjmp	.+4      	; 0x477a <memcpy+0xa>
    4776:	01 90       	ld	r0, Z+
    4778:	0d 92       	st	X+, r0
    477a:	41 50       	subi	r20, 0x01	; 1
    477c:	50 40       	sbci	r21, 0x00	; 0
    477e:	d8 f7       	brcc	.-10     	; 0x4776 <memcpy+0x6>
    4780:	08 95       	ret

00004782 <memset>:
    4782:	dc 01       	movw	r26, r24
    4784:	01 c0       	rjmp	.+2      	; 0x4788 <memset+0x6>
    4786:	6d 93       	st	X+, r22
    4788:	41 50       	subi	r20, 0x01	; 1
    478a:	50 40       	sbci	r21, 0x00	; 0
    478c:	e0 f7       	brcc	.-8      	; 0x4786 <memset+0x4>
    478e:	08 95       	ret

00004790 <strcasestr>:
    4790:	fb 01       	movw	r30, r22
    4792:	51 91       	ld	r21, Z+
    4794:	55 23       	and	r21, r21
    4796:	b1 f0       	breq	.+44     	; 0x47c4 <strcasestr+0x34>
    4798:	bf 01       	movw	r22, r30
    479a:	dc 01       	movw	r26, r24
    479c:	05 2e       	mov	r0, r21
    479e:	4d 91       	ld	r20, X+
    47a0:	44 23       	and	r20, r20
    47a2:	69 f0       	breq	.+26     	; 0x47be <strcasestr+0x2e>
    47a4:	10 d0       	rcall	.+32     	; 0x47c6 <strcasestr+0x36>
    47a6:	d9 f7       	brne	.-10     	; 0x479e <strcasestr+0xe>
    47a8:	cd 01       	movw	r24, r26
    47aa:	01 90       	ld	r0, Z+
    47ac:	00 20       	and	r0, r0
    47ae:	49 f0       	breq	.+18     	; 0x47c2 <strcasestr+0x32>
    47b0:	4d 91       	ld	r20, X+
    47b2:	41 11       	cpse	r20, r1
    47b4:	08 d0       	rcall	.+16     	; 0x47c6 <strcasestr+0x36>
    47b6:	c9 f3       	breq	.-14     	; 0x47aa <strcasestr+0x1a>
    47b8:	fb 01       	movw	r30, r22
    47ba:	41 11       	cpse	r20, r1
    47bc:	ee cf       	rjmp	.-36     	; 0x479a <strcasestr+0xa>
    47be:	81 e0       	ldi	r24, 0x01	; 1
    47c0:	90 e0       	ldi	r25, 0x00	; 0
    47c2:	01 97       	sbiw	r24, 0x01	; 1
    47c4:	08 95       	ret
    47c6:	40 25       	eor	r20, r0
    47c8:	39 f0       	breq	.+14     	; 0x47d8 <strcasestr+0x48>
    47ca:	40 32       	cpi	r20, 0x20	; 32
    47cc:	29 f4       	brne	.+10     	; 0x47d8 <strcasestr+0x48>
    47ce:	40 29       	or	r20, r0
    47d0:	4b 57       	subi	r20, 0x7B	; 123
    47d2:	46 5e       	subi	r20, 0xE6	; 230
    47d4:	08 f0       	brcs	.+2      	; 0x47d8 <strcasestr+0x48>
    47d6:	18 94       	sez
    47d8:	08 95       	ret

000047da <strcat>:
    47da:	fb 01       	movw	r30, r22
    47dc:	dc 01       	movw	r26, r24
    47de:	0d 90       	ld	r0, X+
    47e0:	00 20       	and	r0, r0
    47e2:	e9 f7       	brne	.-6      	; 0x47de <strcat+0x4>
    47e4:	11 97       	sbiw	r26, 0x01	; 1
    47e6:	01 90       	ld	r0, Z+
    47e8:	0d 92       	st	X+, r0
    47ea:	00 20       	and	r0, r0
    47ec:	e1 f7       	brne	.-8      	; 0x47e6 <strcat+0xc>
    47ee:	08 95       	ret

000047f0 <strcpy>:
    47f0:	fb 01       	movw	r30, r22
    47f2:	dc 01       	movw	r26, r24
    47f4:	01 90       	ld	r0, Z+
    47f6:	0d 92       	st	X+, r0
    47f8:	00 20       	and	r0, r0
    47fa:	e1 f7       	brne	.-8      	; 0x47f4 <strcpy+0x4>
    47fc:	08 95       	ret

000047fe <strncasecmp>:
    47fe:	fb 01       	movw	r30, r22
    4800:	dc 01       	movw	r26, r24
    4802:	41 50       	subi	r20, 0x01	; 1
    4804:	50 40       	sbci	r21, 0x00	; 0
    4806:	88 f0       	brcs	.+34     	; 0x482a <strncasecmp+0x2c>
    4808:	8d 91       	ld	r24, X+
    480a:	81 34       	cpi	r24, 0x41	; 65
    480c:	1c f0       	brlt	.+6      	; 0x4814 <strncasecmp+0x16>
    480e:	8b 35       	cpi	r24, 0x5B	; 91
    4810:	0c f4       	brge	.+2      	; 0x4814 <strncasecmp+0x16>
    4812:	80 5e       	subi	r24, 0xE0	; 224
    4814:	61 91       	ld	r22, Z+
    4816:	61 34       	cpi	r22, 0x41	; 65
    4818:	1c f0       	brlt	.+6      	; 0x4820 <strncasecmp+0x22>
    481a:	6b 35       	cpi	r22, 0x5B	; 91
    481c:	0c f4       	brge	.+2      	; 0x4820 <strncasecmp+0x22>
    481e:	60 5e       	subi	r22, 0xE0	; 224
    4820:	86 1b       	sub	r24, r22
    4822:	61 11       	cpse	r22, r1
    4824:	71 f3       	breq	.-36     	; 0x4802 <strncasecmp+0x4>
    4826:	99 0b       	sbc	r25, r25
    4828:	08 95       	ret
    482a:	88 1b       	sub	r24, r24
    482c:	fc cf       	rjmp	.-8      	; 0x4826 <strncasecmp+0x28>

0000482e <printf>:
    482e:	cf 93       	push	r28
    4830:	df 93       	push	r29
    4832:	cd b7       	in	r28, 0x3d	; 61
    4834:	de b7       	in	r29, 0x3e	; 62
    4836:	ae 01       	movw	r20, r28
    4838:	4a 5f       	subi	r20, 0xFA	; 250
    483a:	5f 4f       	sbci	r21, 0xFF	; 255
    483c:	fa 01       	movw	r30, r20
    483e:	61 91       	ld	r22, Z+
    4840:	71 91       	ld	r23, Z+
    4842:	af 01       	movw	r20, r30
    4844:	80 91 a7 18 	lds	r24, 0x18A7	; 0x8018a7 <__iob+0x2>
    4848:	90 91 a8 18 	lds	r25, 0x18A8	; 0x8018a8 <__iob+0x3>
    484c:	61 d0       	rcall	.+194    	; 0x4910 <vfprintf>
    484e:	df 91       	pop	r29
    4850:	cf 91       	pop	r28
    4852:	08 95       	ret

00004854 <puts>:
    4854:	0f 93       	push	r16
    4856:	1f 93       	push	r17
    4858:	cf 93       	push	r28
    485a:	df 93       	push	r29
    485c:	e0 91 a7 18 	lds	r30, 0x18A7	; 0x8018a7 <__iob+0x2>
    4860:	f0 91 a8 18 	lds	r31, 0x18A8	; 0x8018a8 <__iob+0x3>
    4864:	23 81       	ldd	r18, Z+3	; 0x03
    4866:	21 ff       	sbrs	r18, 1
    4868:	1b c0       	rjmp	.+54     	; 0x48a0 <puts+0x4c>
    486a:	8c 01       	movw	r16, r24
    486c:	d0 e0       	ldi	r29, 0x00	; 0
    486e:	c0 e0       	ldi	r28, 0x00	; 0
    4870:	f8 01       	movw	r30, r16
    4872:	81 91       	ld	r24, Z+
    4874:	8f 01       	movw	r16, r30
    4876:	60 91 a7 18 	lds	r22, 0x18A7	; 0x8018a7 <__iob+0x2>
    487a:	70 91 a8 18 	lds	r23, 0x18A8	; 0x8018a8 <__iob+0x3>
    487e:	db 01       	movw	r26, r22
    4880:	18 96       	adiw	r26, 0x08	; 8
    4882:	ed 91       	ld	r30, X+
    4884:	fc 91       	ld	r31, X
    4886:	19 97       	sbiw	r26, 0x09	; 9
    4888:	88 23       	and	r24, r24
    488a:	31 f0       	breq	.+12     	; 0x4898 <puts+0x44>
    488c:	19 95       	eicall
    488e:	89 2b       	or	r24, r25
    4890:	79 f3       	breq	.-34     	; 0x4870 <puts+0x1c>
    4892:	df ef       	ldi	r29, 0xFF	; 255
    4894:	cf ef       	ldi	r28, 0xFF	; 255
    4896:	ec cf       	rjmp	.-40     	; 0x4870 <puts+0x1c>
    4898:	8a e0       	ldi	r24, 0x0A	; 10
    489a:	19 95       	eicall
    489c:	89 2b       	or	r24, r25
    489e:	19 f0       	breq	.+6      	; 0x48a6 <puts+0x52>
    48a0:	8f ef       	ldi	r24, 0xFF	; 255
    48a2:	9f ef       	ldi	r25, 0xFF	; 255
    48a4:	02 c0       	rjmp	.+4      	; 0x48aa <puts+0x56>
    48a6:	8d 2f       	mov	r24, r29
    48a8:	9c 2f       	mov	r25, r28
    48aa:	df 91       	pop	r29
    48ac:	cf 91       	pop	r28
    48ae:	1f 91       	pop	r17
    48b0:	0f 91       	pop	r16
    48b2:	08 95       	ret

000048b4 <sprintf>:
    48b4:	0f 93       	push	r16
    48b6:	1f 93       	push	r17
    48b8:	cf 93       	push	r28
    48ba:	df 93       	push	r29
    48bc:	cd b7       	in	r28, 0x3d	; 61
    48be:	de b7       	in	r29, 0x3e	; 62
    48c0:	2e 97       	sbiw	r28, 0x0e	; 14
    48c2:	0f b6       	in	r0, 0x3f	; 63
    48c4:	f8 94       	cli
    48c6:	de bf       	out	0x3e, r29	; 62
    48c8:	0f be       	out	0x3f, r0	; 63
    48ca:	cd bf       	out	0x3d, r28	; 61
    48cc:	0e 89       	ldd	r16, Y+22	; 0x16
    48ce:	1f 89       	ldd	r17, Y+23	; 0x17
    48d0:	86 e0       	ldi	r24, 0x06	; 6
    48d2:	8c 83       	std	Y+4, r24	; 0x04
    48d4:	1a 83       	std	Y+2, r17	; 0x02
    48d6:	09 83       	std	Y+1, r16	; 0x01
    48d8:	8f ef       	ldi	r24, 0xFF	; 255
    48da:	9f e7       	ldi	r25, 0x7F	; 127
    48dc:	9e 83       	std	Y+6, r25	; 0x06
    48de:	8d 83       	std	Y+5, r24	; 0x05
    48e0:	ae 01       	movw	r20, r28
    48e2:	46 5e       	subi	r20, 0xE6	; 230
    48e4:	5f 4f       	sbci	r21, 0xFF	; 255
    48e6:	68 8d       	ldd	r22, Y+24	; 0x18
    48e8:	79 8d       	ldd	r23, Y+25	; 0x19
    48ea:	ce 01       	movw	r24, r28
    48ec:	01 96       	adiw	r24, 0x01	; 1
    48ee:	10 d0       	rcall	.+32     	; 0x4910 <vfprintf>
    48f0:	ef 81       	ldd	r30, Y+7	; 0x07
    48f2:	f8 85       	ldd	r31, Y+8	; 0x08
    48f4:	e0 0f       	add	r30, r16
    48f6:	f1 1f       	adc	r31, r17
    48f8:	10 82       	st	Z, r1
    48fa:	2e 96       	adiw	r28, 0x0e	; 14
    48fc:	0f b6       	in	r0, 0x3f	; 63
    48fe:	f8 94       	cli
    4900:	de bf       	out	0x3e, r29	; 62
    4902:	0f be       	out	0x3f, r0	; 63
    4904:	cd bf       	out	0x3d, r28	; 61
    4906:	df 91       	pop	r29
    4908:	cf 91       	pop	r28
    490a:	1f 91       	pop	r17
    490c:	0f 91       	pop	r16
    490e:	08 95       	ret

00004910 <vfprintf>:
    4910:	2f 92       	push	r2
    4912:	3f 92       	push	r3
    4914:	4f 92       	push	r4
    4916:	5f 92       	push	r5
    4918:	6f 92       	push	r6
    491a:	7f 92       	push	r7
    491c:	8f 92       	push	r8
    491e:	9f 92       	push	r9
    4920:	af 92       	push	r10
    4922:	bf 92       	push	r11
    4924:	cf 92       	push	r12
    4926:	df 92       	push	r13
    4928:	ef 92       	push	r14
    492a:	ff 92       	push	r15
    492c:	0f 93       	push	r16
    492e:	1f 93       	push	r17
    4930:	cf 93       	push	r28
    4932:	df 93       	push	r29
    4934:	cd b7       	in	r28, 0x3d	; 61
    4936:	de b7       	in	r29, 0x3e	; 62
    4938:	2b 97       	sbiw	r28, 0x0b	; 11
    493a:	0f b6       	in	r0, 0x3f	; 63
    493c:	f8 94       	cli
    493e:	de bf       	out	0x3e, r29	; 62
    4940:	0f be       	out	0x3f, r0	; 63
    4942:	cd bf       	out	0x3d, r28	; 61
    4944:	6c 01       	movw	r12, r24
    4946:	7b 01       	movw	r14, r22
    4948:	8a 01       	movw	r16, r20
    494a:	fc 01       	movw	r30, r24
    494c:	17 82       	std	Z+7, r1	; 0x07
    494e:	16 82       	std	Z+6, r1	; 0x06
    4950:	83 81       	ldd	r24, Z+3	; 0x03
    4952:	81 ff       	sbrs	r24, 1
    4954:	bf c1       	rjmp	.+894    	; 0x4cd4 <vfprintf+0x3c4>
    4956:	ce 01       	movw	r24, r28
    4958:	01 96       	adiw	r24, 0x01	; 1
    495a:	3c 01       	movw	r6, r24
    495c:	f6 01       	movw	r30, r12
    495e:	93 81       	ldd	r25, Z+3	; 0x03
    4960:	f7 01       	movw	r30, r14
    4962:	93 fd       	sbrc	r25, 3
    4964:	85 91       	lpm	r24, Z+
    4966:	93 ff       	sbrs	r25, 3
    4968:	81 91       	ld	r24, Z+
    496a:	7f 01       	movw	r14, r30
    496c:	88 23       	and	r24, r24
    496e:	09 f4       	brne	.+2      	; 0x4972 <vfprintf+0x62>
    4970:	ad c1       	rjmp	.+858    	; 0x4ccc <vfprintf+0x3bc>
    4972:	85 32       	cpi	r24, 0x25	; 37
    4974:	39 f4       	brne	.+14     	; 0x4984 <vfprintf+0x74>
    4976:	93 fd       	sbrc	r25, 3
    4978:	85 91       	lpm	r24, Z+
    497a:	93 ff       	sbrs	r25, 3
    497c:	81 91       	ld	r24, Z+
    497e:	7f 01       	movw	r14, r30
    4980:	85 32       	cpi	r24, 0x25	; 37
    4982:	21 f4       	brne	.+8      	; 0x498c <vfprintf+0x7c>
    4984:	b6 01       	movw	r22, r12
    4986:	90 e0       	ldi	r25, 0x00	; 0
    4988:	d6 d1       	rcall	.+940    	; 0x4d36 <fputc>
    498a:	e8 cf       	rjmp	.-48     	; 0x495c <vfprintf+0x4c>
    498c:	91 2c       	mov	r9, r1
    498e:	21 2c       	mov	r2, r1
    4990:	31 2c       	mov	r3, r1
    4992:	ff e1       	ldi	r31, 0x1F	; 31
    4994:	f3 15       	cp	r31, r3
    4996:	d8 f0       	brcs	.+54     	; 0x49ce <vfprintf+0xbe>
    4998:	8b 32       	cpi	r24, 0x2B	; 43
    499a:	79 f0       	breq	.+30     	; 0x49ba <vfprintf+0xaa>
    499c:	38 f4       	brcc	.+14     	; 0x49ac <vfprintf+0x9c>
    499e:	80 32       	cpi	r24, 0x20	; 32
    49a0:	79 f0       	breq	.+30     	; 0x49c0 <vfprintf+0xb0>
    49a2:	83 32       	cpi	r24, 0x23	; 35
    49a4:	a1 f4       	brne	.+40     	; 0x49ce <vfprintf+0xbe>
    49a6:	23 2d       	mov	r18, r3
    49a8:	20 61       	ori	r18, 0x10	; 16
    49aa:	1d c0       	rjmp	.+58     	; 0x49e6 <vfprintf+0xd6>
    49ac:	8d 32       	cpi	r24, 0x2D	; 45
    49ae:	61 f0       	breq	.+24     	; 0x49c8 <vfprintf+0xb8>
    49b0:	80 33       	cpi	r24, 0x30	; 48
    49b2:	69 f4       	brne	.+26     	; 0x49ce <vfprintf+0xbe>
    49b4:	23 2d       	mov	r18, r3
    49b6:	21 60       	ori	r18, 0x01	; 1
    49b8:	16 c0       	rjmp	.+44     	; 0x49e6 <vfprintf+0xd6>
    49ba:	83 2d       	mov	r24, r3
    49bc:	82 60       	ori	r24, 0x02	; 2
    49be:	38 2e       	mov	r3, r24
    49c0:	e3 2d       	mov	r30, r3
    49c2:	e4 60       	ori	r30, 0x04	; 4
    49c4:	3e 2e       	mov	r3, r30
    49c6:	2a c0       	rjmp	.+84     	; 0x4a1c <vfprintf+0x10c>
    49c8:	f3 2d       	mov	r31, r3
    49ca:	f8 60       	ori	r31, 0x08	; 8
    49cc:	1d c0       	rjmp	.+58     	; 0x4a08 <vfprintf+0xf8>
    49ce:	37 fc       	sbrc	r3, 7
    49d0:	2d c0       	rjmp	.+90     	; 0x4a2c <vfprintf+0x11c>
    49d2:	20 ed       	ldi	r18, 0xD0	; 208
    49d4:	28 0f       	add	r18, r24
    49d6:	2a 30       	cpi	r18, 0x0A	; 10
    49d8:	40 f0       	brcs	.+16     	; 0x49ea <vfprintf+0xda>
    49da:	8e 32       	cpi	r24, 0x2E	; 46
    49dc:	b9 f4       	brne	.+46     	; 0x4a0c <vfprintf+0xfc>
    49de:	36 fc       	sbrc	r3, 6
    49e0:	75 c1       	rjmp	.+746    	; 0x4ccc <vfprintf+0x3bc>
    49e2:	23 2d       	mov	r18, r3
    49e4:	20 64       	ori	r18, 0x40	; 64
    49e6:	32 2e       	mov	r3, r18
    49e8:	19 c0       	rjmp	.+50     	; 0x4a1c <vfprintf+0x10c>
    49ea:	36 fe       	sbrs	r3, 6
    49ec:	06 c0       	rjmp	.+12     	; 0x49fa <vfprintf+0xea>
    49ee:	8a e0       	ldi	r24, 0x0A	; 10
    49f0:	98 9e       	mul	r9, r24
    49f2:	20 0d       	add	r18, r0
    49f4:	11 24       	eor	r1, r1
    49f6:	92 2e       	mov	r9, r18
    49f8:	11 c0       	rjmp	.+34     	; 0x4a1c <vfprintf+0x10c>
    49fa:	ea e0       	ldi	r30, 0x0A	; 10
    49fc:	2e 9e       	mul	r2, r30
    49fe:	20 0d       	add	r18, r0
    4a00:	11 24       	eor	r1, r1
    4a02:	22 2e       	mov	r2, r18
    4a04:	f3 2d       	mov	r31, r3
    4a06:	f0 62       	ori	r31, 0x20	; 32
    4a08:	3f 2e       	mov	r3, r31
    4a0a:	08 c0       	rjmp	.+16     	; 0x4a1c <vfprintf+0x10c>
    4a0c:	8c 36       	cpi	r24, 0x6C	; 108
    4a0e:	21 f4       	brne	.+8      	; 0x4a18 <vfprintf+0x108>
    4a10:	83 2d       	mov	r24, r3
    4a12:	80 68       	ori	r24, 0x80	; 128
    4a14:	38 2e       	mov	r3, r24
    4a16:	02 c0       	rjmp	.+4      	; 0x4a1c <vfprintf+0x10c>
    4a18:	88 36       	cpi	r24, 0x68	; 104
    4a1a:	41 f4       	brne	.+16     	; 0x4a2c <vfprintf+0x11c>
    4a1c:	f7 01       	movw	r30, r14
    4a1e:	93 fd       	sbrc	r25, 3
    4a20:	85 91       	lpm	r24, Z+
    4a22:	93 ff       	sbrs	r25, 3
    4a24:	81 91       	ld	r24, Z+
    4a26:	7f 01       	movw	r14, r30
    4a28:	81 11       	cpse	r24, r1
    4a2a:	b3 cf       	rjmp	.-154    	; 0x4992 <vfprintf+0x82>
    4a2c:	98 2f       	mov	r25, r24
    4a2e:	9f 7d       	andi	r25, 0xDF	; 223
    4a30:	95 54       	subi	r25, 0x45	; 69
    4a32:	93 30       	cpi	r25, 0x03	; 3
    4a34:	28 f4       	brcc	.+10     	; 0x4a40 <vfprintf+0x130>
    4a36:	0c 5f       	subi	r16, 0xFC	; 252
    4a38:	1f 4f       	sbci	r17, 0xFF	; 255
    4a3a:	9f e3       	ldi	r25, 0x3F	; 63
    4a3c:	99 83       	std	Y+1, r25	; 0x01
    4a3e:	0d c0       	rjmp	.+26     	; 0x4a5a <vfprintf+0x14a>
    4a40:	83 36       	cpi	r24, 0x63	; 99
    4a42:	31 f0       	breq	.+12     	; 0x4a50 <vfprintf+0x140>
    4a44:	83 37       	cpi	r24, 0x73	; 115
    4a46:	71 f0       	breq	.+28     	; 0x4a64 <vfprintf+0x154>
    4a48:	83 35       	cpi	r24, 0x53	; 83
    4a4a:	09 f0       	breq	.+2      	; 0x4a4e <vfprintf+0x13e>
    4a4c:	55 c0       	rjmp	.+170    	; 0x4af8 <vfprintf+0x1e8>
    4a4e:	20 c0       	rjmp	.+64     	; 0x4a90 <vfprintf+0x180>
    4a50:	f8 01       	movw	r30, r16
    4a52:	80 81       	ld	r24, Z
    4a54:	89 83       	std	Y+1, r24	; 0x01
    4a56:	0e 5f       	subi	r16, 0xFE	; 254
    4a58:	1f 4f       	sbci	r17, 0xFF	; 255
    4a5a:	88 24       	eor	r8, r8
    4a5c:	83 94       	inc	r8
    4a5e:	91 2c       	mov	r9, r1
    4a60:	53 01       	movw	r10, r6
    4a62:	12 c0       	rjmp	.+36     	; 0x4a88 <vfprintf+0x178>
    4a64:	28 01       	movw	r4, r16
    4a66:	f2 e0       	ldi	r31, 0x02	; 2
    4a68:	4f 0e       	add	r4, r31
    4a6a:	51 1c       	adc	r5, r1
    4a6c:	f8 01       	movw	r30, r16
    4a6e:	a0 80       	ld	r10, Z
    4a70:	b1 80       	ldd	r11, Z+1	; 0x01
    4a72:	36 fe       	sbrs	r3, 6
    4a74:	03 c0       	rjmp	.+6      	; 0x4a7c <vfprintf+0x16c>
    4a76:	69 2d       	mov	r22, r9
    4a78:	70 e0       	ldi	r23, 0x00	; 0
    4a7a:	02 c0       	rjmp	.+4      	; 0x4a80 <vfprintf+0x170>
    4a7c:	6f ef       	ldi	r22, 0xFF	; 255
    4a7e:	7f ef       	ldi	r23, 0xFF	; 255
    4a80:	c5 01       	movw	r24, r10
    4a82:	4e d1       	rcall	.+668    	; 0x4d20 <strnlen>
    4a84:	4c 01       	movw	r8, r24
    4a86:	82 01       	movw	r16, r4
    4a88:	f3 2d       	mov	r31, r3
    4a8a:	ff 77       	andi	r31, 0x7F	; 127
    4a8c:	3f 2e       	mov	r3, r31
    4a8e:	15 c0       	rjmp	.+42     	; 0x4aba <vfprintf+0x1aa>
    4a90:	28 01       	movw	r4, r16
    4a92:	22 e0       	ldi	r18, 0x02	; 2
    4a94:	42 0e       	add	r4, r18
    4a96:	51 1c       	adc	r5, r1
    4a98:	f8 01       	movw	r30, r16
    4a9a:	a0 80       	ld	r10, Z
    4a9c:	b1 80       	ldd	r11, Z+1	; 0x01
    4a9e:	36 fe       	sbrs	r3, 6
    4aa0:	03 c0       	rjmp	.+6      	; 0x4aa8 <vfprintf+0x198>
    4aa2:	69 2d       	mov	r22, r9
    4aa4:	70 e0       	ldi	r23, 0x00	; 0
    4aa6:	02 c0       	rjmp	.+4      	; 0x4aac <vfprintf+0x19c>
    4aa8:	6f ef       	ldi	r22, 0xFF	; 255
    4aaa:	7f ef       	ldi	r23, 0xFF	; 255
    4aac:	c5 01       	movw	r24, r10
    4aae:	2d d1       	rcall	.+602    	; 0x4d0a <strnlen_P>
    4ab0:	4c 01       	movw	r8, r24
    4ab2:	f3 2d       	mov	r31, r3
    4ab4:	f0 68       	ori	r31, 0x80	; 128
    4ab6:	3f 2e       	mov	r3, r31
    4ab8:	82 01       	movw	r16, r4
    4aba:	33 fc       	sbrc	r3, 3
    4abc:	19 c0       	rjmp	.+50     	; 0x4af0 <vfprintf+0x1e0>
    4abe:	82 2d       	mov	r24, r2
    4ac0:	90 e0       	ldi	r25, 0x00	; 0
    4ac2:	88 16       	cp	r8, r24
    4ac4:	99 06       	cpc	r9, r25
    4ac6:	a0 f4       	brcc	.+40     	; 0x4af0 <vfprintf+0x1e0>
    4ac8:	b6 01       	movw	r22, r12
    4aca:	80 e2       	ldi	r24, 0x20	; 32
    4acc:	90 e0       	ldi	r25, 0x00	; 0
    4ace:	33 d1       	rcall	.+614    	; 0x4d36 <fputc>
    4ad0:	2a 94       	dec	r2
    4ad2:	f5 cf       	rjmp	.-22     	; 0x4abe <vfprintf+0x1ae>
    4ad4:	f5 01       	movw	r30, r10
    4ad6:	37 fc       	sbrc	r3, 7
    4ad8:	85 91       	lpm	r24, Z+
    4ada:	37 fe       	sbrs	r3, 7
    4adc:	81 91       	ld	r24, Z+
    4ade:	5f 01       	movw	r10, r30
    4ae0:	b6 01       	movw	r22, r12
    4ae2:	90 e0       	ldi	r25, 0x00	; 0
    4ae4:	28 d1       	rcall	.+592    	; 0x4d36 <fputc>
    4ae6:	21 10       	cpse	r2, r1
    4ae8:	2a 94       	dec	r2
    4aea:	21 e0       	ldi	r18, 0x01	; 1
    4aec:	82 1a       	sub	r8, r18
    4aee:	91 08       	sbc	r9, r1
    4af0:	81 14       	cp	r8, r1
    4af2:	91 04       	cpc	r9, r1
    4af4:	79 f7       	brne	.-34     	; 0x4ad4 <vfprintf+0x1c4>
    4af6:	e1 c0       	rjmp	.+450    	; 0x4cba <vfprintf+0x3aa>
    4af8:	84 36       	cpi	r24, 0x64	; 100
    4afa:	11 f0       	breq	.+4      	; 0x4b00 <vfprintf+0x1f0>
    4afc:	89 36       	cpi	r24, 0x69	; 105
    4afe:	39 f5       	brne	.+78     	; 0x4b4e <vfprintf+0x23e>
    4b00:	f8 01       	movw	r30, r16
    4b02:	37 fe       	sbrs	r3, 7
    4b04:	07 c0       	rjmp	.+14     	; 0x4b14 <vfprintf+0x204>
    4b06:	60 81       	ld	r22, Z
    4b08:	71 81       	ldd	r23, Z+1	; 0x01
    4b0a:	82 81       	ldd	r24, Z+2	; 0x02
    4b0c:	93 81       	ldd	r25, Z+3	; 0x03
    4b0e:	0c 5f       	subi	r16, 0xFC	; 252
    4b10:	1f 4f       	sbci	r17, 0xFF	; 255
    4b12:	08 c0       	rjmp	.+16     	; 0x4b24 <vfprintf+0x214>
    4b14:	60 81       	ld	r22, Z
    4b16:	71 81       	ldd	r23, Z+1	; 0x01
    4b18:	07 2e       	mov	r0, r23
    4b1a:	00 0c       	add	r0, r0
    4b1c:	88 0b       	sbc	r24, r24
    4b1e:	99 0b       	sbc	r25, r25
    4b20:	0e 5f       	subi	r16, 0xFE	; 254
    4b22:	1f 4f       	sbci	r17, 0xFF	; 255
    4b24:	f3 2d       	mov	r31, r3
    4b26:	ff 76       	andi	r31, 0x6F	; 111
    4b28:	3f 2e       	mov	r3, r31
    4b2a:	97 ff       	sbrs	r25, 7
    4b2c:	09 c0       	rjmp	.+18     	; 0x4b40 <vfprintf+0x230>
    4b2e:	90 95       	com	r25
    4b30:	80 95       	com	r24
    4b32:	70 95       	com	r23
    4b34:	61 95       	neg	r22
    4b36:	7f 4f       	sbci	r23, 0xFF	; 255
    4b38:	8f 4f       	sbci	r24, 0xFF	; 255
    4b3a:	9f 4f       	sbci	r25, 0xFF	; 255
    4b3c:	f0 68       	ori	r31, 0x80	; 128
    4b3e:	3f 2e       	mov	r3, r31
    4b40:	2a e0       	ldi	r18, 0x0A	; 10
    4b42:	30 e0       	ldi	r19, 0x00	; 0
    4b44:	a3 01       	movw	r20, r6
    4b46:	33 d1       	rcall	.+614    	; 0x4dae <__ultoa_invert>
    4b48:	88 2e       	mov	r8, r24
    4b4a:	86 18       	sub	r8, r6
    4b4c:	44 c0       	rjmp	.+136    	; 0x4bd6 <vfprintf+0x2c6>
    4b4e:	85 37       	cpi	r24, 0x75	; 117
    4b50:	31 f4       	brne	.+12     	; 0x4b5e <vfprintf+0x24e>
    4b52:	23 2d       	mov	r18, r3
    4b54:	2f 7e       	andi	r18, 0xEF	; 239
    4b56:	b2 2e       	mov	r11, r18
    4b58:	2a e0       	ldi	r18, 0x0A	; 10
    4b5a:	30 e0       	ldi	r19, 0x00	; 0
    4b5c:	25 c0       	rjmp	.+74     	; 0x4ba8 <vfprintf+0x298>
    4b5e:	93 2d       	mov	r25, r3
    4b60:	99 7f       	andi	r25, 0xF9	; 249
    4b62:	b9 2e       	mov	r11, r25
    4b64:	8f 36       	cpi	r24, 0x6F	; 111
    4b66:	c1 f0       	breq	.+48     	; 0x4b98 <vfprintf+0x288>
    4b68:	18 f4       	brcc	.+6      	; 0x4b70 <vfprintf+0x260>
    4b6a:	88 35       	cpi	r24, 0x58	; 88
    4b6c:	79 f0       	breq	.+30     	; 0x4b8c <vfprintf+0x27c>
    4b6e:	ae c0       	rjmp	.+348    	; 0x4ccc <vfprintf+0x3bc>
    4b70:	80 37       	cpi	r24, 0x70	; 112
    4b72:	19 f0       	breq	.+6      	; 0x4b7a <vfprintf+0x26a>
    4b74:	88 37       	cpi	r24, 0x78	; 120
    4b76:	21 f0       	breq	.+8      	; 0x4b80 <vfprintf+0x270>
    4b78:	a9 c0       	rjmp	.+338    	; 0x4ccc <vfprintf+0x3bc>
    4b7a:	e9 2f       	mov	r30, r25
    4b7c:	e0 61       	ori	r30, 0x10	; 16
    4b7e:	be 2e       	mov	r11, r30
    4b80:	b4 fe       	sbrs	r11, 4
    4b82:	0d c0       	rjmp	.+26     	; 0x4b9e <vfprintf+0x28e>
    4b84:	fb 2d       	mov	r31, r11
    4b86:	f4 60       	ori	r31, 0x04	; 4
    4b88:	bf 2e       	mov	r11, r31
    4b8a:	09 c0       	rjmp	.+18     	; 0x4b9e <vfprintf+0x28e>
    4b8c:	34 fe       	sbrs	r3, 4
    4b8e:	0a c0       	rjmp	.+20     	; 0x4ba4 <vfprintf+0x294>
    4b90:	29 2f       	mov	r18, r25
    4b92:	26 60       	ori	r18, 0x06	; 6
    4b94:	b2 2e       	mov	r11, r18
    4b96:	06 c0       	rjmp	.+12     	; 0x4ba4 <vfprintf+0x294>
    4b98:	28 e0       	ldi	r18, 0x08	; 8
    4b9a:	30 e0       	ldi	r19, 0x00	; 0
    4b9c:	05 c0       	rjmp	.+10     	; 0x4ba8 <vfprintf+0x298>
    4b9e:	20 e1       	ldi	r18, 0x10	; 16
    4ba0:	30 e0       	ldi	r19, 0x00	; 0
    4ba2:	02 c0       	rjmp	.+4      	; 0x4ba8 <vfprintf+0x298>
    4ba4:	20 e1       	ldi	r18, 0x10	; 16
    4ba6:	32 e0       	ldi	r19, 0x02	; 2
    4ba8:	f8 01       	movw	r30, r16
    4baa:	b7 fe       	sbrs	r11, 7
    4bac:	07 c0       	rjmp	.+14     	; 0x4bbc <vfprintf+0x2ac>
    4bae:	60 81       	ld	r22, Z
    4bb0:	71 81       	ldd	r23, Z+1	; 0x01
    4bb2:	82 81       	ldd	r24, Z+2	; 0x02
    4bb4:	93 81       	ldd	r25, Z+3	; 0x03
    4bb6:	0c 5f       	subi	r16, 0xFC	; 252
    4bb8:	1f 4f       	sbci	r17, 0xFF	; 255
    4bba:	06 c0       	rjmp	.+12     	; 0x4bc8 <vfprintf+0x2b8>
    4bbc:	60 81       	ld	r22, Z
    4bbe:	71 81       	ldd	r23, Z+1	; 0x01
    4bc0:	80 e0       	ldi	r24, 0x00	; 0
    4bc2:	90 e0       	ldi	r25, 0x00	; 0
    4bc4:	0e 5f       	subi	r16, 0xFE	; 254
    4bc6:	1f 4f       	sbci	r17, 0xFF	; 255
    4bc8:	a3 01       	movw	r20, r6
    4bca:	f1 d0       	rcall	.+482    	; 0x4dae <__ultoa_invert>
    4bcc:	88 2e       	mov	r8, r24
    4bce:	86 18       	sub	r8, r6
    4bd0:	fb 2d       	mov	r31, r11
    4bd2:	ff 77       	andi	r31, 0x7F	; 127
    4bd4:	3f 2e       	mov	r3, r31
    4bd6:	36 fe       	sbrs	r3, 6
    4bd8:	0d c0       	rjmp	.+26     	; 0x4bf4 <vfprintf+0x2e4>
    4bda:	23 2d       	mov	r18, r3
    4bdc:	2e 7f       	andi	r18, 0xFE	; 254
    4bde:	a2 2e       	mov	r10, r18
    4be0:	89 14       	cp	r8, r9
    4be2:	58 f4       	brcc	.+22     	; 0x4bfa <vfprintf+0x2ea>
    4be4:	34 fe       	sbrs	r3, 4
    4be6:	0b c0       	rjmp	.+22     	; 0x4bfe <vfprintf+0x2ee>
    4be8:	32 fc       	sbrc	r3, 2
    4bea:	09 c0       	rjmp	.+18     	; 0x4bfe <vfprintf+0x2ee>
    4bec:	83 2d       	mov	r24, r3
    4bee:	8e 7e       	andi	r24, 0xEE	; 238
    4bf0:	a8 2e       	mov	r10, r24
    4bf2:	05 c0       	rjmp	.+10     	; 0x4bfe <vfprintf+0x2ee>
    4bf4:	b8 2c       	mov	r11, r8
    4bf6:	a3 2c       	mov	r10, r3
    4bf8:	03 c0       	rjmp	.+6      	; 0x4c00 <vfprintf+0x2f0>
    4bfa:	b8 2c       	mov	r11, r8
    4bfc:	01 c0       	rjmp	.+2      	; 0x4c00 <vfprintf+0x2f0>
    4bfe:	b9 2c       	mov	r11, r9
    4c00:	a4 fe       	sbrs	r10, 4
    4c02:	0f c0       	rjmp	.+30     	; 0x4c22 <vfprintf+0x312>
    4c04:	fe 01       	movw	r30, r28
    4c06:	e8 0d       	add	r30, r8
    4c08:	f1 1d       	adc	r31, r1
    4c0a:	80 81       	ld	r24, Z
    4c0c:	80 33       	cpi	r24, 0x30	; 48
    4c0e:	21 f4       	brne	.+8      	; 0x4c18 <vfprintf+0x308>
    4c10:	9a 2d       	mov	r25, r10
    4c12:	99 7e       	andi	r25, 0xE9	; 233
    4c14:	a9 2e       	mov	r10, r25
    4c16:	09 c0       	rjmp	.+18     	; 0x4c2a <vfprintf+0x31a>
    4c18:	a2 fe       	sbrs	r10, 2
    4c1a:	06 c0       	rjmp	.+12     	; 0x4c28 <vfprintf+0x318>
    4c1c:	b3 94       	inc	r11
    4c1e:	b3 94       	inc	r11
    4c20:	04 c0       	rjmp	.+8      	; 0x4c2a <vfprintf+0x31a>
    4c22:	8a 2d       	mov	r24, r10
    4c24:	86 78       	andi	r24, 0x86	; 134
    4c26:	09 f0       	breq	.+2      	; 0x4c2a <vfprintf+0x31a>
    4c28:	b3 94       	inc	r11
    4c2a:	a3 fc       	sbrc	r10, 3
    4c2c:	10 c0       	rjmp	.+32     	; 0x4c4e <vfprintf+0x33e>
    4c2e:	a0 fe       	sbrs	r10, 0
    4c30:	06 c0       	rjmp	.+12     	; 0x4c3e <vfprintf+0x32e>
    4c32:	b2 14       	cp	r11, r2
    4c34:	80 f4       	brcc	.+32     	; 0x4c56 <vfprintf+0x346>
    4c36:	28 0c       	add	r2, r8
    4c38:	92 2c       	mov	r9, r2
    4c3a:	9b 18       	sub	r9, r11
    4c3c:	0d c0       	rjmp	.+26     	; 0x4c58 <vfprintf+0x348>
    4c3e:	b2 14       	cp	r11, r2
    4c40:	58 f4       	brcc	.+22     	; 0x4c58 <vfprintf+0x348>
    4c42:	b6 01       	movw	r22, r12
    4c44:	80 e2       	ldi	r24, 0x20	; 32
    4c46:	90 e0       	ldi	r25, 0x00	; 0
    4c48:	76 d0       	rcall	.+236    	; 0x4d36 <fputc>
    4c4a:	b3 94       	inc	r11
    4c4c:	f8 cf       	rjmp	.-16     	; 0x4c3e <vfprintf+0x32e>
    4c4e:	b2 14       	cp	r11, r2
    4c50:	18 f4       	brcc	.+6      	; 0x4c58 <vfprintf+0x348>
    4c52:	2b 18       	sub	r2, r11
    4c54:	02 c0       	rjmp	.+4      	; 0x4c5a <vfprintf+0x34a>
    4c56:	98 2c       	mov	r9, r8
    4c58:	21 2c       	mov	r2, r1
    4c5a:	a4 fe       	sbrs	r10, 4
    4c5c:	0f c0       	rjmp	.+30     	; 0x4c7c <vfprintf+0x36c>
    4c5e:	b6 01       	movw	r22, r12
    4c60:	80 e3       	ldi	r24, 0x30	; 48
    4c62:	90 e0       	ldi	r25, 0x00	; 0
    4c64:	68 d0       	rcall	.+208    	; 0x4d36 <fputc>
    4c66:	a2 fe       	sbrs	r10, 2
    4c68:	16 c0       	rjmp	.+44     	; 0x4c96 <vfprintf+0x386>
    4c6a:	a1 fc       	sbrc	r10, 1
    4c6c:	03 c0       	rjmp	.+6      	; 0x4c74 <vfprintf+0x364>
    4c6e:	88 e7       	ldi	r24, 0x78	; 120
    4c70:	90 e0       	ldi	r25, 0x00	; 0
    4c72:	02 c0       	rjmp	.+4      	; 0x4c78 <vfprintf+0x368>
    4c74:	88 e5       	ldi	r24, 0x58	; 88
    4c76:	90 e0       	ldi	r25, 0x00	; 0
    4c78:	b6 01       	movw	r22, r12
    4c7a:	0c c0       	rjmp	.+24     	; 0x4c94 <vfprintf+0x384>
    4c7c:	8a 2d       	mov	r24, r10
    4c7e:	86 78       	andi	r24, 0x86	; 134
    4c80:	51 f0       	breq	.+20     	; 0x4c96 <vfprintf+0x386>
    4c82:	a1 fe       	sbrs	r10, 1
    4c84:	02 c0       	rjmp	.+4      	; 0x4c8a <vfprintf+0x37a>
    4c86:	8b e2       	ldi	r24, 0x2B	; 43
    4c88:	01 c0       	rjmp	.+2      	; 0x4c8c <vfprintf+0x37c>
    4c8a:	80 e2       	ldi	r24, 0x20	; 32
    4c8c:	a7 fc       	sbrc	r10, 7
    4c8e:	8d e2       	ldi	r24, 0x2D	; 45
    4c90:	b6 01       	movw	r22, r12
    4c92:	90 e0       	ldi	r25, 0x00	; 0
    4c94:	50 d0       	rcall	.+160    	; 0x4d36 <fputc>
    4c96:	89 14       	cp	r8, r9
    4c98:	30 f4       	brcc	.+12     	; 0x4ca6 <vfprintf+0x396>
    4c9a:	b6 01       	movw	r22, r12
    4c9c:	80 e3       	ldi	r24, 0x30	; 48
    4c9e:	90 e0       	ldi	r25, 0x00	; 0
    4ca0:	4a d0       	rcall	.+148    	; 0x4d36 <fputc>
    4ca2:	9a 94       	dec	r9
    4ca4:	f8 cf       	rjmp	.-16     	; 0x4c96 <vfprintf+0x386>
    4ca6:	8a 94       	dec	r8
    4ca8:	f3 01       	movw	r30, r6
    4caa:	e8 0d       	add	r30, r8
    4cac:	f1 1d       	adc	r31, r1
    4cae:	80 81       	ld	r24, Z
    4cb0:	b6 01       	movw	r22, r12
    4cb2:	90 e0       	ldi	r25, 0x00	; 0
    4cb4:	40 d0       	rcall	.+128    	; 0x4d36 <fputc>
    4cb6:	81 10       	cpse	r8, r1
    4cb8:	f6 cf       	rjmp	.-20     	; 0x4ca6 <vfprintf+0x396>
    4cba:	22 20       	and	r2, r2
    4cbc:	09 f4       	brne	.+2      	; 0x4cc0 <vfprintf+0x3b0>
    4cbe:	4e ce       	rjmp	.-868    	; 0x495c <vfprintf+0x4c>
    4cc0:	b6 01       	movw	r22, r12
    4cc2:	80 e2       	ldi	r24, 0x20	; 32
    4cc4:	90 e0       	ldi	r25, 0x00	; 0
    4cc6:	37 d0       	rcall	.+110    	; 0x4d36 <fputc>
    4cc8:	2a 94       	dec	r2
    4cca:	f7 cf       	rjmp	.-18     	; 0x4cba <vfprintf+0x3aa>
    4ccc:	f6 01       	movw	r30, r12
    4cce:	86 81       	ldd	r24, Z+6	; 0x06
    4cd0:	97 81       	ldd	r25, Z+7	; 0x07
    4cd2:	02 c0       	rjmp	.+4      	; 0x4cd8 <vfprintf+0x3c8>
    4cd4:	8f ef       	ldi	r24, 0xFF	; 255
    4cd6:	9f ef       	ldi	r25, 0xFF	; 255
    4cd8:	2b 96       	adiw	r28, 0x0b	; 11
    4cda:	0f b6       	in	r0, 0x3f	; 63
    4cdc:	f8 94       	cli
    4cde:	de bf       	out	0x3e, r29	; 62
    4ce0:	0f be       	out	0x3f, r0	; 63
    4ce2:	cd bf       	out	0x3d, r28	; 61
    4ce4:	df 91       	pop	r29
    4ce6:	cf 91       	pop	r28
    4ce8:	1f 91       	pop	r17
    4cea:	0f 91       	pop	r16
    4cec:	ff 90       	pop	r15
    4cee:	ef 90       	pop	r14
    4cf0:	df 90       	pop	r13
    4cf2:	cf 90       	pop	r12
    4cf4:	bf 90       	pop	r11
    4cf6:	af 90       	pop	r10
    4cf8:	9f 90       	pop	r9
    4cfa:	8f 90       	pop	r8
    4cfc:	7f 90       	pop	r7
    4cfe:	6f 90       	pop	r6
    4d00:	5f 90       	pop	r5
    4d02:	4f 90       	pop	r4
    4d04:	3f 90       	pop	r3
    4d06:	2f 90       	pop	r2
    4d08:	08 95       	ret

00004d0a <strnlen_P>:
    4d0a:	fc 01       	movw	r30, r24
    4d0c:	05 90       	lpm	r0, Z+
    4d0e:	61 50       	subi	r22, 0x01	; 1
    4d10:	70 40       	sbci	r23, 0x00	; 0
    4d12:	01 10       	cpse	r0, r1
    4d14:	d8 f7       	brcc	.-10     	; 0x4d0c <strnlen_P+0x2>
    4d16:	80 95       	com	r24
    4d18:	90 95       	com	r25
    4d1a:	8e 0f       	add	r24, r30
    4d1c:	9f 1f       	adc	r25, r31
    4d1e:	08 95       	ret

00004d20 <strnlen>:
    4d20:	fc 01       	movw	r30, r24
    4d22:	61 50       	subi	r22, 0x01	; 1
    4d24:	70 40       	sbci	r23, 0x00	; 0
    4d26:	01 90       	ld	r0, Z+
    4d28:	01 10       	cpse	r0, r1
    4d2a:	d8 f7       	brcc	.-10     	; 0x4d22 <strnlen+0x2>
    4d2c:	80 95       	com	r24
    4d2e:	90 95       	com	r25
    4d30:	8e 0f       	add	r24, r30
    4d32:	9f 1f       	adc	r25, r31
    4d34:	08 95       	ret

00004d36 <fputc>:
    4d36:	0f 93       	push	r16
    4d38:	1f 93       	push	r17
    4d3a:	cf 93       	push	r28
    4d3c:	df 93       	push	r29
    4d3e:	fb 01       	movw	r30, r22
    4d40:	23 81       	ldd	r18, Z+3	; 0x03
    4d42:	21 fd       	sbrc	r18, 1
    4d44:	03 c0       	rjmp	.+6      	; 0x4d4c <fputc+0x16>
    4d46:	8f ef       	ldi	r24, 0xFF	; 255
    4d48:	9f ef       	ldi	r25, 0xFF	; 255
    4d4a:	2c c0       	rjmp	.+88     	; 0x4da4 <fputc+0x6e>
    4d4c:	22 ff       	sbrs	r18, 2
    4d4e:	16 c0       	rjmp	.+44     	; 0x4d7c <fputc+0x46>
    4d50:	46 81       	ldd	r20, Z+6	; 0x06
    4d52:	57 81       	ldd	r21, Z+7	; 0x07
    4d54:	24 81       	ldd	r18, Z+4	; 0x04
    4d56:	35 81       	ldd	r19, Z+5	; 0x05
    4d58:	42 17       	cp	r20, r18
    4d5a:	53 07       	cpc	r21, r19
    4d5c:	44 f4       	brge	.+16     	; 0x4d6e <fputc+0x38>
    4d5e:	a0 81       	ld	r26, Z
    4d60:	b1 81       	ldd	r27, Z+1	; 0x01
    4d62:	9d 01       	movw	r18, r26
    4d64:	2f 5f       	subi	r18, 0xFF	; 255
    4d66:	3f 4f       	sbci	r19, 0xFF	; 255
    4d68:	31 83       	std	Z+1, r19	; 0x01
    4d6a:	20 83       	st	Z, r18
    4d6c:	8c 93       	st	X, r24
    4d6e:	26 81       	ldd	r18, Z+6	; 0x06
    4d70:	37 81       	ldd	r19, Z+7	; 0x07
    4d72:	2f 5f       	subi	r18, 0xFF	; 255
    4d74:	3f 4f       	sbci	r19, 0xFF	; 255
    4d76:	37 83       	std	Z+7, r19	; 0x07
    4d78:	26 83       	std	Z+6, r18	; 0x06
    4d7a:	14 c0       	rjmp	.+40     	; 0x4da4 <fputc+0x6e>
    4d7c:	8b 01       	movw	r16, r22
    4d7e:	ec 01       	movw	r28, r24
    4d80:	fb 01       	movw	r30, r22
    4d82:	00 84       	ldd	r0, Z+8	; 0x08
    4d84:	f1 85       	ldd	r31, Z+9	; 0x09
    4d86:	e0 2d       	mov	r30, r0
    4d88:	19 95       	eicall
    4d8a:	89 2b       	or	r24, r25
    4d8c:	e1 f6       	brne	.-72     	; 0x4d46 <fputc+0x10>
    4d8e:	d8 01       	movw	r26, r16
    4d90:	16 96       	adiw	r26, 0x06	; 6
    4d92:	8d 91       	ld	r24, X+
    4d94:	9c 91       	ld	r25, X
    4d96:	17 97       	sbiw	r26, 0x07	; 7
    4d98:	01 96       	adiw	r24, 0x01	; 1
    4d9a:	17 96       	adiw	r26, 0x07	; 7
    4d9c:	9c 93       	st	X, r25
    4d9e:	8e 93       	st	-X, r24
    4da0:	16 97       	sbiw	r26, 0x06	; 6
    4da2:	ce 01       	movw	r24, r28
    4da4:	df 91       	pop	r29
    4da6:	cf 91       	pop	r28
    4da8:	1f 91       	pop	r17
    4daa:	0f 91       	pop	r16
    4dac:	08 95       	ret

00004dae <__ultoa_invert>:
    4dae:	fa 01       	movw	r30, r20
    4db0:	aa 27       	eor	r26, r26
    4db2:	28 30       	cpi	r18, 0x08	; 8
    4db4:	51 f1       	breq	.+84     	; 0x4e0a <__ultoa_invert+0x5c>
    4db6:	20 31       	cpi	r18, 0x10	; 16
    4db8:	81 f1       	breq	.+96     	; 0x4e1a <__ultoa_invert+0x6c>
    4dba:	e8 94       	clt
    4dbc:	6f 93       	push	r22
    4dbe:	6e 7f       	andi	r22, 0xFE	; 254
    4dc0:	6e 5f       	subi	r22, 0xFE	; 254
    4dc2:	7f 4f       	sbci	r23, 0xFF	; 255
    4dc4:	8f 4f       	sbci	r24, 0xFF	; 255
    4dc6:	9f 4f       	sbci	r25, 0xFF	; 255
    4dc8:	af 4f       	sbci	r26, 0xFF	; 255
    4dca:	b1 e0       	ldi	r27, 0x01	; 1
    4dcc:	3e d0       	rcall	.+124    	; 0x4e4a <__ultoa_invert+0x9c>
    4dce:	b4 e0       	ldi	r27, 0x04	; 4
    4dd0:	3c d0       	rcall	.+120    	; 0x4e4a <__ultoa_invert+0x9c>
    4dd2:	67 0f       	add	r22, r23
    4dd4:	78 1f       	adc	r23, r24
    4dd6:	89 1f       	adc	r24, r25
    4dd8:	9a 1f       	adc	r25, r26
    4dda:	a1 1d       	adc	r26, r1
    4ddc:	68 0f       	add	r22, r24
    4dde:	79 1f       	adc	r23, r25
    4de0:	8a 1f       	adc	r24, r26
    4de2:	91 1d       	adc	r25, r1
    4de4:	a1 1d       	adc	r26, r1
    4de6:	6a 0f       	add	r22, r26
    4de8:	71 1d       	adc	r23, r1
    4dea:	81 1d       	adc	r24, r1
    4dec:	91 1d       	adc	r25, r1
    4dee:	a1 1d       	adc	r26, r1
    4df0:	20 d0       	rcall	.+64     	; 0x4e32 <__ultoa_invert+0x84>
    4df2:	09 f4       	brne	.+2      	; 0x4df6 <__ultoa_invert+0x48>
    4df4:	68 94       	set
    4df6:	3f 91       	pop	r19
    4df8:	2a e0       	ldi	r18, 0x0A	; 10
    4dfa:	26 9f       	mul	r18, r22
    4dfc:	11 24       	eor	r1, r1
    4dfe:	30 19       	sub	r19, r0
    4e00:	30 5d       	subi	r19, 0xD0	; 208
    4e02:	31 93       	st	Z+, r19
    4e04:	de f6       	brtc	.-74     	; 0x4dbc <__ultoa_invert+0xe>
    4e06:	cf 01       	movw	r24, r30
    4e08:	08 95       	ret
    4e0a:	46 2f       	mov	r20, r22
    4e0c:	47 70       	andi	r20, 0x07	; 7
    4e0e:	40 5d       	subi	r20, 0xD0	; 208
    4e10:	41 93       	st	Z+, r20
    4e12:	b3 e0       	ldi	r27, 0x03	; 3
    4e14:	0f d0       	rcall	.+30     	; 0x4e34 <__ultoa_invert+0x86>
    4e16:	c9 f7       	brne	.-14     	; 0x4e0a <__ultoa_invert+0x5c>
    4e18:	f6 cf       	rjmp	.-20     	; 0x4e06 <__ultoa_invert+0x58>
    4e1a:	46 2f       	mov	r20, r22
    4e1c:	4f 70       	andi	r20, 0x0F	; 15
    4e1e:	40 5d       	subi	r20, 0xD0	; 208
    4e20:	4a 33       	cpi	r20, 0x3A	; 58
    4e22:	18 f0       	brcs	.+6      	; 0x4e2a <__ultoa_invert+0x7c>
    4e24:	49 5d       	subi	r20, 0xD9	; 217
    4e26:	31 fd       	sbrc	r19, 1
    4e28:	40 52       	subi	r20, 0x20	; 32
    4e2a:	41 93       	st	Z+, r20
    4e2c:	02 d0       	rcall	.+4      	; 0x4e32 <__ultoa_invert+0x84>
    4e2e:	a9 f7       	brne	.-22     	; 0x4e1a <__ultoa_invert+0x6c>
    4e30:	ea cf       	rjmp	.-44     	; 0x4e06 <__ultoa_invert+0x58>
    4e32:	b4 e0       	ldi	r27, 0x04	; 4
    4e34:	a6 95       	lsr	r26
    4e36:	97 95       	ror	r25
    4e38:	87 95       	ror	r24
    4e3a:	77 95       	ror	r23
    4e3c:	67 95       	ror	r22
    4e3e:	ba 95       	dec	r27
    4e40:	c9 f7       	brne	.-14     	; 0x4e34 <__ultoa_invert+0x86>
    4e42:	00 97       	sbiw	r24, 0x00	; 0
    4e44:	61 05       	cpc	r22, r1
    4e46:	71 05       	cpc	r23, r1
    4e48:	08 95       	ret
    4e4a:	9b 01       	movw	r18, r22
    4e4c:	ac 01       	movw	r20, r24
    4e4e:	0a 2e       	mov	r0, r26
    4e50:	06 94       	lsr	r0
    4e52:	57 95       	ror	r21
    4e54:	47 95       	ror	r20
    4e56:	37 95       	ror	r19
    4e58:	27 95       	ror	r18
    4e5a:	ba 95       	dec	r27
    4e5c:	c9 f7       	brne	.-14     	; 0x4e50 <__ultoa_invert+0xa2>
    4e5e:	62 0f       	add	r22, r18
    4e60:	73 1f       	adc	r23, r19
    4e62:	84 1f       	adc	r24, r20
    4e64:	95 1f       	adc	r25, r21
    4e66:	a0 1d       	adc	r26, r0
    4e68:	08 95       	ret

00004e6a <_exit>:
    4e6a:	f8 94       	cli

00004e6c <__stop_program>:
    4e6c:	ff cf       	rjmp	.-2      	; 0x4e6c <__stop_program>
